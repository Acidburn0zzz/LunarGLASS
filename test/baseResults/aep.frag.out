
Top IR:
; ModuleID = 'Glslang'

%inName = type { <4 x float> }

@color = global <4 x float> zeroinitializer
@inInst = global %inName zeroinitializer
@gl_Layer = global i32 0
@gl_PrimitiveID = global i32 0
@gl_SampleID = global i32 0
@gl_SamplePosition = global <2 x float> zeroinitializer
@gl_SampleMaskIn = global [1 x i32] zeroinitializer
@gl_SampleMask = global [1 x i32] zeroinitializer
@gl_NumSamples = external addrspace(2) constant i32
@scalarIn = global float 0.000000e+00
@sampInArray = global <3 x float> zeroinitializer
@colorSampIn = global <4 x float> zeroinitializer
@colorfsi = global <4 x float> zeroinitializer
@i = external addrspace(2) constant i32

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color = load <4 x float>* getelementptr inbounds (%inName* @inInst, i32 0, i32 0)
  store <4 x float> %color, <4 x float>* @color
  %0 = call i32 @"foo_GS("()
  %1 = sitofp i32 %0 to float, !gla.precision !34
  %2 = load <4 x float>* @color
  %3 = insertelement <4 x float> undef, float %1, i32 0, !gla.precision !34
  %4 = insertelement <4 x float> %3, float %1, i32 1, !gla.precision !34
  %5 = insertelement <4 x float> %4, float %1, i32 2, !gla.precision !34
  %6 = insertelement <4 x float> %5, float %1, i32 3, !gla.precision !34
  %color1 = fmul <4 x float> %2, %6, !gla.precision !34
  store <4 x float> %color1, <4 x float>* @color
  call void @"goodSample("()
  %7 = call <3 x float> @"interp("()
  %8 = load <4 x float>* @color
  %9 = extractelement <4 x float> %8, i32 0, !gla.precision !34
  %10 = insertelement <3 x float> undef, float %9, i32 0, !gla.precision !34
  %11 = extractelement <4 x float> %8, i32 1, !gla.precision !34
  %12 = insertelement <3 x float> %10, float %11, i32 1, !gla.precision !34
  %13 = extractelement <4 x float> %8, i32 2, !gla.precision !34
  %14 = insertelement <3 x float> %12, float %13, i32 2, !gla.precision !34
  %15 = fadd <3 x float> %14, %7, !gla.precision !34
  %16 = load <4 x float>* @color
  %17 = extractelement <3 x float> %15, i32 0
  %18 = insertelement <4 x float> %16, float %17, i32 0
  %19 = extractelement <3 x float> %15, i32 1
  %20 = insertelement <4 x float> %18, float %19, i32 1
  %21 = extractelement <3 x float> %15, i32 2
  %color2 = insertelement <4 x float> %20, float %21, i32 2
  store <4 x float> %color2, <4 x float>* @color
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc i32 @"foo_GS("() #0 {
entry:
  %p = alloca i32
  %l = alloca i32
  %l1 = load i32* @gl_Layer
  store i32 %l1, i32* %l
  %p2 = load i32* @gl_PrimitiveID
  store i32 %p2, i32* %p
  %0 = load i32* %l
  %1 = load i32* %p
  %2 = add i32 %0, %1, !gla.precision !34
  ret i32 %2

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc void @"goodSample("() #0 {
entry:
  %n2 = alloca i32
  %n1 = alloca i32
  %a3 = alloca i32
  %a2 = alloca <2 x float>
  %a1 = alloca i32
  %a11 = load i32* @gl_SampleID
  store i32 %a11, i32* %a1
  %a22 = load <2 x float>* @gl_SamplePosition
  store <2 x float> %a22, <2 x float>* %a2
  %a33 = load i32* getelementptr inbounds ([1 x i32]* @gl_SampleMaskIn, i32 0, i32 0)
  store i32 %a33, i32* %a3
  %0 = load i32* %a3
  store i32 %0, i32* getelementptr inbounds ([1 x i32]* @gl_SampleMask, i32 0, i32 0)
  store i32 4, i32* %n1
  %n24 = load i32 addrspace(2)* @gl_NumSamples, !gla.uniform !30
  store i32 %n24, i32* %n2
  %1 = load i32* %n1
  %2 = load i32* %n2
  %3 = add i32 %1, %2, !gla.precision !35
  %4 = load i32* %a1
  %5 = add i32 %3, %4, !gla.precision !35
  %6 = load i32* getelementptr inbounds ([1 x i32]* @gl_SampleMask, i32 0, i32 0)
  %7 = add i32 %6, %5, !gla.precision !34
  store i32 %7, i32* getelementptr inbounds ([1 x i32]* @gl_SampleMask, i32 0, i32 0)
  %8 = load <2 x float>* %a2
  %9 = load <4 x float>* @color
  %10 = extractelement <4 x float> %9, i32 0, !gla.precision !34
  %11 = insertelement <2 x float> undef, float %10, i32 0, !gla.precision !34
  %12 = extractelement <4 x float> %9, i32 1, !gla.precision !34
  %13 = insertelement <2 x float> %11, float %12, i32 1, !gla.precision !34
  %14 = fadd <2 x float> %13, %8, !gla.precision !34
  %15 = load <4 x float>* @color
  %16 = extractelement <2 x float> %14, i32 0
  %17 = insertelement <4 x float> %15, float %16, i32 0
  %18 = extractelement <2 x float> %14, i32 1
  %color = insertelement <4 x float> %17, float %18, i32 1
  store <4 x float> %color, <4 x float>* @color
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc <3 x float> @"interp("() #0 {
entry:
  %res3 = alloca <3 x float>
  %res = alloca float
  %0 = load float* @scalarIn
  %res1 = call float @llvm.gla.interpolateAtCentroid.f32.f32(float %0), !gla.precision !34
  store float %res1, float* %res
  %1 = load <3 x float>* @sampInArray
  %res32 = call <3 x float> @llvm.gla.interpolateAtCentroid.v3f32.v3f32(<3 x float> %1), !gla.precision !34
  store <3 x float> %res32, <3 x float>* %res3
  %2 = load <3 x float>* @sampInArray
  %res33 = call <3 x float> @llvm.gla.interpolateAtSample.v3f32.v3f32(<3 x float> %2, i32 0), !gla.precision !34
  %3 = load <3 x float>* %res3
  %res34 = fadd <3 x float> %3, %res33, !gla.precision !34
  store <3 x float> %res34, <3 x float>* %res3
  %4 = load float* @scalarIn
  %res5 = call float @llvm.gla.interpolateAtSample.f32.f32(float %4, i32 1), !gla.precision !34
  %5 = load float* %res
  %res6 = fadd float %5, %res5, !gla.precision !34
  store float %res6, float* %res
  %6 = load <3 x float>* @sampInArray
  %res37 = call <3 x float> @llvm.gla.interpolateAtOffset.v3f32.v3f32(<3 x float> %6, <2 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000>), !gla.precision !34
  %7 = load <3 x float>* %res3
  %res38 = fadd <3 x float> %7, %res37, !gla.precision !34
  store <3 x float> %res38, <3 x float>* %res3
  %8 = load float* @scalarIn
  %res9 = call float @llvm.gla.interpolateAtOffset.f32.f32(float %8, <2 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000>), !gla.precision !34
  %9 = load float* %res
  %res10 = fadd float %9, %res9, !gla.precision !34
  store float %res10, float* %res
  %10 = load float* %res
  %11 = load <3 x float>* %res3
  %12 = insertelement <3 x float> undef, float %10, i32 0, !gla.precision !34
  %13 = insertelement <3 x float> %12, float %10, i32 1, !gla.precision !34
  %14 = insertelement <3 x float> %13, float %10, i32 2, !gla.precision !34
  %15 = fmul <3 x float> %14, %11, !gla.precision !34
  ret <3 x float> %15

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.interpolateAtCentroid.f32.f32(float) #1

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.interpolateAtCentroid.v3f32.v3f32(<3 x float>) #1

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.interpolateAtSample.v3f32.v3f32(<3 x float>, i32) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.interpolateAtSample.f32.f32(float, i32) #1

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.interpolateAtOffset.v3f32.v3f32(<3 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.interpolateAtOffset.f32.f32(float, <2 x float>) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.blendEquations = !{!0}
!gla.entrypoint = !{!1}
!gla.outputs = !{!2, !4}
!gla.inputs = !{!6, !12, !14, !16, !18, !20, !22, !24, !26, !28}
!gla.uniforms = !{!30, !32}
!gla.noStaticUse = !{!26, !28, !32}

!0 = !{i32 32776}
!1 = !{!"main", i32 15}
!2 = !{!"color", i32 7, <4 x float>* @color_typeProxy, !3}
!3 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!4 = !{!"gl_SampleMask", i32 7, [1 x i32]* @gl_SampleMask_typeProxy, !5}
!5 = !{i32 0, i32 3, i32 1031, null, i32 0, i32 48, i32 -1, i32 0, i32 -1}
!6 = !{!"inInst", i32 17, %inName* @inInst_typeProxy, !7, !8}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!8 = !{!"inName", !9, !"color", !10}
!9 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!10 = !{!"", !11}
!11 = !{i32 0, i32 3, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{!"gl_Layer", i32 1, i32* @gl_Layer_typeProxy, !13}
!13 = !{i32 0, i32 3, i32 1026, null, i32 0, i32 32, i32 -1, i32 0, i32 -1}
!14 = !{!"gl_PrimitiveID", i32 1, i32* @gl_PrimitiveID_typeProxy, !15}
!15 = !{i32 0, i32 3, i32 1027, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!16 = !{!"gl_SampleID", i32 1, i32* @gl_SampleID_typeProxy, !17}
!17 = !{i32 0, i32 1, i32 1028, null, i32 0, i32 46, i32 -1, i32 0, i32 -1}
!18 = !{!"gl_SamplePosition", i32 1, <2 x float>* @gl_SamplePosition_typeProxy, !19}
!19 = !{i32 0, i32 2, i32 1029, null, i32 1, i32 47, i32 -1, i32 0, i32 -1}
!20 = !{!"gl_SampleMaskIn", i32 1, [1 x i32]* @gl_SampleMaskIn_typeProxy, !21}
!21 = !{i32 0, i32 3, i32 1030, null, i32 0, i32 48, i32 -1, i32 0, i32 -1}
!22 = !{!"scalarIn", i32 1, float* @scalarIn_typeProxy, !23}
!23 = !{i32 0, i32 3, i32 1032, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!24 = !{!"sampInArray", i32 1, <3 x float>* @sampInArray_typeProxy, !25}
!25 = !{i32 0, i32 3, i32 1033, null, i32 257, i32 0, i32 -1, i32 0, i32 -1}
!26 = !{!"colorSampIn", i32 1, <4 x float>* @colorSampIn_typeProxy, !27}
!27 = !{i32 0, i32 3, i32 1034, null, i32 257, i32 0, i32 -1, i32 0, i32 -1}
!28 = !{!"colorfsi", i32 1, <4 x float>* @colorfsi_typeProxy, !29}
!29 = !{i32 0, i32 3, i32 1035, null, i32 256, i32 0, i32 -1, i32 0, i32 -1}
!30 = !{!"gl_NumSamples", i32 12, i32* @gl_NumSamples_typeProxy, !31}
!31 = !{i32 0, i32 1, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!32 = !{!"i", i32 12, i32* @i_typeProxy, !33}
!33 = !{i32 0, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!34 = !{i32 3}
!35 = !{i32 2}
