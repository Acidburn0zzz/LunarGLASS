
Top IR:
; ModuleID = 'Glslang'

@texSampler2D = external addrspace(1) constant i32
@t = global <2 x float> zeroinitializer
@scale = external addrspace(2) constant <2 x float>
@texSampler3D = external addrspace(1) constant i32
@coords = global <3 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %w = alloca <4 x float>
  %v = alloca <4 x float>
  %blendscale = alloca float
  br label %mainBody

mainBody:                                         ; preds = %entry
  store float 0x3FFC9FBE80000000, float* %blendscale
  %0 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !1
  %1 = load <2 x float>* @t
  %2 = load <2 x float> addrspace(2)* @scale, !gla.uniform !4
  %3 = fadd <2 x float> %1, %2
  %4 = load <2 x float> addrspace(2)* @scale, !gla.uniform !4
  %5 = fdiv <2 x float> %3, %4
  %v1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %5)
  %6 = extractelement <4 x float> %v1, i32 3
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %8 = extractelement <4 x float> %v1, i32 2
  %9 = insertelement <4 x float> %7, float %8, i32 1
  %10 = extractelement <4 x float> %v1, i32 1
  %11 = insertelement <4 x float> %9, float %10, i32 2
  %12 = extractelement <4 x float> %v1, i32 0
  %v2 = insertelement <4 x float> %11, float %12, i32 3
  store <4 x float> %v2, <4 x float>* %v
  %13 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !6
  %14 = load <3 x float>* @coords
  %w3 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %13, i32 0, <3 x float> %14)
  %15 = load <4 x float>* %v
  %w4 = fadd <4 x float> %w3, %15
  store <4 x float> %w4, <4 x float>* %w
  %16 = load <4 x float>* %w
  %17 = load <4 x float> addrspace(2)* @u, !gla.uniform !9
  %18 = load float addrspace(2)* @blend, !gla.uniform !10
  %19 = load float* %blendscale
  %20 = fmul float %18, %19
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %16, <4 x float> %17, float %20)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !6, !9, !10}
!gla.inputs = !{!11, !13}
!gla.outputs = !{!15}

!0 = !{!"main", i32 15}
!1 = !{!"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, !2, !""}
!2 = !{i32 5, i32 0, i32 1024, !3, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = !{!"scale", i32 12, <2 x float>* @scale_typeProxy, !5, !""}
!5 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{!"texSampler3D", i32 12, i32* @texSampler3D_typeProxy, !7, !""}
!7 = !{i32 5, i32 0, i32 1024, !8, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!8 = !{i32 0, i32* @texSampler3D_typeProxy, i32 2, i1 false, i1 false, i32 0}
!9 = !{!"u", i32 12, <4 x float>* @u_typeProxy, !5, !""}
!10 = !{!"blend", i32 12, float* @blend_typeProxy, !5, !""}
!11 = !{!"t", i32 1, <2 x float>* @t_typeProxy, !12, !""}
!12 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!13 = !{!"coords", i32 1, <3 x float>* @coords_typeProxy, !14, !""}
!14 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !16, !""}
!16 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@uv = global <2 x float> zeroinitializer
@uv_in = global <2 x float> zeroinitializer
@gl_Position = global <4 x float> zeroinitializer
@position = global <4 x float> zeroinitializer
@gl_Vertex_sim = internal global <4 x float> zeroinitializer
@gl_ModelViewProjectionMatrix_sim = internal global <4 x float> zeroinitializer
@transform = external addrspace(2) constant [4 x <4 x float>]
@gl_VertexID = global i32 0

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %uv = load <2 x float>* @uv_in
  store <2 x float> %uv, <2 x float>* @uv
  %0 = load <4 x float>* @position
  %1 = load <4 x float>* @gl_ModelViewProjectionMatrix_sim
  %2 = load <4 x float>* @gl_Vertex_sim
  %3 = call <4 x float> @llvm.gla.fFixedTransform.v4f32.v4f32.v4f32(<4 x float> %2, <4 x float> %1)
  %gl_Position = fadd <4 x float> %0, %3
  store <4 x float> %gl_Position, <4 x float>* @gl_Position
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fFixedTransform.v4f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1, !3}
!gla.inputs = !{!5, !7, !9}
!gla.uniforms = !{!11}
!gla.noStaticUse = !{!11, !9}

!0 = !{!"main", i32 15}
!1 = !{!"uv", i32 7, <2 x float>* @uv_typeProxy, !2, !""}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !4, !""}
!4 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!5 = !{!"uv_in", i32 1, <2 x float>* @uv_in_typeProxy, !6, !""}
!6 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"position", i32 1, <4 x float>* @position_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"gl_VertexID", i32 2, i32* @gl_VertexID_typeProxy, !10, !""}
!10 = !{i32 0, i32 0, i32 1028, null, i32 0, i32 7, i32 -1, i32 0, i32 -1}
!11 = !{!"transform", i32 12, [4 x <4 x float>]* @transform_typeProxy, !12, !""}
!12 = !{i32 3, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

%str = type { i32, [3 x <2 x float>], i1 }

@v1 = internal global <4 x float> zeroinitializer
@v2 = internal global <4 x float> zeroinitializer
@v3 = internal global <4 x float> zeroinitializer
@v4 = internal global <4 x float> zeroinitializer
@sampler = external addrspace(1) constant i32
@t = internal constant %str { i32 1, [3 x <2 x float>] [<2 x float> <float 2.000000e+00, float 3.000000e+00>, <2 x float> <float 4.000000e+00, float 5.000000e+00>, <2 x float> <float 6.000000e+00, float 7.000000e+00>], i1 true }
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %gl_FragColor = alloca <4 x float>
  %indexable72 = alloca %str
  %t = alloca %str
  %i67 = alloca <4 x float>
  %i = alloca float
  %h = alloca float
  %indexable = alloca [4 x <4 x float>]
  %0 = alloca [4 x <4 x float>]
  %g = alloca float
  %f = alloca float
  %1 = alloca [4 x <4 x float>]
  %mm = alloca [4 x <4 x float>]
  %m1 = alloca [4 x <4 x float>]
  %m = alloca [4 x <4 x float>]
  store <4 x float> <float 2.000000e+00, float 3.000000e+00, float 5.000000e+00, float 7.000000e+00>, <4 x float>* @v1
  store <4 x float> <float 1.100000e+01, float 1.300000e+01, float 1.700000e+01, float 1.900000e+01>, <4 x float>* @v2
  store <4 x float> <float 2.300000e+01, float 2.900000e+01, float 3.100000e+01, float 3.700000e+01>, <4 x float>* @v3
  store <4 x float> <float 4.100000e+01, float 4.300000e+01, float 4.700000e+01, float 5.300000e+01>, <4 x float>* @v4
  br label %mainBody

mainBody:                                         ; preds = %entry
  %2 = load <4 x float>* @v1
  %3 = load <4 x float>* @v2
  %4 = load <4 x float>* @v3
  %5 = load <4 x float>* @v4
  %6 = load [4 x <4 x float>]* %m1
  %element = extractelement <4 x float> %2, i32 0
  %element2 = extractelement <4 x float> %2, i32 1
  %element3 = extractelement <4 x float> %2, i32 2
  %element4 = extractelement <4 x float> %2, i32 3
  %element5 = extractelement <4 x float> %3, i32 0
  %element6 = extractelement <4 x float> %3, i32 1
  %element7 = extractelement <4 x float> %3, i32 2
  %element8 = extractelement <4 x float> %3, i32 3
  %element9 = extractelement <4 x float> %4, i32 0
  %element10 = extractelement <4 x float> %4, i32 1
  %element11 = extractelement <4 x float> %4, i32 2
  %element12 = extractelement <4 x float> %4, i32 3
  %element13 = extractelement <4 x float> %5, i32 0
  %element14 = extractelement <4 x float> %5, i32 1
  %element15 = extractelement <4 x float> %5, i32 2
  %element16 = extractelement <4 x float> %5, i32 3
  %column = extractvalue [4 x <4 x float>] %6, 0
  %column17 = insertelement <4 x float> %column, float %element, i32 0
  %column18 = insertelement <4 x float> %column17, float %element2, i32 1
  %column19 = insertelement <4 x float> %column18, float %element3, i32 2
  %column20 = insertelement <4 x float> %column19, float %element4, i32 3
  %matrix = insertvalue [4 x <4 x float>] %6, <4 x float> %column20, 0
  %column21 = extractvalue [4 x <4 x float>] %6, 1
  %column22 = insertelement <4 x float> %column21, float %element5, i32 0
  %column23 = insertelement <4 x float> %column22, float %element6, i32 1
  %column24 = insertelement <4 x float> %column23, float %element7, i32 2
  %column25 = insertelement <4 x float> %column24, float %element8, i32 3
  %matrix26 = insertvalue [4 x <4 x float>] %matrix, <4 x float> %column25, 1
  %column27 = extractvalue [4 x <4 x float>] %6, 2
  %column28 = insertelement <4 x float> %column27, float %element9, i32 0
  %column29 = insertelement <4 x float> %column28, float %element10, i32 1
  %column30 = insertelement <4 x float> %column29, float %element11, i32 2
  %column31 = insertelement <4 x float> %column30, float %element12, i32 3
  %matrix32 = insertvalue [4 x <4 x float>] %matrix26, <4 x float> %column31, 2
  %column33 = extractvalue [4 x <4 x float>] %6, 3
  %column34 = insertelement <4 x float> %column33, float %element13, i32 0
  %column35 = insertelement <4 x float> %column34, float %element14, i32 1
  %column36 = insertelement <4 x float> %column35, float %element15, i32 2
  %column37 = insertelement <4 x float> %column36, float %element16, i32 3
  %matrix38 = insertvalue [4 x <4 x float>] %matrix32, <4 x float> %column37, 3
  store [4 x <4 x float>] %matrix38, [4 x <4 x float>]* %m
  %7 = load [4 x <4 x float>]* %m
  %8 = load [4 x <4 x float>]* %m
  %9 = load [4 x <4 x float>]* %1
  %leftColumn = extractvalue [4 x <4 x float>] %7, 0
  %rightColumn = extractvalue [4 x <4 x float>] %8, 0
  %column39 = fmul <4 x float> %leftColumn, %rightColumn
  %10 = insertvalue [4 x <4 x float>] %9, <4 x float> %column39, 0
  %leftColumn40 = extractvalue [4 x <4 x float>] %7, 1
  %rightColumn41 = extractvalue [4 x <4 x float>] %8, 1
  %column42 = fmul <4 x float> %leftColumn40, %rightColumn41
  %11 = insertvalue [4 x <4 x float>] %10, <4 x float> %column42, 1
  %leftColumn43 = extractvalue [4 x <4 x float>] %7, 2
  %rightColumn44 = extractvalue [4 x <4 x float>] %8, 2
  %column45 = fmul <4 x float> %leftColumn43, %rightColumn44
  %12 = insertvalue [4 x <4 x float>] %11, <4 x float> %column45, 2
  %leftColumn46 = extractvalue [4 x <4 x float>] %7, 3
  %rightColumn47 = extractvalue [4 x <4 x float>] %8, 3
  %column48 = fmul <4 x float> %leftColumn46, %rightColumn47
  %mm49 = insertvalue [4 x <4 x float>] %12, <4 x float> %column48, 3
  store [4 x <4 x float>] %mm49, [4 x <4 x float>]* %mm
  %13 = getelementptr [4 x <4 x float>]* %mm, i32 0, i32 1
  %14 = load <4 x float>* %13
  %f50 = extractelement <4 x float> %14, i32 3
  store float %f50, float* %f
  %15 = load [4 x <4 x float>]* %m
  %16 = load [4 x <4 x float>]* %m
  %17 = load [4 x <4 x float>]* %0
  %leftColumn51 = extractvalue [4 x <4 x float>] %15, 0
  %rightColumn52 = extractvalue [4 x <4 x float>] %16, 0
  %column53 = fmul <4 x float> %leftColumn51, %rightColumn52
  %18 = insertvalue [4 x <4 x float>] %17, <4 x float> %column53, 0
  %leftColumn54 = extractvalue [4 x <4 x float>] %15, 1
  %rightColumn55 = extractvalue [4 x <4 x float>] %16, 1
  %column56 = fmul <4 x float> %leftColumn54, %rightColumn55
  %19 = insertvalue [4 x <4 x float>] %18, <4 x float> %column56, 1
  %leftColumn57 = extractvalue [4 x <4 x float>] %15, 2
  %rightColumn58 = extractvalue [4 x <4 x float>] %16, 2
  %column59 = fmul <4 x float> %leftColumn57, %rightColumn58
  %20 = insertvalue [4 x <4 x float>] %19, <4 x float> %column59, 2
  %leftColumn60 = extractvalue [4 x <4 x float>] %15, 3
  %rightColumn61 = extractvalue [4 x <4 x float>] %16, 3
  %column62 = fmul <4 x float> %leftColumn60, %rightColumn61
  %indexable63 = insertvalue [4 x <4 x float>] %20, <4 x float> %column62, 3
  store [4 x <4 x float>] %indexable63, [4 x <4 x float>]* %indexable
  %21 = getelementptr [4 x <4 x float>]* %indexable, i32 0, i32 2
  %22 = load <4 x float>* %21
  %g64 = extractelement <4 x float> %22, i32 1
  store float %g64, float* %g
  store float 5.000000e+00, float* %h
  %23 = load i32 addrspace(1)* @sampler, !gla.uniform !1
  %i65 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %23, i32 0, <2 x float> <float 5.000000e-01, float 5.000000e-01>)
  %i66 = extractelement <4 x float> %i65, i32 1
  store float %i66, float* %i
  %24 = load float* %i
  %25 = fcmp ogt float %24, 0x3FB99999A0000000
  br i1 %25, label %then, label %else

then:                                             ; preds = %mainBody
  %i6768 = load <4 x float>* @v1
  store <4 x float> %i6768, <4 x float>* %i67
  br label %ifmerge

else:                                             ; preds = %mainBody
  %i6769 = load <4 x float>* @v2
  store <4 x float> %i6769, <4 x float>* %i67
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %26 = load <4 x float>* %i67
  %27 = extractelement <4 x float> %26, i32 3
  %28 = load float* %i
  %i70 = fadd float %28, %27
  store float %i70, float* %i
  %indexable7273 = load %str* @t
  store %str %indexable7273, %str* %t
  store %str %indexable7273, %str* %indexable72
  %29 = getelementptr %str* %indexable72, i32 0, i32 1, i32 2
  %30 = load <2 x float>* %29
  %31 = extractelement <2 x float> %30, i32 1
  %32 = load float* %i
  %i74 = fadd float %32, %31
  store float %i74, float* %i
  %33 = load float* %f
  %34 = load float* %g
  %35 = load float* %h
  %36 = load float* %i
  %37 = load <4 x float>* %gl_FragColor
  %38 = insertelement <4 x float> %37, float %33, i32 0
  %39 = insertelement <4 x float> %38, float %34, i32 1
  %40 = insertelement <4 x float> %39, float %35, i32 2
  %gl_FragColor75 = insertelement <4 x float> %40, float %36, i32 3
  store <4 x float> %gl_FragColor75, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1}
!gla.outputs = !{!4}

!0 = !{!"main", i32 15}
!1 = !{!"sampler", i32 12, i32* @sampler_typeProxy, !2, !""}
!2 = !{i32 5, i32 0, i32 1024, !3, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{i32 0, i32* @sampler_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !5, !""}
!5 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

%S = type { <4 x float>, <4 x i32>, i32, <3 x float>, [5 x [3 x <3 x float>]] }
%fooBlock = type { <4 x float>, <2 x float>, <4 x i32>, [2 x <2 x float>], [8 x [4 x <4 x float>]] }
%barBlock = type { <4 x float>, [3 x <3 x float>], <4 x i32>, i32 }

@color = global <4 x float> zeroinitializer
@s = external addrspace(2) constant %S
@"anon@0" = external addrspace(2) constant %fooBlock
@inst = external addrspace(2) constant [4 x %barBlock]

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load i32 addrspace(2)* getelementptr inbounds (%S addrspace(2)* @s, i32 0, i32 2), !gla.uniform !3
  %1 = load <2 x float> addrspace(2)* getelementptr inbounds (%fooBlock addrspace(2)* @"anon@0", i32 0, i32 1), !gla.uniform !14
  %color = call <4 x i32> @llvm.gla.textureSample.v4i32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %1), !gla.precision !29
  %2 = sitofp <4 x i32> %color to <4 x float>, !gla.precision !30
  %3 = load <4 x float> addrspace(2)* getelementptr inbounds ([4 x %barBlock] addrspace(2)* @inst, i32 0, i32 3, i32 0), !gla.uniform !24
  %4 = fadd <4 x float> %2, %3, !gla.precision !30
  %5 = load <4 x float> addrspace(2)* getelementptr inbounds (%fooBlock addrspace(2)* @"anon@0", i32 0, i32 0), !gla.uniform !14
  %color1 = fadd <4 x float> %4, %5, !gla.precision !30
  store <4 x float> %color1, <4 x float>* @color
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v2f32(i32, i32, i32, <2 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.uniforms = !{!3, !14, !24}

!0 = !{!"main", i32 15}
!1 = !{!"color", i32 7, <4 x float>* @color_typeProxy, !2, !""}
!2 = !{i32 0, i32 2, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"s", i32 12, %S* @s_typeProxy, !4, !"S", !5, !6, !8, !11, !12}
!4 = !{i32 4, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"u", i32 0, <4 x float>* @u_typeProxy, !2, !""}
!6 = !{!"v", i32 0, <4 x i32>* @v_typeProxy, !7, !""}
!7 = !{i32 1, i32 2, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!8 = !{!"samp2D", i32 0, i32* @samp2D_typeProxy, !9, !""}
!9 = !{i32 5, i32 1, i32 1024, !10, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!10 = !{i32 0, i32* @samp2D_typeProxy, i32 1, i1 false, i1 false, i32 1}
!11 = !{!"w", i32 0, <3 x float>* @w_typeProxy, !2, !""}
!12 = !{!"m3a", i32 0, [5 x [3 x <3 x float>]]* @m3a_typeProxy, !13, !""}
!13 = !{i32 3, i32 2, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!14 = !{!"", i32 13, %fooBlock* @"anon@0_typeProxy", !15, !"fooBlock", !16, !18, !19, !21, !23}
!15 = !{i32 6, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!16 = !{!"bu", i32 12, <4 x float>* @bu_typeProxy, !17, !""}
!17 = !{i32 0, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!18 = !{!"bw", i32 12, <2 x float>* @bw_typeProxy, !17, !""}
!19 = !{!"bv", i32 12, <4 x i32>* @bv_typeProxy, !20, !""}
!20 = !{i32 1, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!21 = !{!"bm2", i32 12, [2 x <2 x float>]* @bm2_typeProxy, !22, !""}
!22 = !{i32 3, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!23 = !{!"m4a", i32 12, [8 x [4 x <4 x float>]]* @m4a_typeProxy, !22, !""}
!24 = !{!"inst", i32 13, [4 x %barBlock]* @inst_typeProxy, !15, !"barBlock", !25, !26, !27, !28}
!25 = !{!"nbu", i32 12, <4 x float>* @nbu_typeProxy, !17, !""}
!26 = !{!"nbm", i32 12, [3 x <3 x float>]* @nbm_typeProxy, !22, !""}
!27 = !{!"nbv", i32 12, <4 x i32>* @nbv_typeProxy, !20, !""}
!28 = !{!"ni", i32 12, i32* @ni_typeProxy, !17, !""}
!29 = !{i32 1}
!30 = !{i32 2}

Top IR:
; ModuleID = 'Glslang'

@v = global [2 x <2 x float>] zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@u = external addrspace(2) constant [3 x <4 x float>]

define fastcc void @main() {
entry:
  %t = alloca <2 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load <2 x float>* getelementptr inbounds ([2 x <2 x float>]* @v, i32 0, i32 0)
  %1 = load <2 x float>* getelementptr inbounds ([2 x <2 x float>]* @v, i32 0, i32 1)
  %t1 = fadd <2 x float> %0, %1
  store <2 x float> %t1, <2 x float>* %t
  store <4 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.outputs = !{!3}
!gla.uniforms = !{!5}
!gla.noStaticUse = !{!5}

!0 = !{!"main", i32 15}
!1 = !{!"v", i32 1, [2 x <2 x float>]* @v_typeProxy, !2, !""}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !4, !""}
!4 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
!5 = !{!"u", i32 12, [3 x <4 x float>]* @u_typeProxy, !6, !""}
!6 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@v = global <4 x float> zeroinitializer
@u = global <3 x float> zeroinitializer
@m34 = internal constant [3 x <4 x float>] [<4 x float> <float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00, float 0.000000e+00>, <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0x4011333340000000, float 0.000000e+00>]
@FragColor = global <4 x float> zeroinitializer
@Color = global <3 x float> zeroinitializer
@un34 = external addrspace(2) constant [3 x <4 x float>]
@um43 = external addrspace(2) constant [4 x <3 x float>]
@um4 = external addrspace(2) constant [4 x <4 x float>]
@um2 = external addrspace(2) constant [2 x <2 x float>]
@um3 = external addrspace(2) constant [3 x <3 x float>]
@colorTransform = external addrspace(2) constant [3 x <3 x float>]
@m = external addrspace(2) constant [4 x <4 x float>]
@n = external addrspace(2) constant [4 x <4 x float>]

define fastcc void @main() {
entry:
  %FragColor652 = alloca <4 x float>
  %0 = alloca <3 x float>
  %1 = alloca [3 x <4 x float>]
  %2 = alloca <4 x float>
  %3 = alloca [4 x <4 x float>]
  %inv4 = alloca [4 x <4 x float>]
  %FragColor581 = alloca <4 x float>
  %4 = alloca [3 x <3 x float>]
  %inv3 = alloca [3 x <3 x float>]
  %FragColor551 = alloca <4 x float>
  %5 = alloca [2 x <2 x float>]
  %inv = alloca [2 x <2 x float>]
  %FragColor535 = alloca <4 x float>
  %FragColor513 = alloca <4 x float>
  %6 = alloca <3 x float>
  %7 = alloca [3 x <4 x float>]
  %8 = alloca <4 x float>
  %9 = alloca [4 x <4 x float>]
  %10 = alloca <4 x float>
  %11 = alloca [4 x <4 x float>]
  %12 = alloca [4 x <4 x float>]
  %13 = alloca <4 x float>
  %14 = alloca [4 x <4 x float>]
  %m4469 = alloca [4 x <4 x float>]
  %m44 = alloca [4 x <4 x float>]
  %15 = alloca [3 x <4 x float>]
  %FragColor52 = alloca <4 x float>
  %16 = alloca <3 x float>
  %FragColor = alloca <4 x float>
  %17 = alloca [3 x <4 x float>]
  %18 = alloca <4 x float>
  %19 = alloca [3 x <4 x float>]
  %m34 = alloca [3 x <4 x float>]
  br label %mainBody

mainBody:                                         ; preds = %entry
  %20 = load <4 x float>* @v
  %21 = load <3 x float>* @u
  %22 = load [3 x <4 x float>]* %19
  %23 = load <4 x float>* %18
  %rightComp = extractelement <3 x float> %21, i32 0
  %leftComp = extractelement <4 x float> %20, i32 0
  %element = fmul float %leftComp, %rightComp
  %column = insertelement <4 x float> %23, float %element, i32 0
  %leftComp1 = extractelement <4 x float> %20, i32 1
  %element2 = fmul float %leftComp1, %rightComp
  %column3 = insertelement <4 x float> %column, float %element2, i32 1
  %leftComp4 = extractelement <4 x float> %20, i32 2
  %element5 = fmul float %leftComp4, %rightComp
  %column6 = insertelement <4 x float> %column3, float %element5, i32 2
  %leftComp7 = extractelement <4 x float> %20, i32 3
  %element8 = fmul float %leftComp7, %rightComp
  %column9 = insertelement <4 x float> %column6, float %element8, i32 3
  %matrix = insertvalue [3 x <4 x float>] %22, <4 x float> %column9, 0
  %rightComp10 = extractelement <3 x float> %21, i32 1
  %leftComp11 = extractelement <4 x float> %20, i32 0
  %element12 = fmul float %leftComp11, %rightComp10
  %column13 = insertelement <4 x float> %column9, float %element12, i32 0
  %leftComp14 = extractelement <4 x float> %20, i32 1
  %element15 = fmul float %leftComp14, %rightComp10
  %column16 = insertelement <4 x float> %column13, float %element15, i32 1
  %leftComp17 = extractelement <4 x float> %20, i32 2
  %element18 = fmul float %leftComp17, %rightComp10
  %column19 = insertelement <4 x float> %column16, float %element18, i32 2
  %leftComp20 = extractelement <4 x float> %20, i32 3
  %element21 = fmul float %leftComp20, %rightComp10
  %column22 = insertelement <4 x float> %column19, float %element21, i32 3
  %matrix23 = insertvalue [3 x <4 x float>] %matrix, <4 x float> %column22, 1
  %rightComp24 = extractelement <3 x float> %21, i32 2
  %leftComp25 = extractelement <4 x float> %20, i32 0
  %element26 = fmul float %leftComp25, %rightComp24
  %column27 = insertelement <4 x float> %column22, float %element26, i32 0
  %leftComp28 = extractelement <4 x float> %20, i32 1
  %element29 = fmul float %leftComp28, %rightComp24
  %column30 = insertelement <4 x float> %column27, float %element29, i32 1
  %leftComp31 = extractelement <4 x float> %20, i32 2
  %element32 = fmul float %leftComp31, %rightComp24
  %column33 = insertelement <4 x float> %column30, float %element32, i32 2
  %leftComp34 = extractelement <4 x float> %20, i32 3
  %element35 = fmul float %leftComp34, %rightComp24
  %column36 = insertelement <4 x float> %column33, float %element35, i32 3
  %matrix37 = insertvalue [3 x <4 x float>] %matrix23, <4 x float> %column36, 2
  store [3 x <4 x float>] %matrix37, [3 x <4 x float>]* %m34
  %24 = load [3 x <4 x float>]* @m34
  %25 = load [3 x <4 x float>]* %m34
  %26 = load [3 x <4 x float>]* %17
  %leftColumn = extractvalue [3 x <4 x float>] %25, 0
  %rightColumn = extractvalue [3 x <4 x float>] %24, 0
  %column38 = fadd <4 x float> %leftColumn, %rightColumn
  %27 = insertvalue [3 x <4 x float>] %26, <4 x float> %column38, 0
  %leftColumn39 = extractvalue [3 x <4 x float>] %25, 1
  %rightColumn40 = extractvalue [3 x <4 x float>] %24, 1
  %column41 = fadd <4 x float> %leftColumn39, %rightColumn40
  %28 = insertvalue [3 x <4 x float>] %27, <4 x float> %column41, 1
  %leftColumn42 = extractvalue [3 x <4 x float>] %25, 2
  %rightColumn43 = extractvalue [3 x <4 x float>] %24, 2
  %column44 = fadd <4 x float> %leftColumn42, %rightColumn43
  %m3445 = insertvalue [3 x <4 x float>] %28, <4 x float> %column44, 2
  store [3 x <4 x float>] %m3445, [3 x <4 x float>]* %m34
  %29 = load <3 x float>* @Color
  %30 = load <4 x float>* %FragColor
  %31 = extractelement <3 x float> %29, i32 0
  %32 = insertelement <4 x float> %30, float %31, i32 0
  %33 = extractelement <3 x float> %29, i32 1
  %34 = insertelement <4 x float> %32, float %33, i32 1
  %35 = extractelement <3 x float> %29, i32 2
  %36 = insertelement <4 x float> %34, float %35, i32 2
  %FragColor46 = insertelement <4 x float> %36, float 1.000000e+00, i32 3
  store <4 x float> %FragColor46, <4 x float>* @FragColor
  %37 = load <4 x float>* @FragColor
  %38 = load [3 x <4 x float>]* %m34
  %39 = load <3 x float>* %16
  %column47 = extractvalue [3 x <4 x float>] %38, 0
  %dotres = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %37, <4 x float> %column47)
  %40 = insertelement <3 x float> %39, float %dotres, i32 0
  %column48 = extractvalue [3 x <4 x float>] %38, 1
  %dotres49 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %37, <4 x float> %column48)
  %41 = insertelement <3 x float> %40, float %dotres49, i32 1
  %column50 = extractvalue [3 x <4 x float>] %38, 2
  %dotres51 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %37, <4 x float> %column50)
  %42 = insertelement <3 x float> %41, float %dotres51, i32 2
  %43 = load <4 x float>* %FragColor52
  %44 = extractelement <3 x float> %42, i32 0
  %45 = insertelement <4 x float> %43, float %44, i32 0
  %46 = extractelement <3 x float> %42, i32 1
  %47 = insertelement <4 x float> %45, float %46, i32 1
  %48 = extractelement <3 x float> %42, i32 2
  %49 = insertelement <4 x float> %47, float %48, i32 2
  %50 = insertelement <4 x float> %49, float 1.000000e+00, i32 3
  %51 = load <4 x float>* @FragColor
  %FragColor53 = fmul <4 x float> %51, %50
  store <4 x float> %FragColor53, <4 x float>* @FragColor
  %52 = load <4 x float>* @v
  %53 = extractelement <4 x float> %52, i32 0
  %54 = load [3 x <4 x float>]* %m34
  %55 = load [3 x <4 x float>]* %15
  %column54 = extractvalue [3 x <4 x float>] %54, 0
  %row = extractelement <4 x float> %column54, i32 0
  %56 = fmul float %53, %row
  %57 = insertelement <4 x float> %column54, float %56, i32 0
  %row55 = extractelement <4 x float> %57, i32 1
  %58 = fmul float %53, %row55
  %59 = insertelement <4 x float> %57, float %58, i32 1
  %row56 = extractelement <4 x float> %59, i32 2
  %60 = fmul float %53, %row56
  %61 = insertelement <4 x float> %59, float %60, i32 2
  %row57 = extractelement <4 x float> %61, i32 3
  %62 = fmul float %53, %row57
  %63 = insertelement <4 x float> %61, float %62, i32 3
  %64 = insertvalue [3 x <4 x float>] %55, <4 x float> %63, 0
  %column58 = extractvalue [3 x <4 x float>] %54, 1
  %row59 = extractelement <4 x float> %column58, i32 0
  %65 = fmul float %53, %row59
  %66 = insertelement <4 x float> %column58, float %65, i32 0
  %row60 = extractelement <4 x float> %66, i32 1
  %67 = fmul float %53, %row60
  %68 = insertelement <4 x float> %66, float %67, i32 1
  %row61 = extractelement <4 x float> %68, i32 2
  %69 = fmul float %53, %row61
  %70 = insertelement <4 x float> %68, float %69, i32 2
  %row62 = extractelement <4 x float> %70, i32 3
  %71 = fmul float %53, %row62
  %72 = insertelement <4 x float> %70, float %71, i32 3
  %73 = insertvalue [3 x <4 x float>] %64, <4 x float> %72, 1
  %column63 = extractvalue [3 x <4 x float>] %54, 2
  %row64 = extractelement <4 x float> %column63, i32 0
  %74 = fmul float %53, %row64
  %75 = insertelement <4 x float> %column63, float %74, i32 0
  %row65 = extractelement <4 x float> %75, i32 1
  %76 = fmul float %53, %row65
  %77 = insertelement <4 x float> %75, float %76, i32 1
  %row66 = extractelement <4 x float> %77, i32 2
  %78 = fmul float %53, %row66
  %79 = insertelement <4 x float> %77, float %78, i32 2
  %row67 = extractelement <4 x float> %79, i32 3
  %80 = fmul float %53, %row67
  %81 = insertelement <4 x float> %79, float %80, i32 3
  %m3468 = insertvalue [3 x <4 x float>] %73, <4 x float> %81, 2
  store [3 x <4 x float>] %m3468, [3 x <4 x float>]* %m34
  %82 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %83 = load [4 x <4 x float>]* %m4469
  %column70 = extractvalue [3 x <4 x float>] %82, 0
  %element71 = extractelement <4 x float> %column70, i32 0
  %element72 = extractelement <4 x float> %column70, i32 1
  %element73 = extractelement <4 x float> %column70, i32 2
  %element74 = extractelement <4 x float> %column70, i32 3
  %column75 = extractvalue [3 x <4 x float>] %82, 1
  %element76 = extractelement <4 x float> %column75, i32 0
  %element77 = extractelement <4 x float> %column75, i32 1
  %element78 = extractelement <4 x float> %column75, i32 2
  %element79 = extractelement <4 x float> %column75, i32 3
  %column80 = extractvalue [3 x <4 x float>] %82, 2
  %element81 = extractelement <4 x float> %column80, i32 0
  %element82 = extractelement <4 x float> %column80, i32 1
  %element83 = extractelement <4 x float> %column80, i32 2
  %element84 = extractelement <4 x float> %column80, i32 3
  %column85 = extractvalue [4 x <4 x float>] %83, 0
  %column86 = insertelement <4 x float> %column85, float %element71, i32 0
  %column87 = insertelement <4 x float> %column86, float %element72, i32 1
  %column88 = insertelement <4 x float> %column87, float %element73, i32 2
  %column89 = insertelement <4 x float> %column88, float %element74, i32 3
  %matrix90 = insertvalue [4 x <4 x float>] %83, <4 x float> %column89, 0
  %column91 = extractvalue [4 x <4 x float>] %83, 1
  %column92 = insertelement <4 x float> %column91, float %element76, i32 0
  %column93 = insertelement <4 x float> %column92, float %element77, i32 1
  %column94 = insertelement <4 x float> %column93, float %element78, i32 2
  %column95 = insertelement <4 x float> %column94, float %element79, i32 3
  %matrix96 = insertvalue [4 x <4 x float>] %matrix90, <4 x float> %column95, 1
  %column97 = extractvalue [4 x <4 x float>] %83, 2
  %column98 = insertelement <4 x float> %column97, float %element81, i32 0
  %column99 = insertelement <4 x float> %column98, float %element82, i32 1
  %column100 = insertelement <4 x float> %column99, float %element83, i32 2
  %column101 = insertelement <4 x float> %column100, float %element84, i32 3
  %matrix102 = insertvalue [4 x <4 x float>] %matrix96, <4 x float> %column101, 2
  %column103 = extractvalue [4 x <4 x float>] %83, 3
  %column104 = insertelement <4 x float> %column103, float 0.000000e+00, i32 0
  %column105 = insertelement <4 x float> %column104, float 0.000000e+00, i32 1
  %column106 = insertelement <4 x float> %column105, float 0.000000e+00, i32 2
  %column107 = insertelement <4 x float> %column106, float 1.000000e+00, i32 3
  %matrix108 = insertvalue [4 x <4 x float>] %matrix102, <4 x float> %column107, 3
  store [4 x <4 x float>] %matrix108, [4 x <4 x float>]* %m44
  %84 = load [3 x <4 x float>]* %m34
  %85 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %resultMatrix = load [4 x <4 x float>]* %14
  %tempColumn = load <4 x float>* %13
  %rightColumn109 = extractvalue [4 x <3 x float>] %85, 0
  %leftColumn110 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp111 = extractelement <4 x float> %leftColumn110, i32 0
  %rightComp112 = extractelement <3 x float> %rightColumn109, i32 0
  %product = fmul float %leftComp111, %rightComp112
  %leftColumn113 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp114 = extractelement <4 x float> %leftColumn113, i32 0
  %rightComp115 = extractelement <3 x float> %rightColumn109, i32 1
  %product116 = fmul float %leftComp114, %rightComp115
  %dotProduct = fadd float %product, %product116
  %leftColumn117 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp118 = extractelement <4 x float> %leftColumn117, i32 0
  %rightComp119 = extractelement <3 x float> %rightColumn109, i32 2
  %product120 = fmul float %leftComp118, %rightComp119
  %dotProduct121 = fadd float %dotProduct, %product120
  %column122 = insertelement <4 x float> %tempColumn, float %dotProduct121, i32 0
  %leftColumn123 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp124 = extractelement <4 x float> %leftColumn123, i32 1
  %rightComp125 = extractelement <3 x float> %rightColumn109, i32 0
  %product126 = fmul float %leftComp124, %rightComp125
  %leftColumn127 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp128 = extractelement <4 x float> %leftColumn127, i32 1
  %rightComp129 = extractelement <3 x float> %rightColumn109, i32 1
  %product130 = fmul float %leftComp128, %rightComp129
  %dotProduct131 = fadd float %product126, %product130
  %leftColumn132 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp133 = extractelement <4 x float> %leftColumn132, i32 1
  %rightComp134 = extractelement <3 x float> %rightColumn109, i32 2
  %product135 = fmul float %leftComp133, %rightComp134
  %dotProduct136 = fadd float %dotProduct131, %product135
  %column137 = insertelement <4 x float> %column122, float %dotProduct136, i32 1
  %leftColumn138 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp139 = extractelement <4 x float> %leftColumn138, i32 2
  %rightComp140 = extractelement <3 x float> %rightColumn109, i32 0
  %product141 = fmul float %leftComp139, %rightComp140
  %leftColumn142 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp143 = extractelement <4 x float> %leftColumn142, i32 2
  %rightComp144 = extractelement <3 x float> %rightColumn109, i32 1
  %product145 = fmul float %leftComp143, %rightComp144
  %dotProduct146 = fadd float %product141, %product145
  %leftColumn147 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp148 = extractelement <4 x float> %leftColumn147, i32 2
  %rightComp149 = extractelement <3 x float> %rightColumn109, i32 2
  %product150 = fmul float %leftComp148, %rightComp149
  %dotProduct151 = fadd float %dotProduct146, %product150
  %column152 = insertelement <4 x float> %column137, float %dotProduct151, i32 2
  %leftColumn153 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp154 = extractelement <4 x float> %leftColumn153, i32 3
  %rightComp155 = extractelement <3 x float> %rightColumn109, i32 0
  %product156 = fmul float %leftComp154, %rightComp155
  %leftColumn157 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp158 = extractelement <4 x float> %leftColumn157, i32 3
  %rightComp159 = extractelement <3 x float> %rightColumn109, i32 1
  %product160 = fmul float %leftComp158, %rightComp159
  %dotProduct161 = fadd float %product156, %product160
  %leftColumn162 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp163 = extractelement <4 x float> %leftColumn162, i32 3
  %rightComp164 = extractelement <3 x float> %rightColumn109, i32 2
  %product165 = fmul float %leftComp163, %rightComp164
  %dotProduct166 = fadd float %dotProduct161, %product165
  %column167 = insertelement <4 x float> %column152, float %dotProduct166, i32 3
  %resultMatrix168 = insertvalue [4 x <4 x float>] %resultMatrix, <4 x float> %column167, 0
  %rightColumn169 = extractvalue [4 x <3 x float>] %85, 1
  %leftColumn170 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp171 = extractelement <4 x float> %leftColumn170, i32 0
  %rightComp172 = extractelement <3 x float> %rightColumn169, i32 0
  %product173 = fmul float %leftComp171, %rightComp172
  %leftColumn174 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp175 = extractelement <4 x float> %leftColumn174, i32 0
  %rightComp176 = extractelement <3 x float> %rightColumn169, i32 1
  %product177 = fmul float %leftComp175, %rightComp176
  %dotProduct178 = fadd float %product173, %product177
  %leftColumn179 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp180 = extractelement <4 x float> %leftColumn179, i32 0
  %rightComp181 = extractelement <3 x float> %rightColumn169, i32 2
  %product182 = fmul float %leftComp180, %rightComp181
  %dotProduct183 = fadd float %dotProduct178, %product182
  %column184 = insertelement <4 x float> %column167, float %dotProduct183, i32 0
  %leftColumn185 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp186 = extractelement <4 x float> %leftColumn185, i32 1
  %rightComp187 = extractelement <3 x float> %rightColumn169, i32 0
  %product188 = fmul float %leftComp186, %rightComp187
  %leftColumn189 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp190 = extractelement <4 x float> %leftColumn189, i32 1
  %rightComp191 = extractelement <3 x float> %rightColumn169, i32 1
  %product192 = fmul float %leftComp190, %rightComp191
  %dotProduct193 = fadd float %product188, %product192
  %leftColumn194 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp195 = extractelement <4 x float> %leftColumn194, i32 1
  %rightComp196 = extractelement <3 x float> %rightColumn169, i32 2
  %product197 = fmul float %leftComp195, %rightComp196
  %dotProduct198 = fadd float %dotProduct193, %product197
  %column199 = insertelement <4 x float> %column184, float %dotProduct198, i32 1
  %leftColumn200 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp201 = extractelement <4 x float> %leftColumn200, i32 2
  %rightComp202 = extractelement <3 x float> %rightColumn169, i32 0
  %product203 = fmul float %leftComp201, %rightComp202
  %leftColumn204 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp205 = extractelement <4 x float> %leftColumn204, i32 2
  %rightComp206 = extractelement <3 x float> %rightColumn169, i32 1
  %product207 = fmul float %leftComp205, %rightComp206
  %dotProduct208 = fadd float %product203, %product207
  %leftColumn209 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp210 = extractelement <4 x float> %leftColumn209, i32 2
  %rightComp211 = extractelement <3 x float> %rightColumn169, i32 2
  %product212 = fmul float %leftComp210, %rightComp211
  %dotProduct213 = fadd float %dotProduct208, %product212
  %column214 = insertelement <4 x float> %column199, float %dotProduct213, i32 2
  %leftColumn215 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp216 = extractelement <4 x float> %leftColumn215, i32 3
  %rightComp217 = extractelement <3 x float> %rightColumn169, i32 0
  %product218 = fmul float %leftComp216, %rightComp217
  %leftColumn219 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp220 = extractelement <4 x float> %leftColumn219, i32 3
  %rightComp221 = extractelement <3 x float> %rightColumn169, i32 1
  %product222 = fmul float %leftComp220, %rightComp221
  %dotProduct223 = fadd float %product218, %product222
  %leftColumn224 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp225 = extractelement <4 x float> %leftColumn224, i32 3
  %rightComp226 = extractelement <3 x float> %rightColumn169, i32 2
  %product227 = fmul float %leftComp225, %rightComp226
  %dotProduct228 = fadd float %dotProduct223, %product227
  %column229 = insertelement <4 x float> %column214, float %dotProduct228, i32 3
  %resultMatrix230 = insertvalue [4 x <4 x float>] %resultMatrix168, <4 x float> %column229, 1
  %rightColumn231 = extractvalue [4 x <3 x float>] %85, 2
  %leftColumn232 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp233 = extractelement <4 x float> %leftColumn232, i32 0
  %rightComp234 = extractelement <3 x float> %rightColumn231, i32 0
  %product235 = fmul float %leftComp233, %rightComp234
  %leftColumn236 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp237 = extractelement <4 x float> %leftColumn236, i32 0
  %rightComp238 = extractelement <3 x float> %rightColumn231, i32 1
  %product239 = fmul float %leftComp237, %rightComp238
  %dotProduct240 = fadd float %product235, %product239
  %leftColumn241 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp242 = extractelement <4 x float> %leftColumn241, i32 0
  %rightComp243 = extractelement <3 x float> %rightColumn231, i32 2
  %product244 = fmul float %leftComp242, %rightComp243
  %dotProduct245 = fadd float %dotProduct240, %product244
  %column246 = insertelement <4 x float> %column229, float %dotProduct245, i32 0
  %leftColumn247 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp248 = extractelement <4 x float> %leftColumn247, i32 1
  %rightComp249 = extractelement <3 x float> %rightColumn231, i32 0
  %product250 = fmul float %leftComp248, %rightComp249
  %leftColumn251 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp252 = extractelement <4 x float> %leftColumn251, i32 1
  %rightComp253 = extractelement <3 x float> %rightColumn231, i32 1
  %product254 = fmul float %leftComp252, %rightComp253
  %dotProduct255 = fadd float %product250, %product254
  %leftColumn256 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp257 = extractelement <4 x float> %leftColumn256, i32 1
  %rightComp258 = extractelement <3 x float> %rightColumn231, i32 2
  %product259 = fmul float %leftComp257, %rightComp258
  %dotProduct260 = fadd float %dotProduct255, %product259
  %column261 = insertelement <4 x float> %column246, float %dotProduct260, i32 1
  %leftColumn262 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp263 = extractelement <4 x float> %leftColumn262, i32 2
  %rightComp264 = extractelement <3 x float> %rightColumn231, i32 0
  %product265 = fmul float %leftComp263, %rightComp264
  %leftColumn266 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp267 = extractelement <4 x float> %leftColumn266, i32 2
  %rightComp268 = extractelement <3 x float> %rightColumn231, i32 1
  %product269 = fmul float %leftComp267, %rightComp268
  %dotProduct270 = fadd float %product265, %product269
  %leftColumn271 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp272 = extractelement <4 x float> %leftColumn271, i32 2
  %rightComp273 = extractelement <3 x float> %rightColumn231, i32 2
  %product274 = fmul float %leftComp272, %rightComp273
  %dotProduct275 = fadd float %dotProduct270, %product274
  %column276 = insertelement <4 x float> %column261, float %dotProduct275, i32 2
  %leftColumn277 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp278 = extractelement <4 x float> %leftColumn277, i32 3
  %rightComp279 = extractelement <3 x float> %rightColumn231, i32 0
  %product280 = fmul float %leftComp278, %rightComp279
  %leftColumn281 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp282 = extractelement <4 x float> %leftColumn281, i32 3
  %rightComp283 = extractelement <3 x float> %rightColumn231, i32 1
  %product284 = fmul float %leftComp282, %rightComp283
  %dotProduct285 = fadd float %product280, %product284
  %leftColumn286 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp287 = extractelement <4 x float> %leftColumn286, i32 3
  %rightComp288 = extractelement <3 x float> %rightColumn231, i32 2
  %product289 = fmul float %leftComp287, %rightComp288
  %dotProduct290 = fadd float %dotProduct285, %product289
  %column291 = insertelement <4 x float> %column276, float %dotProduct290, i32 3
  %resultMatrix292 = insertvalue [4 x <4 x float>] %resultMatrix230, <4 x float> %column291, 2
  %rightColumn293 = extractvalue [4 x <3 x float>] %85, 3
  %leftColumn294 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp295 = extractelement <4 x float> %leftColumn294, i32 0
  %rightComp296 = extractelement <3 x float> %rightColumn293, i32 0
  %product297 = fmul float %leftComp295, %rightComp296
  %leftColumn298 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp299 = extractelement <4 x float> %leftColumn298, i32 0
  %rightComp300 = extractelement <3 x float> %rightColumn293, i32 1
  %product301 = fmul float %leftComp299, %rightComp300
  %dotProduct302 = fadd float %product297, %product301
  %leftColumn303 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp304 = extractelement <4 x float> %leftColumn303, i32 0
  %rightComp305 = extractelement <3 x float> %rightColumn293, i32 2
  %product306 = fmul float %leftComp304, %rightComp305
  %dotProduct307 = fadd float %dotProduct302, %product306
  %column308 = insertelement <4 x float> %column291, float %dotProduct307, i32 0
  %leftColumn309 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp310 = extractelement <4 x float> %leftColumn309, i32 1
  %rightComp311 = extractelement <3 x float> %rightColumn293, i32 0
  %product312 = fmul float %leftComp310, %rightComp311
  %leftColumn313 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp314 = extractelement <4 x float> %leftColumn313, i32 1
  %rightComp315 = extractelement <3 x float> %rightColumn293, i32 1
  %product316 = fmul float %leftComp314, %rightComp315
  %dotProduct317 = fadd float %product312, %product316
  %leftColumn318 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp319 = extractelement <4 x float> %leftColumn318, i32 1
  %rightComp320 = extractelement <3 x float> %rightColumn293, i32 2
  %product321 = fmul float %leftComp319, %rightComp320
  %dotProduct322 = fadd float %dotProduct317, %product321
  %column323 = insertelement <4 x float> %column308, float %dotProduct322, i32 1
  %leftColumn324 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp325 = extractelement <4 x float> %leftColumn324, i32 2
  %rightComp326 = extractelement <3 x float> %rightColumn293, i32 0
  %product327 = fmul float %leftComp325, %rightComp326
  %leftColumn328 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp329 = extractelement <4 x float> %leftColumn328, i32 2
  %rightComp330 = extractelement <3 x float> %rightColumn293, i32 1
  %product331 = fmul float %leftComp329, %rightComp330
  %dotProduct332 = fadd float %product327, %product331
  %leftColumn333 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp334 = extractelement <4 x float> %leftColumn333, i32 2
  %rightComp335 = extractelement <3 x float> %rightColumn293, i32 2
  %product336 = fmul float %leftComp334, %rightComp335
  %dotProduct337 = fadd float %dotProduct332, %product336
  %column338 = insertelement <4 x float> %column323, float %dotProduct337, i32 2
  %leftColumn339 = extractvalue [3 x <4 x float>] %84, 0
  %leftComp340 = extractelement <4 x float> %leftColumn339, i32 3
  %rightComp341 = extractelement <3 x float> %rightColumn293, i32 0
  %product342 = fmul float %leftComp340, %rightComp341
  %leftColumn343 = extractvalue [3 x <4 x float>] %84, 1
  %leftComp344 = extractelement <4 x float> %leftColumn343, i32 3
  %rightComp345 = extractelement <3 x float> %rightColumn293, i32 1
  %product346 = fmul float %leftComp344, %rightComp345
  %dotProduct347 = fadd float %product342, %product346
  %leftColumn348 = extractvalue [3 x <4 x float>] %84, 2
  %leftComp349 = extractelement <4 x float> %leftColumn348, i32 3
  %rightComp350 = extractelement <3 x float> %rightColumn293, i32 2
  %product351 = fmul float %leftComp349, %rightComp350
  %dotProduct352 = fadd float %dotProduct347, %product351
  %column353 = insertelement <4 x float> %column338, float %dotProduct352, i32 3
  %resultMatrix354 = insertvalue [4 x <4 x float>] %resultMatrix292, <4 x float> %column353, 3
  %86 = load [4 x <4 x float>]* %m44
  %87 = load [4 x <4 x float>]* %12
  %leftColumn355 = extractvalue [4 x <4 x float>] %86, 0
  %rightColumn356 = extractvalue [4 x <4 x float>] %resultMatrix354, 0
  %column357 = fadd <4 x float> %leftColumn355, %rightColumn356
  %88 = insertvalue [4 x <4 x float>] %87, <4 x float> %column357, 0
  %leftColumn358 = extractvalue [4 x <4 x float>] %86, 1
  %rightColumn359 = extractvalue [4 x <4 x float>] %resultMatrix354, 1
  %column360 = fadd <4 x float> %leftColumn358, %rightColumn359
  %89 = insertvalue [4 x <4 x float>] %88, <4 x float> %column360, 1
  %leftColumn361 = extractvalue [4 x <4 x float>] %86, 2
  %rightColumn362 = extractvalue [4 x <4 x float>] %resultMatrix354, 2
  %column363 = fadd <4 x float> %leftColumn361, %rightColumn362
  %90 = insertvalue [4 x <4 x float>] %89, <4 x float> %column363, 2
  %leftColumn364 = extractvalue [4 x <4 x float>] %86, 3
  %rightColumn365 = extractvalue [4 x <4 x float>] %resultMatrix354, 3
  %column366 = fadd <4 x float> %leftColumn364, %rightColumn365
  %m44367 = insertvalue [4 x <4 x float>] %90, <4 x float> %column366, 3
  store [4 x <4 x float>] %m44367, [4 x <4 x float>]* %m44
  %91 = load [4 x <4 x float>]* %m44
  %92 = load [4 x <4 x float>]* %11
  %column368 = extractvalue [4 x <4 x float>] %91, 0
  %row369 = extractelement <4 x float> %column368, i32 0
  %93 = fsub float 0.000000e+00, %row369
  %94 = insertelement <4 x float> %column368, float %93, i32 0
  %row370 = extractelement <4 x float> %94, i32 1
  %95 = fsub float 0.000000e+00, %row370
  %96 = insertelement <4 x float> %94, float %95, i32 1
  %row371 = extractelement <4 x float> %96, i32 2
  %97 = fsub float 0.000000e+00, %row371
  %98 = insertelement <4 x float> %96, float %97, i32 2
  %row372 = extractelement <4 x float> %98, i32 3
  %99 = fsub float 0.000000e+00, %row372
  %100 = insertelement <4 x float> %98, float %99, i32 3
  %101 = insertvalue [4 x <4 x float>] %92, <4 x float> %100, 0
  %column373 = extractvalue [4 x <4 x float>] %91, 1
  %row374 = extractelement <4 x float> %column373, i32 0
  %102 = fsub float 0.000000e+00, %row374
  %103 = insertelement <4 x float> %column373, float %102, i32 0
  %row375 = extractelement <4 x float> %103, i32 1
  %104 = fsub float 0.000000e+00, %row375
  %105 = insertelement <4 x float> %103, float %104, i32 1
  %row376 = extractelement <4 x float> %105, i32 2
  %106 = fsub float 0.000000e+00, %row376
  %107 = insertelement <4 x float> %105, float %106, i32 2
  %row377 = extractelement <4 x float> %107, i32 3
  %108 = fsub float 0.000000e+00, %row377
  %109 = insertelement <4 x float> %107, float %108, i32 3
  %110 = insertvalue [4 x <4 x float>] %101, <4 x float> %109, 1
  %column378 = extractvalue [4 x <4 x float>] %91, 2
  %row379 = extractelement <4 x float> %column378, i32 0
  %111 = fsub float 0.000000e+00, %row379
  %112 = insertelement <4 x float> %column378, float %111, i32 0
  %row380 = extractelement <4 x float> %112, i32 1
  %113 = fsub float 0.000000e+00, %row380
  %114 = insertelement <4 x float> %112, float %113, i32 1
  %row381 = extractelement <4 x float> %114, i32 2
  %115 = fsub float 0.000000e+00, %row381
  %116 = insertelement <4 x float> %114, float %115, i32 2
  %row382 = extractelement <4 x float> %116, i32 3
  %117 = fsub float 0.000000e+00, %row382
  %118 = insertelement <4 x float> %116, float %117, i32 3
  %119 = insertvalue [4 x <4 x float>] %110, <4 x float> %118, 2
  %column383 = extractvalue [4 x <4 x float>] %91, 3
  %row384 = extractelement <4 x float> %column383, i32 0
  %120 = fsub float 0.000000e+00, %row384
  %121 = insertelement <4 x float> %column383, float %120, i32 0
  %row385 = extractelement <4 x float> %121, i32 1
  %122 = fsub float 0.000000e+00, %row385
  %123 = insertelement <4 x float> %121, float %122, i32 1
  %row386 = extractelement <4 x float> %123, i32 2
  %124 = fsub float 0.000000e+00, %row386
  %125 = insertelement <4 x float> %123, float %124, i32 2
  %row387 = extractelement <4 x float> %125, i32 3
  %126 = fsub float 0.000000e+00, %row387
  %127 = insertelement <4 x float> %125, float %126, i32 3
  %128 = insertvalue [4 x <4 x float>] %119, <4 x float> %127, 3
  %129 = load <4 x float>* @v
  %130 = load <4 x float>* %10
  %component = extractelement <4 x float> %129, i32 0
  %component388 = extractelement <4 x float> %129, i32 1
  %component389 = extractelement <4 x float> %129, i32 2
  %component390 = extractelement <4 x float> %129, i32 3
  %column391 = extractvalue [4 x <4 x float>] %128, 0
  %element392 = extractelement <4 x float> %column391, i32 0
  %product393 = fmul float %element392, %component
  %column394 = extractvalue [4 x <4 x float>] %128, 1
  %element395 = extractelement <4 x float> %column394, i32 0
  %product396 = fmul float %element395, %component388
  %dotProduct397 = fadd float %product393, %product396
  %column398 = extractvalue [4 x <4 x float>] %128, 2
  %element399 = extractelement <4 x float> %column398, i32 0
  %product400 = fmul float %element399, %component389
  %dotProduct401 = fadd float %dotProduct397, %product400
  %column402 = extractvalue [4 x <4 x float>] %128, 3
  %element403 = extractelement <4 x float> %column402, i32 0
  %product404 = fmul float %element403, %component390
  %dotProduct405 = fadd float %dotProduct401, %product404
  %131 = insertelement <4 x float> %130, float %dotProduct405, i32 0
  %column406 = extractvalue [4 x <4 x float>] %128, 0
  %element407 = extractelement <4 x float> %column406, i32 1
  %product408 = fmul float %element407, %component
  %column409 = extractvalue [4 x <4 x float>] %128, 1
  %element410 = extractelement <4 x float> %column409, i32 1
  %product411 = fmul float %element410, %component388
  %dotProduct412 = fadd float %product408, %product411
  %column413 = extractvalue [4 x <4 x float>] %128, 2
  %element414 = extractelement <4 x float> %column413, i32 1
  %product415 = fmul float %element414, %component389
  %dotProduct416 = fadd float %dotProduct412, %product415
  %column417 = extractvalue [4 x <4 x float>] %128, 3
  %element418 = extractelement <4 x float> %column417, i32 1
  %product419 = fmul float %element418, %component390
  %dotProduct420 = fadd float %dotProduct416, %product419
  %132 = insertelement <4 x float> %131, float %dotProduct420, i32 1
  %column421 = extractvalue [4 x <4 x float>] %128, 0
  %element422 = extractelement <4 x float> %column421, i32 2
  %product423 = fmul float %element422, %component
  %column424 = extractvalue [4 x <4 x float>] %128, 1
  %element425 = extractelement <4 x float> %column424, i32 2
  %product426 = fmul float %element425, %component388
  %dotProduct427 = fadd float %product423, %product426
  %column428 = extractvalue [4 x <4 x float>] %128, 2
  %element429 = extractelement <4 x float> %column428, i32 2
  %product430 = fmul float %element429, %component389
  %dotProduct431 = fadd float %dotProduct427, %product430
  %column432 = extractvalue [4 x <4 x float>] %128, 3
  %element433 = extractelement <4 x float> %column432, i32 2
  %product434 = fmul float %element433, %component390
  %dotProduct435 = fadd float %dotProduct431, %product434
  %133 = insertelement <4 x float> %132, float %dotProduct435, i32 2
  %column436 = extractvalue [4 x <4 x float>] %128, 0
  %element437 = extractelement <4 x float> %column436, i32 3
  %product438 = fmul float %element437, %component
  %column439 = extractvalue [4 x <4 x float>] %128, 1
  %element440 = extractelement <4 x float> %column439, i32 3
  %product441 = fmul float %element440, %component388
  %dotProduct442 = fadd float %product438, %product441
  %column443 = extractvalue [4 x <4 x float>] %128, 2
  %element444 = extractelement <4 x float> %column443, i32 3
  %product445 = fmul float %element444, %component389
  %dotProduct446 = fadd float %dotProduct442, %product445
  %column447 = extractvalue [4 x <4 x float>] %128, 3
  %element448 = extractelement <4 x float> %column447, i32 3
  %product449 = fmul float %element448, %component390
  %dotProduct450 = fadd float %dotProduct446, %product449
  %134 = insertelement <4 x float> %133, float %dotProduct450, i32 3
  %135 = load <4 x float>* @FragColor
  %FragColor451 = fadd <4 x float> %135, %134
  store <4 x float> %FragColor451, <4 x float>* @FragColor
  %136 = load [4 x <4 x float>]* %m44
  %137 = load [4 x <4 x float>]* %m44
  %138 = load [4 x <4 x float>]* %9
  %leftColumn452 = extractvalue [4 x <4 x float>] %136, 0
  %rightColumn453 = extractvalue [4 x <4 x float>] %137, 0
  %column454 = fmul <4 x float> %leftColumn452, %rightColumn453
  %139 = insertvalue [4 x <4 x float>] %138, <4 x float> %column454, 0
  %leftColumn455 = extractvalue [4 x <4 x float>] %136, 1
  %rightColumn456 = extractvalue [4 x <4 x float>] %137, 1
  %column457 = fmul <4 x float> %leftColumn455, %rightColumn456
  %140 = insertvalue [4 x <4 x float>] %139, <4 x float> %column457, 1
  %leftColumn458 = extractvalue [4 x <4 x float>] %136, 2
  %rightColumn459 = extractvalue [4 x <4 x float>] %137, 2
  %column460 = fmul <4 x float> %leftColumn458, %rightColumn459
  %141 = insertvalue [4 x <4 x float>] %140, <4 x float> %column460, 2
  %leftColumn461 = extractvalue [4 x <4 x float>] %136, 3
  %rightColumn462 = extractvalue [4 x <4 x float>] %137, 3
  %column463 = fmul <4 x float> %leftColumn461, %rightColumn462
  %142 = insertvalue [4 x <4 x float>] %141, <4 x float> %column463, 3
  %143 = load <4 x float>* @FragColor
  %144 = load <4 x float>* %8
  %column464 = extractvalue [4 x <4 x float>] %142, 0
  %dotres465 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %143, <4 x float> %column464)
  %145 = insertelement <4 x float> %144, float %dotres465, i32 0
  %column466 = extractvalue [4 x <4 x float>] %142, 1
  %dotres467 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %143, <4 x float> %column466)
  %146 = insertelement <4 x float> %145, float %dotres467, i32 1
  %column468 = extractvalue [4 x <4 x float>] %142, 2
  %dotres469 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %143, <4 x float> %column468)
  %147 = insertelement <4 x float> %146, float %dotres469, i32 2
  %column470 = extractvalue [4 x <4 x float>] %142, 3
  %dotres471 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %143, <4 x float> %column470)
  %FragColor472 = insertelement <4 x float> %147, float %dotres471, i32 3
  store <4 x float> %FragColor472, <4 x float>* @FragColor
  %148 = load [4 x <3 x float>] addrspace(2)* @um43, !gla.uniform !11
  %column473 = extractvalue [4 x <3 x float>] %148, 0
  %element474 = extractelement <3 x float> %column473, i32 0
  %element475 = extractelement <3 x float> %column473, i32 1
  %element476 = extractelement <3 x float> %column473, i32 2
  %column477 = extractvalue [4 x <3 x float>] %148, 1
  %element478 = extractelement <3 x float> %column477, i32 0
  %element479 = extractelement <3 x float> %column477, i32 1
  %element480 = extractelement <3 x float> %column477, i32 2
  %column481 = extractvalue [4 x <3 x float>] %148, 2
  %element482 = extractelement <3 x float> %column481, i32 0
  %element483 = extractelement <3 x float> %column481, i32 1
  %element484 = extractelement <3 x float> %column481, i32 2
  %column485 = extractvalue [4 x <3 x float>] %148, 3
  %element486 = extractelement <3 x float> %column485, i32 0
  %element487 = extractelement <3 x float> %column485, i32 1
  %element488 = extractelement <3 x float> %column485, i32 2
  %149 = load [3 x <4 x float>]* %7
  %column489 = extractvalue [3 x <4 x float>] %149, 0
  %column490 = insertelement <4 x float> %column489, float %element474, i32 0
  %column491 = insertelement <4 x float> %column490, float %element478, i32 1
  %column492 = insertelement <4 x float> %column491, float %element482, i32 2
  %column493 = insertelement <4 x float> %column492, float %element486, i32 3
  %matrix494 = insertvalue [3 x <4 x float>] %149, <4 x float> %column493, 0
  %column495 = extractvalue [3 x <4 x float>] %matrix494, 1
  %column496 = insertelement <4 x float> %column495, float %element475, i32 0
  %column497 = insertelement <4 x float> %column496, float %element479, i32 1
  %column498 = insertelement <4 x float> %column497, float %element483, i32 2
  %column499 = insertelement <4 x float> %column498, float %element487, i32 3
  %matrix500 = insertvalue [3 x <4 x float>] %matrix494, <4 x float> %column499, 1
  %column501 = extractvalue [3 x <4 x float>] %matrix500, 2
  %column502 = insertelement <4 x float> %column501, float %element476, i32 0
  %column503 = insertelement <4 x float> %column502, float %element480, i32 1
  %column504 = insertelement <4 x float> %column503, float %element484, i32 2
  %column505 = insertelement <4 x float> %column504, float %element488, i32 3
  %matrix506 = insertvalue [3 x <4 x float>] %matrix500, <4 x float> %column505, 2
  store [3 x <4 x float>] %matrix506, [3 x <4 x float>]* %m34
  %150 = load <4 x float>* @FragColor
  %151 = load [3 x <4 x float>]* %m34
  %152 = load <3 x float>* %6
  %column507 = extractvalue [3 x <4 x float>] %151, 0
  %dotres508 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %150, <4 x float> %column507)
  %153 = insertelement <3 x float> %152, float %dotres508, i32 0
  %column509 = extractvalue [3 x <4 x float>] %151, 1
  %dotres510 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %150, <4 x float> %column509)
  %154 = insertelement <3 x float> %153, float %dotres510, i32 1
  %column511 = extractvalue [3 x <4 x float>] %151, 2
  %dotres512 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %150, <4 x float> %column511)
  %155 = insertelement <3 x float> %154, float %dotres512, i32 2
  %156 = load <4 x float>* %FragColor513
  %157 = extractelement <3 x float> %155, i32 0
  %158 = insertelement <4 x float> %156, float %157, i32 0
  %159 = extractelement <3 x float> %155, i32 1
  %160 = insertelement <4 x float> %158, float %159, i32 1
  %161 = extractelement <3 x float> %155, i32 2
  %162 = insertelement <4 x float> %160, float %161, i32 2
  %163 = insertelement <4 x float> %162, float 1.000000e+00, i32 3
  %164 = load <4 x float>* @FragColor
  %FragColor514 = fmul <4 x float> %164, %163
  store <4 x float> %FragColor514, <4 x float>* @FragColor
  %165 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column515 = extractvalue [4 x <4 x float>] %165, 0
  %element516 = extractelement <4 x float> %column515, i32 0
  %element517 = extractelement <4 x float> %column515, i32 1
  %element518 = extractelement <4 x float> %column515, i32 2
  %element519 = extractelement <4 x float> %column515, i32 3
  %column520 = extractvalue [4 x <4 x float>] %165, 1
  %element521 = extractelement <4 x float> %column520, i32 0
  %element522 = extractelement <4 x float> %column520, i32 1
  %element523 = extractelement <4 x float> %column520, i32 2
  %element524 = extractelement <4 x float> %column520, i32 3
  %column525 = extractvalue [4 x <4 x float>] %165, 2
  %element526 = extractelement <4 x float> %column525, i32 0
  %element527 = extractelement <4 x float> %column525, i32 1
  %element528 = extractelement <4 x float> %column525, i32 2
  %element529 = extractelement <4 x float> %column525, i32 3
  %column530 = extractvalue [4 x <4 x float>] %165, 3
  %element531 = extractelement <4 x float> %column530, i32 0
  %element532 = extractelement <4 x float> %column530, i32 1
  %element533 = extractelement <4 x float> %column530, i32 2
  %element534 = extractelement <4 x float> %column530, i32 3
  %166 = fmul float %element528, %element534
  %167 = fmul float %element533, %element529
  %168 = fsub float %166, %167
  %169 = fmul float %element522, %168
  %170 = fmul float %element523, %element534
  %171 = fmul float %element533, %element524
  %172 = fsub float %170, %171
  %173 = fmul float %element527, %172
  %174 = fsub float %169, %173
  %175 = fmul float %element523, %element529
  %176 = fmul float %element528, %element524
  %177 = fsub float %175, %176
  %178 = fmul float %element532, %177
  %179 = fadd float %174, %178
  %180 = fmul float %element516, %179
  %181 = fmul float %element528, %element534
  %182 = fmul float %element533, %element529
  %183 = fsub float %181, %182
  %184 = fmul float %element517, %183
  %185 = fmul float %element518, %element534
  %186 = fmul float %element533, %element519
  %187 = fsub float %185, %186
  %188 = fmul float %element527, %187
  %189 = fsub float %184, %188
  %190 = fmul float %element518, %element529
  %191 = fmul float %element528, %element519
  %192 = fsub float %190, %191
  %193 = fmul float %element532, %192
  %194 = fadd float %189, %193
  %195 = fmul float %element521, %194
  %196 = fsub float %180, %195
  %197 = fmul float %element523, %element534
  %198 = fmul float %element533, %element524
  %199 = fsub float %197, %198
  %200 = fmul float %element517, %199
  %201 = fmul float %element518, %element534
  %202 = fmul float %element533, %element519
  %203 = fsub float %201, %202
  %204 = fmul float %element522, %203
  %205 = fsub float %200, %204
  %206 = fmul float %element518, %element524
  %207 = fmul float %element523, %element519
  %208 = fsub float %206, %207
  %209 = fmul float %element532, %208
  %210 = fadd float %205, %209
  %211 = fmul float %element526, %210
  %212 = fadd float %196, %211
  %213 = fmul float %element523, %element529
  %214 = fmul float %element528, %element524
  %215 = fsub float %213, %214
  %216 = fmul float %element517, %215
  %217 = fmul float %element518, %element529
  %218 = fmul float %element528, %element519
  %219 = fsub float %217, %218
  %220 = fmul float %element522, %219
  %221 = fsub float %216, %220
  %222 = fmul float %element518, %element524
  %223 = fmul float %element523, %element519
  %224 = fsub float %222, %223
  %225 = fmul float %element527, %224
  %226 = fadd float %221, %225
  %227 = fmul float %element531, %226
  %228 = fsub float %212, %227
  %229 = load <4 x float>* %FragColor535
  %230 = insertelement <4 x float> undef, float %228, i32 0
  %231 = insertelement <4 x float> %230, float %228, i32 1
  %232 = insertelement <4 x float> %231, float %228, i32 2
  %233 = insertelement <4 x float> %232, float %228, i32 3
  %234 = load <4 x float>* @FragColor
  %FragColor536 = fmul <4 x float> %234, %233
  store <4 x float> %FragColor536, <4 x float>* @FragColor
  %235 = load [2 x <2 x float>] addrspace(2)* @um2, !gla.uniform !13
  %column537 = extractvalue [2 x <2 x float>] %235, 0
  %element538 = extractelement <2 x float> %column537, i32 0
  %element539 = extractelement <2 x float> %column537, i32 1
  %column540 = extractvalue [2 x <2 x float>] %235, 1
  %element541 = extractelement <2 x float> %column540, i32 0
  %element542 = extractelement <2 x float> %column540, i32 1
  %236 = fsub float -0.000000e+00, %element539
  %237 = fsub float -0.000000e+00, %element541
  %238 = fmul float %element538, %element542
  %239 = fmul float %element541, %element539
  %240 = fsub float %238, %239
  %recip = fdiv float 1.000000e+00, %240
  %241 = fmul float %element542, %recip
  %242 = fmul float %237, %recip
  %243 = fmul float %236, %recip
  %244 = fmul float %element538, %recip
  %245 = load [2 x <2 x float>]* %5
  %column543 = extractvalue [2 x <2 x float>] %245, 0
  %column544 = insertelement <2 x float> %column543, float %241, i32 0
  %column545 = insertelement <2 x float> %column544, float %243, i32 1
  %matrix546 = insertvalue [2 x <2 x float>] %245, <2 x float> %column545, 0
  %column547 = extractvalue [2 x <2 x float>] %matrix546, 1
  %column548 = insertelement <2 x float> %column547, float %242, i32 0
  %column549 = insertelement <2 x float> %column548, float %244, i32 1
  %matrix550 = insertvalue [2 x <2 x float>] %matrix546, <2 x float> %column549, 1
  store [2 x <2 x float>] %matrix550, [2 x <2 x float>]* %inv
  %246 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %247 = load <2 x float>* %246
  %248 = extractelement <2 x float> %247, i32 0
  %249 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %250 = load <2 x float>* %249
  %251 = extractelement <2 x float> %250, i32 0
  %252 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 0
  %253 = load <2 x float>* %252
  %254 = extractelement <2 x float> %253, i32 1
  %255 = getelementptr [2 x <2 x float>]* %inv, i32 0, i32 1
  %256 = load <2 x float>* %255
  %257 = extractelement <2 x float> %256, i32 1
  %258 = load <4 x float>* %FragColor551
  %259 = insertelement <4 x float> %258, float %248, i32 0
  %260 = insertelement <4 x float> %259, float %251, i32 1
  %261 = insertelement <4 x float> %260, float %254, i32 2
  %262 = insertelement <4 x float> %261, float %257, i32 3
  %263 = load <4 x float>* @FragColor
  %FragColor552 = fmul <4 x float> %263, %262
  store <4 x float> %FragColor552, <4 x float>* @FragColor
  %264 = load [3 x <3 x float>] addrspace(2)* @um3, !gla.uniform !14
  %column553 = extractvalue [3 x <3 x float>] %264, 0
  %element554 = extractelement <3 x float> %column553, i32 0
  %element555 = extractelement <3 x float> %column553, i32 1
  %element556 = extractelement <3 x float> %column553, i32 2
  %column557 = extractvalue [3 x <3 x float>] %264, 1
  %element558 = extractelement <3 x float> %column557, i32 0
  %element559 = extractelement <3 x float> %column557, i32 1
  %element560 = extractelement <3 x float> %column557, i32 2
  %column561 = extractvalue [3 x <3 x float>] %264, 2
  %element562 = extractelement <3 x float> %column561, i32 0
  %element563 = extractelement <3 x float> %column561, i32 1
  %element564 = extractelement <3 x float> %column561, i32 2
  %265 = fmul float %element559, %element564
  %266 = fmul float %element563, %element560
  %267 = fsub float %265, %266
  %268 = fmul float %element555, %element564
  %269 = fmul float %element563, %element556
  %270 = fsub float %268, %269
  %271 = fsub float -0.000000e+00, %270
  %272 = fmul float %element555, %element560
  %273 = fmul float %element559, %element556
  %274 = fsub float %272, %273
  %275 = fmul float %element558, %element564
  %276 = fmul float %element562, %element560
  %277 = fsub float %275, %276
  %278 = fsub float -0.000000e+00, %277
  %279 = fmul float %element554, %element564
  %280 = fmul float %element562, %element556
  %281 = fsub float %279, %280
  %282 = fmul float %element554, %element560
  %283 = fmul float %element558, %element556
  %284 = fsub float %282, %283
  %285 = fsub float -0.000000e+00, %284
  %286 = fmul float %element558, %element563
  %287 = fmul float %element562, %element559
  %288 = fsub float %286, %287
  %289 = fmul float %element554, %element563
  %290 = fmul float %element562, %element555
  %291 = fsub float %289, %290
  %292 = fsub float -0.000000e+00, %291
  %293 = fmul float %element554, %element559
  %294 = fmul float %element558, %element555
  %295 = fsub float %293, %294
  %296 = fmul float %element559, %element564
  %297 = fmul float %element563, %element560
  %298 = fsub float %296, %297
  %299 = fmul float %element554, %298
  %300 = fmul float %element555, %element564
  %301 = fmul float %element563, %element556
  %302 = fsub float %300, %301
  %303 = fmul float %element558, %302
  %304 = fsub float %299, %303
  %305 = fmul float %element555, %element560
  %306 = fmul float %element559, %element556
  %307 = fsub float %305, %306
  %308 = fmul float %element562, %307
  %309 = fadd float %304, %308
  %recip565 = fdiv float 1.000000e+00, %309
  %310 = fmul float %267, %recip565
  %311 = fmul float %278, %recip565
  %312 = fmul float %288, %recip565
  %313 = fmul float %271, %recip565
  %314 = fmul float %281, %recip565
  %315 = fmul float %292, %recip565
  %316 = fmul float %274, %recip565
  %317 = fmul float %285, %recip565
  %318 = fmul float %295, %recip565
  %319 = load [3 x <3 x float>]* %4
  %column566 = extractvalue [3 x <3 x float>] %319, 0
  %column567 = insertelement <3 x float> %column566, float %310, i32 0
  %column568 = insertelement <3 x float> %column567, float %313, i32 1
  %column569 = insertelement <3 x float> %column568, float %316, i32 2
  %matrix570 = insertvalue [3 x <3 x float>] %319, <3 x float> %column569, 0
  %column571 = extractvalue [3 x <3 x float>] %matrix570, 1
  %column572 = insertelement <3 x float> %column571, float %311, i32 0
  %column573 = insertelement <3 x float> %column572, float %314, i32 1
  %column574 = insertelement <3 x float> %column573, float %317, i32 2
  %matrix575 = insertvalue [3 x <3 x float>] %matrix570, <3 x float> %column574, 1
  %column576 = extractvalue [3 x <3 x float>] %matrix575, 2
  %column577 = insertelement <3 x float> %column576, float %312, i32 0
  %column578 = insertelement <3 x float> %column577, float %315, i32 1
  %column579 = insertelement <3 x float> %column578, float %318, i32 2
  %matrix580 = insertvalue [3 x <3 x float>] %matrix575, <3 x float> %column579, 2
  store [3 x <3 x float>] %matrix580, [3 x <3 x float>]* %inv3
  %320 = getelementptr [3 x <3 x float>]* %inv3, i32 0, i32 2
  %321 = load <3 x float>* %320
  %322 = extractelement <3 x float> %321, i32 1
  %323 = load <4 x float>* %FragColor581
  %324 = insertelement <4 x float> undef, float %322, i32 0
  %325 = insertelement <4 x float> %324, float %322, i32 1
  %326 = insertelement <4 x float> %325, float %322, i32 2
  %327 = insertelement <4 x float> %326, float %322, i32 3
  %328 = load <4 x float>* @FragColor
  %FragColor582 = fmul <4 x float> %328, %327
  store <4 x float> %FragColor582, <4 x float>* @FragColor
  %329 = load [4 x <4 x float>] addrspace(2)* @um4, !gla.uniform !12
  %column583 = extractvalue [4 x <4 x float>] %329, 0
  %element584 = extractelement <4 x float> %column583, i32 0
  %element585 = extractelement <4 x float> %column583, i32 1
  %element586 = extractelement <4 x float> %column583, i32 2
  %element587 = extractelement <4 x float> %column583, i32 3
  %column588 = extractvalue [4 x <4 x float>] %329, 1
  %element589 = extractelement <4 x float> %column588, i32 0
  %element590 = extractelement <4 x float> %column588, i32 1
  %element591 = extractelement <4 x float> %column588, i32 2
  %element592 = extractelement <4 x float> %column588, i32 3
  %column593 = extractvalue [4 x <4 x float>] %329, 2
  %element594 = extractelement <4 x float> %column593, i32 0
  %element595 = extractelement <4 x float> %column593, i32 1
  %element596 = extractelement <4 x float> %column593, i32 2
  %element597 = extractelement <4 x float> %column593, i32 3
  %column598 = extractvalue [4 x <4 x float>] %329, 3
  %element599 = extractelement <4 x float> %column598, i32 0
  %element600 = extractelement <4 x float> %column598, i32 1
  %element601 = extractelement <4 x float> %column598, i32 2
  %element602 = extractelement <4 x float> %column598, i32 3
  %330 = fmul float %element596, %element602
  %331 = fmul float %element601, %element597
  %332 = fsub float %330, %331
  %333 = fmul float %element590, %332
  %334 = fmul float %element591, %element602
  %335 = fmul float %element601, %element592
  %336 = fsub float %334, %335
  %337 = fmul float %element595, %336
  %338 = fsub float %333, %337
  %339 = fmul float %element591, %element597
  %340 = fmul float %element596, %element592
  %341 = fsub float %339, %340
  %342 = fmul float %element600, %341
  %343 = fadd float %338, %342
  %344 = fmul float %element596, %element602
  %345 = fmul float %element601, %element597
  %346 = fsub float %344, %345
  %347 = fmul float %element585, %346
  %348 = fmul float %element586, %element602
  %349 = fmul float %element601, %element587
  %350 = fsub float %348, %349
  %351 = fmul float %element595, %350
  %352 = fsub float %347, %351
  %353 = fmul float %element586, %element597
  %354 = fmul float %element596, %element587
  %355 = fsub float %353, %354
  %356 = fmul float %element600, %355
  %357 = fadd float %352, %356
  %358 = fsub float -0.000000e+00, %357
  %359 = fmul float %element591, %element602
  %360 = fmul float %element601, %element592
  %361 = fsub float %359, %360
  %362 = fmul float %element585, %361
  %363 = fmul float %element586, %element602
  %364 = fmul float %element601, %element587
  %365 = fsub float %363, %364
  %366 = fmul float %element590, %365
  %367 = fsub float %362, %366
  %368 = fmul float %element586, %element592
  %369 = fmul float %element591, %element587
  %370 = fsub float %368, %369
  %371 = fmul float %element600, %370
  %372 = fadd float %367, %371
  %373 = fmul float %element591, %element597
  %374 = fmul float %element596, %element592
  %375 = fsub float %373, %374
  %376 = fmul float %element585, %375
  %377 = fmul float %element586, %element597
  %378 = fmul float %element596, %element587
  %379 = fsub float %377, %378
  %380 = fmul float %element590, %379
  %381 = fsub float %376, %380
  %382 = fmul float %element586, %element592
  %383 = fmul float %element591, %element587
  %384 = fsub float %382, %383
  %385 = fmul float %element595, %384
  %386 = fadd float %381, %385
  %387 = fsub float -0.000000e+00, %386
  %388 = fmul float %element596, %element602
  %389 = fmul float %element601, %element597
  %390 = fsub float %388, %389
  %391 = fmul float %element589, %390
  %392 = fmul float %element591, %element602
  %393 = fmul float %element601, %element592
  %394 = fsub float %392, %393
  %395 = fmul float %element594, %394
  %396 = fsub float %391, %395
  %397 = fmul float %element591, %element597
  %398 = fmul float %element596, %element592
  %399 = fsub float %397, %398
  %400 = fmul float %element599, %399
  %401 = fadd float %396, %400
  %402 = fsub float -0.000000e+00, %401
  %403 = fmul float %element596, %element602
  %404 = fmul float %element601, %element597
  %405 = fsub float %403, %404
  %406 = fmul float %element584, %405
  %407 = fmul float %element586, %element602
  %408 = fmul float %element601, %element587
  %409 = fsub float %407, %408
  %410 = fmul float %element594, %409
  %411 = fsub float %406, %410
  %412 = fmul float %element586, %element597
  %413 = fmul float %element596, %element587
  %414 = fsub float %412, %413
  %415 = fmul float %element599, %414
  %416 = fadd float %411, %415
  %417 = fmul float %element591, %element602
  %418 = fmul float %element601, %element592
  %419 = fsub float %417, %418
  %420 = fmul float %element584, %419
  %421 = fmul float %element586, %element602
  %422 = fmul float %element601, %element587
  %423 = fsub float %421, %422
  %424 = fmul float %element589, %423
  %425 = fsub float %420, %424
  %426 = fmul float %element586, %element592
  %427 = fmul float %element591, %element587
  %428 = fsub float %426, %427
  %429 = fmul float %element599, %428
  %430 = fadd float %425, %429
  %431 = fsub float -0.000000e+00, %430
  %432 = fmul float %element591, %element597
  %433 = fmul float %element596, %element592
  %434 = fsub float %432, %433
  %435 = fmul float %element584, %434
  %436 = fmul float %element586, %element597
  %437 = fmul float %element596, %element587
  %438 = fsub float %436, %437
  %439 = fmul float %element589, %438
  %440 = fsub float %435, %439
  %441 = fmul float %element586, %element592
  %442 = fmul float %element591, %element587
  %443 = fsub float %441, %442
  %444 = fmul float %element594, %443
  %445 = fadd float %440, %444
  %446 = fmul float %element595, %element602
  %447 = fmul float %element600, %element597
  %448 = fsub float %446, %447
  %449 = fmul float %element589, %448
  %450 = fmul float %element590, %element602
  %451 = fmul float %element600, %element592
  %452 = fsub float %450, %451
  %453 = fmul float %element594, %452
  %454 = fsub float %449, %453
  %455 = fmul float %element590, %element597
  %456 = fmul float %element595, %element592
  %457 = fsub float %455, %456
  %458 = fmul float %element599, %457
  %459 = fadd float %454, %458
  %460 = fmul float %element595, %element602
  %461 = fmul float %element600, %element597
  %462 = fsub float %460, %461
  %463 = fmul float %element584, %462
  %464 = fmul float %element585, %element602
  %465 = fmul float %element600, %element587
  %466 = fsub float %464, %465
  %467 = fmul float %element594, %466
  %468 = fsub float %463, %467
  %469 = fmul float %element585, %element597
  %470 = fmul float %element595, %element587
  %471 = fsub float %469, %470
  %472 = fmul float %element599, %471
  %473 = fadd float %468, %472
  %474 = fsub float -0.000000e+00, %473
  %475 = fmul float %element590, %element602
  %476 = fmul float %element600, %element592
  %477 = fsub float %475, %476
  %478 = fmul float %element584, %477
  %479 = fmul float %element585, %element602
  %480 = fmul float %element600, %element587
  %481 = fsub float %479, %480
  %482 = fmul float %element589, %481
  %483 = fsub float %478, %482
  %484 = fmul float %element585, %element592
  %485 = fmul float %element590, %element587
  %486 = fsub float %484, %485
  %487 = fmul float %element599, %486
  %488 = fadd float %483, %487
  %489 = fmul float %element590, %element597
  %490 = fmul float %element595, %element592
  %491 = fsub float %489, %490
  %492 = fmul float %element584, %491
  %493 = fmul float %element585, %element597
  %494 = fmul float %element595, %element587
  %495 = fsub float %493, %494
  %496 = fmul float %element589, %495
  %497 = fsub float %492, %496
  %498 = fmul float %element585, %element592
  %499 = fmul float %element590, %element587
  %500 = fsub float %498, %499
  %501 = fmul float %element594, %500
  %502 = fadd float %497, %501
  %503 = fsub float -0.000000e+00, %502
  %504 = fmul float %element595, %element601
  %505 = fmul float %element600, %element596
  %506 = fsub float %504, %505
  %507 = fmul float %element589, %506
  %508 = fmul float %element590, %element601
  %509 = fmul float %element600, %element591
  %510 = fsub float %508, %509
  %511 = fmul float %element594, %510
  %512 = fsub float %507, %511
  %513 = fmul float %element590, %element596
  %514 = fmul float %element595, %element591
  %515 = fsub float %513, %514
  %516 = fmul float %element599, %515
  %517 = fadd float %512, %516
  %518 = fsub float -0.000000e+00, %517
  %519 = fmul float %element595, %element601
  %520 = fmul float %element600, %element596
  %521 = fsub float %519, %520
  %522 = fmul float %element584, %521
  %523 = fmul float %element585, %element601
  %524 = fmul float %element600, %element586
  %525 = fsub float %523, %524
  %526 = fmul float %element594, %525
  %527 = fsub float %522, %526
  %528 = fmul float %element585, %element596
  %529 = fmul float %element595, %element586
  %530 = fsub float %528, %529
  %531 = fmul float %element599, %530
  %532 = fadd float %527, %531
  %533 = fmul float %element590, %element601
  %534 = fmul float %element600, %element591
  %535 = fsub float %533, %534
  %536 = fmul float %element584, %535
  %537 = fmul float %element585, %element601
  %538 = fmul float %element600, %element586
  %539 = fsub float %537, %538
  %540 = fmul float %element589, %539
  %541 = fsub float %536, %540
  %542 = fmul float %element585, %element591
  %543 = fmul float %element590, %element586
  %544 = fsub float %542, %543
  %545 = fmul float %element599, %544
  %546 = fadd float %541, %545
  %547 = fsub float -0.000000e+00, %546
  %548 = fmul float %element590, %element596
  %549 = fmul float %element595, %element591
  %550 = fsub float %548, %549
  %551 = fmul float %element584, %550
  %552 = fmul float %element585, %element596
  %553 = fmul float %element595, %element586
  %554 = fsub float %552, %553
  %555 = fmul float %element589, %554
  %556 = fsub float %551, %555
  %557 = fmul float %element585, %element591
  %558 = fmul float %element590, %element586
  %559 = fsub float %557, %558
  %560 = fmul float %element594, %559
  %561 = fadd float %556, %560
  %562 = fmul float %element596, %element602
  %563 = fmul float %element601, %element597
  %564 = fsub float %562, %563
  %565 = fmul float %element590, %564
  %566 = fmul float %element591, %element602
  %567 = fmul float %element601, %element592
  %568 = fsub float %566, %567
  %569 = fmul float %element595, %568
  %570 = fsub float %565, %569
  %571 = fmul float %element591, %element597
  %572 = fmul float %element596, %element592
  %573 = fsub float %571, %572
  %574 = fmul float %element600, %573
  %575 = fadd float %570, %574
  %576 = fmul float %element584, %575
  %577 = fmul float %element596, %element602
  %578 = fmul float %element601, %element597
  %579 = fsub float %577, %578
  %580 = fmul float %element585, %579
  %581 = fmul float %element586, %element602
  %582 = fmul float %element601, %element587
  %583 = fsub float %581, %582
  %584 = fmul float %element595, %583
  %585 = fsub float %580, %584
  %586 = fmul float %element586, %element597
  %587 = fmul float %element596, %element587
  %588 = fsub float %586, %587
  %589 = fmul float %element600, %588
  %590 = fadd float %585, %589
  %591 = fmul float %element589, %590
  %592 = fsub float %576, %591
  %593 = fmul float %element591, %element602
  %594 = fmul float %element601, %element592
  %595 = fsub float %593, %594
  %596 = fmul float %element585, %595
  %597 = fmul float %element586, %element602
  %598 = fmul float %element601, %element587
  %599 = fsub float %597, %598
  %600 = fmul float %element590, %599
  %601 = fsub float %596, %600
  %602 = fmul float %element586, %element592
  %603 = fmul float %element591, %element587
  %604 = fsub float %602, %603
  %605 = fmul float %element600, %604
  %606 = fadd float %601, %605
  %607 = fmul float %element594, %606
  %608 = fadd float %592, %607
  %609 = fmul float %element591, %element597
  %610 = fmul float %element596, %element592
  %611 = fsub float %609, %610
  %612 = fmul float %element585, %611
  %613 = fmul float %element586, %element597
  %614 = fmul float %element596, %element587
  %615 = fsub float %613, %614
  %616 = fmul float %element590, %615
  %617 = fsub float %612, %616
  %618 = fmul float %element586, %element592
  %619 = fmul float %element591, %element587
  %620 = fsub float %618, %619
  %621 = fmul float %element595, %620
  %622 = fadd float %617, %621
  %623 = fmul float %element599, %622
  %624 = fsub float %608, %623
  %recip603 = fdiv float 1.000000e+00, %624
  %625 = fmul float %343, %recip603
  %626 = fmul float %402, %recip603
  %627 = fmul float %459, %recip603
  %628 = fmul float %518, %recip603
  %629 = fmul float %358, %recip603
  %630 = fmul float %416, %recip603
  %631 = fmul float %474, %recip603
  %632 = fmul float %532, %recip603
  %633 = fmul float %372, %recip603
  %634 = fmul float %431, %recip603
  %635 = fmul float %488, %recip603
  %636 = fmul float %547, %recip603
  %637 = fmul float %387, %recip603
  %638 = fmul float %445, %recip603
  %639 = fmul float %503, %recip603
  %640 = fmul float %561, %recip603
  %641 = load [4 x <4 x float>]* %3
  %column604 = extractvalue [4 x <4 x float>] %641, 0
  %column605 = insertelement <4 x float> %column604, float %625, i32 0
  %column606 = insertelement <4 x float> %column605, float %629, i32 1
  %column607 = insertelement <4 x float> %column606, float %633, i32 2
  %column608 = insertelement <4 x float> %column607, float %637, i32 3
  %matrix609 = insertvalue [4 x <4 x float>] %641, <4 x float> %column608, 0
  %column610 = extractvalue [4 x <4 x float>] %matrix609, 1
  %column611 = insertelement <4 x float> %column610, float %626, i32 0
  %column612 = insertelement <4 x float> %column611, float %630, i32 1
  %column613 = insertelement <4 x float> %column612, float %634, i32 2
  %column614 = insertelement <4 x float> %column613, float %638, i32 3
  %matrix615 = insertvalue [4 x <4 x float>] %matrix609, <4 x float> %column614, 1
  %column616 = extractvalue [4 x <4 x float>] %matrix615, 2
  %column617 = insertelement <4 x float> %column616, float %627, i32 0
  %column618 = insertelement <4 x float> %column617, float %631, i32 1
  %column619 = insertelement <4 x float> %column618, float %635, i32 2
  %column620 = insertelement <4 x float> %column619, float %639, i32 3
  %matrix621 = insertvalue [4 x <4 x float>] %matrix615, <4 x float> %column620, 2
  %column622 = extractvalue [4 x <4 x float>] %matrix621, 3
  %column623 = insertelement <4 x float> %column622, float %628, i32 0
  %column624 = insertelement <4 x float> %column623, float %632, i32 1
  %column625 = insertelement <4 x float> %column624, float %636, i32 2
  %column626 = insertelement <4 x float> %column625, float %640, i32 3
  %matrix627 = insertvalue [4 x <4 x float>] %matrix621, <4 x float> %column626, 3
  store [4 x <4 x float>] %matrix627, [4 x <4 x float>]* %inv4
  %642 = load [4 x <4 x float>]* %inv4
  %643 = load <4 x float>* @FragColor
  %644 = load <4 x float>* %2
  %column628 = extractvalue [4 x <4 x float>] %642, 0
  %dotres629 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %643, <4 x float> %column628)
  %645 = insertelement <4 x float> %644, float %dotres629, i32 0
  %column630 = extractvalue [4 x <4 x float>] %642, 1
  %dotres631 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %643, <4 x float> %column630)
  %646 = insertelement <4 x float> %645, float %dotres631, i32 1
  %column632 = extractvalue [4 x <4 x float>] %642, 2
  %dotres633 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %643, <4 x float> %column632)
  %647 = insertelement <4 x float> %646, float %dotres633, i32 2
  %column634 = extractvalue [4 x <4 x float>] %642, 3
  %dotres635 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %643, <4 x float> %column634)
  %FragColor636 = insertelement <4 x float> %647, float %dotres635, i32 3
  store <4 x float> %FragColor636, <4 x float>* @FragColor
  %648 = load <4 x float>* @FragColor
  %649 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %650 = load [3 x <4 x float>] addrspace(2)* @un34, !gla.uniform !9
  %651 = load [3 x <4 x float>]* %1
  %leftColumn637 = extractvalue [3 x <4 x float>] %649, 0
  %rightColumn638 = extractvalue [3 x <4 x float>] %650, 0
  %column639 = fmul <4 x float> %leftColumn637, %rightColumn638
  %652 = insertvalue [3 x <4 x float>] %651, <4 x float> %column639, 0
  %leftColumn640 = extractvalue [3 x <4 x float>] %649, 1
  %rightColumn641 = extractvalue [3 x <4 x float>] %650, 1
  %column642 = fmul <4 x float> %leftColumn640, %rightColumn641
  %653 = insertvalue [3 x <4 x float>] %652, <4 x float> %column642, 1
  %leftColumn643 = extractvalue [3 x <4 x float>] %649, 2
  %rightColumn644 = extractvalue [3 x <4 x float>] %650, 2
  %column645 = fmul <4 x float> %leftColumn643, %rightColumn644
  %654 = insertvalue [3 x <4 x float>] %653, <4 x float> %column645, 2
  %655 = load <3 x float>* %0
  %column646 = extractvalue [3 x <4 x float>] %654, 0
  %dotres647 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %648, <4 x float> %column646)
  %656 = insertelement <3 x float> %655, float %dotres647, i32 0
  %column648 = extractvalue [3 x <4 x float>] %654, 1
  %dotres649 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %648, <4 x float> %column648)
  %657 = insertelement <3 x float> %656, float %dotres649, i32 1
  %column650 = extractvalue [3 x <4 x float>] %654, 2
  %dotres651 = call float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float> %648, <4 x float> %column650)
  %658 = insertelement <3 x float> %657, float %dotres651, i32 2
  %659 = load <4 x float>* @FragColor
  %660 = extractelement <4 x float> %659, i32 3
  %661 = load <4 x float>* %FragColor652
  %662 = extractelement <3 x float> %658, i32 0
  %663 = insertelement <4 x float> %661, float %662, i32 0
  %664 = extractelement <3 x float> %658, i32 1
  %665 = insertelement <4 x float> %663, float %664, i32 1
  %666 = extractelement <3 x float> %658, i32 2
  %667 = insertelement <4 x float> %665, float %666, i32 2
  %FragColor653 = insertelement <4 x float> %667, float %660, i32 3
  store <4 x float> %FragColor653, <4 x float>* @FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot4.f32.v4f32.v4f32(<4 x float>, <4 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7}
!gla.uniforms = !{!9, !11, !12, !13, !14, !15, !16, !17}
!gla.noStaticUse = !{!15, !16, !17}

!0 = !{!"main", i32 15}
!1 = !{!"v", i32 1, <4 x float>* @v_typeProxy, !2, !""}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"u", i32 1, <3 x float>* @u_typeProxy, !4, !""}
!4 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"Color", i32 1, <3 x float>* @Color_typeProxy, !6, !""}
!6 = !{i32 0, i32 0, i32 1027, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"FragColor", i32 7, <4 x float>* @FragColor_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"un34", i32 12, [3 x <4 x float>]* @un34_typeProxy, !10, !""}
!10 = !{i32 3, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"um43", i32 12, [4 x <3 x float>]* @um43_typeProxy, !10, !""}
!12 = !{!"um4", i32 12, [4 x <4 x float>]* @um4_typeProxy, !10, !""}
!13 = !{!"um2", i32 12, [2 x <2 x float>]* @um2_typeProxy, !10, !""}
!14 = !{!"um3", i32 12, [3 x <3 x float>]* @um3_typeProxy, !10, !""}
!15 = !{!"colorTransform", i32 12, [3 x <3 x float>]* @colorTransform_typeProxy, !10, !""}
!16 = !{!"m", i32 12, [4 x <4 x float>]* @m_typeProxy, !10, !""}
!17 = !{!"n", i32 12, [4 x <4 x float>]* @n_typeProxy, !10, !""}

Top IR:
; ModuleID = 'Glslang'

%s = type { i32, [12 x [4 x <3 x float>]] }

@us = external addrspace(2) constant %s
@i = external addrspace(2) constant i32
@am = external addrspace(2) constant [8 x [4 x <3 x float>]]
@gl_FragColor = global <4 x float> zeroinitializer
@v = global <3 x float> zeroinitializer
@m = external addrspace(2) constant [4 x <3 x float>]

define fastcc void @main() {
entry:
  %0 = alloca <4 x float>
  %1 = alloca [4 x <3 x float>]
  %ls = alloca %s
  br label %mainBody

mainBody:                                         ; preds = %entry
  %2 = load i32 addrspace(2)* @i, !gla.uniform !7
  %3 = getelementptr %s addrspace(2)* @us, i32 0, i32 1, i32 %2
  %4 = load [4 x <3 x float>] addrspace(2)* %3, !gla.uniform !1
  %5 = load [4 x <3 x float>] addrspace(2)* getelementptr inbounds ([8 x [4 x <3 x float>]] addrspace(2)* @am, i32 0, i32 4), !gla.uniform !9
  %6 = load [4 x <3 x float>]* %1
  %leftColumn = extractvalue [4 x <3 x float>] %4, 0
  %rightColumn = extractvalue [4 x <3 x float>] %5, 0
  %column = fadd <3 x float> %leftColumn, %rightColumn
  %7 = insertvalue [4 x <3 x float>] %6, <3 x float> %column, 0
  %leftColumn1 = extractvalue [4 x <3 x float>] %4, 1
  %rightColumn2 = extractvalue [4 x <3 x float>] %5, 1
  %column3 = fadd <3 x float> %leftColumn1, %rightColumn2
  %8 = insertvalue [4 x <3 x float>] %7, <3 x float> %column3, 1
  %leftColumn4 = extractvalue [4 x <3 x float>] %4, 2
  %rightColumn5 = extractvalue [4 x <3 x float>] %5, 2
  %column6 = fadd <3 x float> %leftColumn4, %rightColumn5
  %9 = insertvalue [4 x <3 x float>] %8, <3 x float> %column6, 2
  %leftColumn7 = extractvalue [4 x <3 x float>] %4, 3
  %rightColumn8 = extractvalue [4 x <3 x float>] %5, 3
  %column9 = fadd <3 x float> %leftColumn7, %rightColumn8
  %10 = insertvalue [4 x <3 x float>] %9, <3 x float> %column9, 3
  %11 = getelementptr %s* %ls, i32 0, i32 1, i32 3
  store [4 x <3 x float>] %10, [4 x <3 x float>]* %11
  %12 = load <3 x float>* @v
  %13 = getelementptr %s* %ls, i32 0, i32 1, i32 3
  %14 = load [4 x <3 x float>]* %13
  %15 = load <4 x float>* %0
  %column10 = extractvalue [4 x <3 x float>] %14, 0
  %dotres = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %12, <3 x float> %column10)
  %16 = insertelement <4 x float> %15, float %dotres, i32 0
  %column11 = extractvalue [4 x <3 x float>] %14, 1
  %dotres12 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %12, <3 x float> %column11)
  %17 = insertelement <4 x float> %16, float %dotres12, i32 1
  %column13 = extractvalue [4 x <3 x float>] %14, 2
  %dotres14 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %12, <3 x float> %column13)
  %18 = insertelement <4 x float> %17, float %dotres14, i32 2
  %column15 = extractvalue [4 x <3 x float>] %14, 3
  %dotres16 = call float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float> %12, <3 x float> %column15)
  %gl_FragColor = insertelement <4 x float> %18, float %dotres16, i32 3
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fDot3.f32.v3f32.v3f32(<3 x float>, <3 x float>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !7, !9, !11}
!gla.outputs = !{!12}
!gla.inputs = !{!14}
!gla.noStaticUse = !{!11}

!0 = !{!"main", i32 15}
!1 = !{!"us", i32 12, %s* @us_typeProxy, !2, !"s", !3, !5}
!2 = !{i32 4, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"count", i32 0, i32* @count_typeProxy, !4, !""}
!4 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"sm", i32 0, [12 x [4 x <3 x float>]]* @sm_typeProxy, !6, !""}
!6 = !{i32 3, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"i", i32 12, i32* @i_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"am", i32 12, [8 x [4 x <3 x float>]]* @am_typeProxy, !10, !""}
!10 = !{i32 3, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"m", i32 12, [4 x <3 x float>]* @m_typeProxy, !10, !""}
!12 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !13, !""}
!13 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
!14 = !{!"v", i32 1, <3 x float>* @v_typeProxy, !15, !""}
!15 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@texSampler1D = external addrspace(1) constant i32
@coords2D = global <2 x float> zeroinitializer
@texSampler2D = external addrspace(1) constant i32
@texSampler3D = external addrspace(1) constant i32
@texSamplerCube = external addrspace(1) constant i32
@shadowSampler1D = external addrspace(1) constant i32
@shadowSampler2D = external addrspace(1) constant i32
@gl_FragColor = global <4 x float> zeroinitializer
@u = external addrspace(2) constant <4 x float>
@blend = external addrspace(2) constant float
@scale = external addrspace(2) constant <2 x float>
@t = global <2 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color62 = alloca <3 x float>
  %color55 = alloca <3 x float>
  %gradY = alloca <2 x float>
  %gradX = alloca <2 x float>
  %iLod = alloca i32
  %iCoords2D = alloca <2 x i32>
  %color = alloca <4 x float>
  %coords4D = alloca <4 x float>
  %coords3D = alloca <3 x float>
  %coords1D = alloca float
  %proj = alloca float
  %lod = alloca float
  %bias = alloca float
  %blendscale = alloca float
  br label %mainBody

mainBody:                                         ; preds = %entry
  store float 0x3FFC9FBE80000000, float* %blendscale
  store float 2.000000e+00, float* %bias
  store float 3.000000e+00, float* %lod
  store float 2.000000e+00, float* %proj
  store float 0x3FFC9FBE80000000, float* %coords1D
  store <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, <3 x float>* %coords3D
  store <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>, <4 x float>* %coords4D
  store <4 x float> zeroinitializer, <4 x float>* %color
  %0 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %1 = load float* %coords1D
  %color1 = call <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32 1, i32 %0, i32 0, float %1)
  %2 = load <4 x float>* %color
  %color2 = fadd <4 x float> %2, %color1
  store <4 x float> %color2, <4 x float>* %color
  %3 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %4 = load float* %coords1D
  %5 = load float* %bias
  %color3 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %3, i32 130, float %4, float %5, float undef)
  %6 = load <4 x float>* %color
  %color4 = fadd <4 x float> %6, %color3
  store <4 x float> %color4, <4 x float>* %color
  %7 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %8 = load <2 x float>* @coords2D
  %color5 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 1, i32 %7, i32 1, <2 x float> %8)
  %9 = load <4 x float>* %color
  %color6 = fadd <4 x float> %9, %color5
  store <4 x float> %color6, <4 x float>* %color
  %10 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %11 = load <4 x float>* %coords4D
  %color7 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 1, i32 %10, i32 1, <4 x float> %11)
  %12 = load <4 x float>* %color
  %color8 = fadd <4 x float> %12, %color7
  store <4 x float> %color8, <4 x float>* %color
  %13 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %14 = load <2 x float>* @coords2D
  %15 = load float* %bias
  %color9 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 1, i32 %13, i32 131, <2 x float> %14, float %15, float undef)
  %16 = load <4 x float>* %color
  %color10 = fadd <4 x float> %16, %color9
  store <4 x float> %color10, <4 x float>* %color
  %17 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %18 = load <4 x float>* %coords4D
  %19 = load float* %bias
  %color11 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 1, i32 %17, i32 131, <4 x float> %18, float %19, float undef)
  %20 = load <4 x float>* %color
  %color12 = fadd <4 x float> %20, %color11
  store <4 x float> %color12, <4 x float>* %color
  %21 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %22 = load <2 x float>* @coords2D
  %color13 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %21, i32 0, <2 x float> %22)
  %23 = load <4 x float>* %color
  %color14 = fadd <4 x float> %23, %color13
  store <4 x float> %color14, <4 x float>* %color
  %24 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %25 = load <2 x float>* @coords2D
  %26 = load float* %bias
  %color15 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %24, i32 130, <2 x float> %25, float %26, float undef)
  %27 = load <4 x float>* %color
  %color16 = fadd <4 x float> %27, %color15
  store <4 x float> %color16, <4 x float>* %color
  %28 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %29 = load <3 x float>* %coords3D
  %color17 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 2, i32 %28, i32 1, <3 x float> %29)
  %30 = load <4 x float>* %color
  %color18 = fadd <4 x float> %30, %color17
  store <4 x float> %color18, <4 x float>* %color
  %31 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %32 = load <4 x float>* %coords4D
  %33 = load float* %bias
  %color19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 2, i32 %31, i32 131, <4 x float> %32, float %33, float undef)
  %34 = load <4 x float>* %color
  %color20 = fadd <4 x float> %34, %color19
  store <4 x float> %color20, <4 x float>* %color
  %35 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %36 = load <3 x float>* %coords3D
  %color21 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 3, i32 %35, i32 0, <3 x float> %36)
  %37 = load <4 x float>* %color
  %color22 = fadd <4 x float> %37, %color21
  store <4 x float> %color22, <4 x float>* %color
  %38 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %39 = load <3 x float>* %coords3D
  %40 = load float* %bias
  %color23 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %38, i32 130, <3 x float> %39, float %40, float undef)
  %41 = load <4 x float>* %color
  %color24 = fadd <4 x float> %41, %color23
  store <4 x float> %color24, <4 x float>* %color
  %42 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %43 = load <4 x float>* %coords4D
  %color25 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 3, i32 %42, i32 1, <4 x float> %43)
  %44 = load <4 x float>* %color
  %color26 = fadd <4 x float> %44, %color25
  store <4 x float> %color26, <4 x float>* %color
  %45 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %46 = load <4 x float>* %coords4D
  %47 = load float* %bias
  %color27 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 3, i32 %45, i32 131, <4 x float> %46, float %47, float undef)
  %48 = load <4 x float>* %color
  %color28 = fadd <4 x float> %48, %color27
  store <4 x float> %color28, <4 x float>* %color
  %49 = load i32 addrspace(1)* @texSamplerCube, !gla.uniform !10
  %50 = load <3 x float>* %coords3D
  %color29 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32 4, i32 %49, i32 0, <3 x float> %50)
  %51 = load <4 x float>* %color
  %color30 = fadd <4 x float> %51, %color29
  store <4 x float> %color30, <4 x float>* %color
  %52 = load i32 addrspace(1)* @texSamplerCube, !gla.uniform !10
  %53 = load <3 x float>* %coords3D
  %54 = load float* %bias
  %color31 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 4, i32 %52, i32 130, <3 x float> %53, float %54, float undef)
  %55 = load <4 x float>* %color
  %color32 = fadd <4 x float> %55, %color31
  store <4 x float> %color32, <4 x float>* %color
  %56 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %57 = load <3 x float>* %coords3D
  %color33 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 1, i32 %56, i32 8, <3 x float> %57, float undef, float undef)
  %58 = load <4 x float>* %color
  %color34 = fadd <4 x float> %58, %color33
  store <4 x float> %color34, <4 x float>* %color
  %59 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %60 = load <3 x float>* %coords3D
  %61 = load float* %bias
  %color35 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 1, i32 %59, i32 138, <3 x float> %60, float %61, float undef)
  %62 = load <4 x float>* %color
  %color36 = fadd <4 x float> %62, %color35
  store <4 x float> %color36, <4 x float>* %color
  %63 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %64 = load <3 x float>* %coords3D
  %color37 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 2, i32 %63, i32 8, <3 x float> %64, float undef, float undef)
  %65 = load <4 x float>* %color
  %color38 = fadd <4 x float> %65, %color37
  store <4 x float> %color38, <4 x float>* %color
  %66 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %67 = load <3 x float>* %coords3D
  %68 = load float* %bias
  %color39 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 2, i32 %66, i32 138, <3 x float> %67, float %68, float undef)
  %69 = load <4 x float>* %color
  %color40 = fadd <4 x float> %69, %color39
  store <4 x float> %color40, <4 x float>* %color
  %70 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %71 = load <4 x float>* %coords4D
  %color41 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 1, i32 %70, i32 9, <4 x float> %71, float undef, float undef)
  %72 = load <4 x float>* %color
  %color42 = fadd <4 x float> %72, %color41
  store <4 x float> %color42, <4 x float>* %color
  %73 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %74 = load <4 x float>* %coords4D
  %75 = load float* %bias
  %color43 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 1, i32 %73, i32 139, <4 x float> %74, float %75, float undef)
  %76 = load <4 x float>* %color
  %color44 = fadd <4 x float> %76, %color43
  store <4 x float> %color44, <4 x float>* %color
  %77 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %78 = load <4 x float>* %coords4D
  %color45 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 2, i32 %77, i32 9, <4 x float> %78, float undef, float undef)
  %79 = load <4 x float>* %color
  %color46 = fadd <4 x float> %79, %color45
  store <4 x float> %color46, <4 x float>* %color
  %80 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %81 = load <4 x float>* %coords4D
  %82 = load float* %bias
  %color47 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 2, i32 %80, i32 139, <4 x float> %81, float %82, float undef)
  %83 = load <4 x float>* %color
  %color48 = fadd <4 x float> %83, %color47
  store <4 x float> %color48, <4 x float>* %color
  store <2 x i32> <i32 0, i32 5>, <2 x i32>* %iCoords2D
  store i32 1, i32* %iLod
  %84 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %85 = load <2 x i32>* %iCoords2D
  %86 = load i32* %iLod
  %color49 = call <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.i32(i32 2, i32 %84, i32 164, <2 x i32> %85, i32 %86, float undef, i32 undef)
  %87 = load <4 x float>* %color
  %color50 = fadd <4 x float> %87, %color49
  store <4 x float> %color50, <4 x float>* %color
  %88 = load <2 x float>* @coords2D
  %gradX51 = call <2 x float> @llvm.gla.fDFdx.v2f32.v2f32(<2 x float> %88)
  store <2 x float> %gradX51, <2 x float>* %gradX
  %89 = load <2 x float>* @coords2D
  %gradY52 = call <2 x float> @llvm.gla.fDFdy.v2f32.v2f32(<2 x float> %89)
  store <2 x float> %gradY52, <2 x float>* %gradY
  %90 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %91 = load <2 x float>* @coords2D
  %92 = load <2 x float>* %gradX
  %93 = load <2 x float>* %gradY
  %color53 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v2f32.i32.v2f32.v2f32(i32 2, i32 %90, i32 0, <2 x float> %91, float undef, float undef, i32 undef, <2 x float> %92, <2 x float> %93)
  %94 = load <4 x float>* %color
  %color54 = fadd <4 x float> %94, %color53
  store <4 x float> %color54, <4 x float>* %color
  %95 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %96 = load <2 x float>* @coords2D
  %97 = load float* %proj
  %98 = load <3 x float>* %color55
  %99 = extractelement <2 x float> %96, i32 0
  %100 = insertelement <3 x float> %98, float %99, i32 0
  %101 = extractelement <2 x float> %96, i32 1
  %102 = insertelement <3 x float> %100, float %101, i32 1
  %103 = insertelement <3 x float> %102, float %97, i32 2
  %104 = load <2 x float>* %gradX
  %105 = load <2 x float>* %gradY
  %color56 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.i32.v2f32.v2f32(i32 2, i32 %95, i32 1, <3 x float> %103, float undef, float undef, i32 undef, <2 x float> %104, <2 x float> %105)
  %106 = load <4 x float>* %color
  %color57 = fadd <4 x float> %106, %color56
  store <4 x float> %color57, <4 x float>* %color
  %107 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %108 = load <2 x float>* @coords2D
  %109 = load <2 x float>* %gradX
  %110 = load <2 x float>* %gradY
  %color58 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v2f32.v2i32.v2f32.v2f32(i32 2, i32 %107, i32 256, <2 x float> %108, float undef, float undef, <2 x i32> <i32 3, i32 -7>, <2 x float> %109, <2 x float> %110)
  %111 = load <4 x float>* %color
  %color59 = fadd <4 x float> %111, %color58
  store <4 x float> %color59, <4 x float>* %color
  %112 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %113 = load <3 x float>* %coords3D
  %114 = load <2 x float>* %gradX
  %115 = load <2 x float>* %gradY
  %color60 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.v2i32.v2f32.v2f32(i32 2, i32 %112, i32 257, <3 x float> %113, float undef, float undef, <2 x i32> <i32 3, i32 -7>, <2 x float> %114, <2 x float> %115)
  %116 = load <4 x float>* %color
  %color61 = fadd <4 x float> %116, %color60
  store <4 x float> %color61, <4 x float>* %color
  %117 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %118 = load <2 x float>* @coords2D
  %119 = load float* %lod
  %120 = load <3 x float>* %color62
  %121 = extractelement <2 x float> %118, i32 0
  %122 = insertelement <3 x float> %120, float %121, i32 0
  %123 = extractelement <2 x float> %118, i32 1
  %124 = insertelement <3 x float> %122, float %123, i32 1
  %125 = insertelement <3 x float> %124, float %119, i32 2
  %126 = load <2 x float>* %gradX
  %127 = load <2 x float>* %gradY
  %color63 = call float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v3f32.i32.v2f32.v2f32(i32 2, i32 %117, i32 8, <3 x float> %125, float undef, float undef, i32 undef, <2 x float> %126, <2 x float> %127)
  %128 = load <4 x float>* %color
  %129 = insertelement <4 x float> undef, float %color63, i32 0
  %130 = insertelement <4 x float> %129, float %color63, i32 1
  %131 = insertelement <4 x float> %130, float %color63, i32 2
  %132 = insertelement <4 x float> %131, float %color63, i32 3
  %color64 = fadd <4 x float> %128, %132
  store <4 x float> %color64, <4 x float>* %color
  %133 = load <4 x float>* %color
  %134 = load <4 x float> addrspace(2)* @u, !gla.uniform !19
  %135 = load float addrspace(2)* @blend, !gla.uniform !21
  %136 = load float* %blendscale
  %137 = fmul float %135, %136
  %gl_FragColor = call <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float> %133, <4 x float> %134, float %137)
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.f32(i32, i32, i32, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32, i32, i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32, i32, i32, <2 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v3f32(i32, i32, i32, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.i32(i32, i32, i32, <2 x i32>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fDFdx.v2f32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fDFdy.v2f32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v2f32.i32.v2f32.v2f32(i32, i32, i32, <2 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.i32.v2f32.v2f32(i32, i32, i32, <3 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v2f32.v2i32.v2f32.v2f32(i32, i32, i32, <2 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.v2i32.v2f32.v2f32(i32, i32, i32, <3 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v3f32.i32.v2f32.v2f32(i32, i32, i32, <3 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMix.v4f32.v4f32.v4f32.f32(<4 x float>, <4 x float>, float) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !7, !10, !13, !16, !19, !21, !22}
!gla.inputs = !{!23, !25}
!gla.outputs = !{!27}
!gla.noStaticUse = !{!22, !25}

!0 = !{!"main", i32 15}
!1 = !{!"texSampler1D", i32 12, i32* @texSampler1D_typeProxy, !2, !""}
!2 = !{i32 5, i32 0, i32 1024, !3, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{i32 0, i32* @texSampler1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!4 = !{!"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, !5, !""}
!5 = !{i32 5, i32 0, i32 1024, !6, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!7 = !{!"texSampler3D", i32 12, i32* @texSampler3D_typeProxy, !8, !""}
!8 = !{i32 5, i32 0, i32 1024, !9, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{i32 0, i32* @texSampler3D_typeProxy, i32 2, i1 false, i1 false, i32 0}
!10 = !{!"texSamplerCube", i32 12, i32* @texSamplerCube_typeProxy, !11, !""}
!11 = !{i32 5, i32 0, i32 1024, !12, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{i32 0, i32* @texSamplerCube_typeProxy, i32 3, i1 false, i1 false, i32 0}
!13 = !{!"shadowSampler1D", i32 12, i32* @shadowSampler1D_typeProxy, !14, !""}
!14 = !{i32 5, i32 0, i32 1024, !15, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{i32 0, i32* @shadowSampler1D_typeProxy, i32 0, i1 false, i1 true, i32 0}
!16 = !{!"shadowSampler2D", i32 12, i32* @shadowSampler2D_typeProxy, !17, !""}
!17 = !{i32 5, i32 0, i32 1024, !18, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!18 = !{i32 0, i32* @shadowSampler2D_typeProxy, i32 1, i1 false, i1 true, i32 0}
!19 = !{!"u", i32 12, <4 x float>* @u_typeProxy, !20, !""}
!20 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!21 = !{!"blend", i32 12, float* @blend_typeProxy, !20, !""}
!22 = !{!"scale", i32 12, <2 x float>* @scale_typeProxy, !20, !""}
!23 = !{!"coords2D", i32 1, <2 x float>* @coords2D_typeProxy, !24, !""}
!24 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!25 = !{!"t", i32 1, <2 x float>* @t_typeProxy, !26, !""}
!26 = !{i32 0, i32 0, i32 1026, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!27 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !28, !""}
!28 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@texSampler1D = external addrspace(1) constant i32
@coords2D = global <2 x float> zeroinitializer
@texSampler2D = external addrspace(1) constant i32
@texSampler3D = external addrspace(1) constant i32
@texSamplerCube = external addrspace(1) constant i32
@shadowSampler1D = external addrspace(1) constant i32
@shadowSampler2D = external addrspace(1) constant i32
@gl_Position = global <4 x float> zeroinitializer
@gl_VertexID = global i32 0

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %coords4D = alloca <4 x float>
  %coords3D = alloca <3 x float>
  %coords1D = alloca float
  %lod = alloca float
  br label %mainBody

mainBody:                                         ; preds = %entry
  store float 3.000000e+00, float* %lod
  store float 0x3FFC9FBE80000000, float* %coords1D
  store <3 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000>, <3 x float>* %coords3D
  store <4 x float> <float 0x3FFC9FBE80000000, float 0x4005BE76C0000000, float 0x400B9FBE80000000, float 2.000000e+00>, <4 x float>* %coords4D
  store <4 x float> zeroinitializer, <4 x float>* %color
  %0 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %1 = load float* %coords1D
  %2 = load float* %lod
  %color1 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32 1, i32 %0, i32 132, float %1, float %2, float undef)
  %3 = load <4 x float>* %color
  %color2 = fadd <4 x float> %3, %color1
  store <4 x float> %color2, <4 x float>* %color
  %4 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %5 = load <2 x float>* @coords2D
  %6 = load float* %lod
  %color3 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 1, i32 %4, i32 133, <2 x float> %5, float %6, float undef)
  %7 = load <4 x float>* %color
  %color4 = fadd <4 x float> %7, %color3
  store <4 x float> %color4, <4 x float>* %color
  %8 = load i32 addrspace(1)* @texSampler1D, !gla.uniform !1
  %9 = load <4 x float>* %coords4D
  %10 = load float* %lod
  %color5 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 1, i32 %8, i32 133, <4 x float> %9, float %10, float undef)
  %11 = load <4 x float>* %color
  %color6 = fadd <4 x float> %11, %color5
  store <4 x float> %color6, <4 x float>* %color
  %12 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %13 = load <2 x float>* @coords2D
  %14 = load float* %lod
  %color7 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32 2, i32 %12, i32 132, <2 x float> %13, float %14, float undef)
  %15 = load <4 x float>* %color
  %color8 = fadd <4 x float> %15, %color7
  store <4 x float> %color8, <4 x float>* %color
  %16 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %17 = load <3 x float>* %coords3D
  %18 = load float* %lod
  %color9 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 2, i32 %16, i32 133, <3 x float> %17, float %18, float undef)
  %19 = load <4 x float>* %color
  %color10 = fadd <4 x float> %19, %color9
  store <4 x float> %color10, <4 x float>* %color
  %20 = load i32 addrspace(1)* @texSampler2D, !gla.uniform !4
  %21 = load <4 x float>* %coords4D
  %22 = load float* %lod
  %color11 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 2, i32 %20, i32 133, <4 x float> %21, float %22, float undef)
  %23 = load <4 x float>* %color
  %color12 = fadd <4 x float> %23, %color11
  store <4 x float> %color12, <4 x float>* %color
  %24 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %25 = load <3 x float>* %coords3D
  %26 = load float* %lod
  %color13 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 3, i32 %24, i32 132, <3 x float> %25, float %26, float undef)
  %27 = load <4 x float>* %color
  %color14 = fadd <4 x float> %27, %color13
  store <4 x float> %color14, <4 x float>* %color
  %28 = load i32 addrspace(1)* @texSampler3D, !gla.uniform !7
  %29 = load <4 x float>* %coords4D
  %30 = load float* %lod
  %color15 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 3, i32 %28, i32 133, <4 x float> %29, float %30, float undef)
  %31 = load <4 x float>* %color
  %color16 = fadd <4 x float> %31, %color15
  store <4 x float> %color16, <4 x float>* %color
  %32 = load i32 addrspace(1)* @texSamplerCube, !gla.uniform !10
  %33 = load <3 x float>* %coords3D
  %34 = load float* %lod
  %color17 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 4, i32 %32, i32 132, <3 x float> %33, float %34, float undef)
  %35 = load <4 x float>* %color
  %color18 = fadd <4 x float> %35, %color17
  store <4 x float> %color18, <4 x float>* %color
  %36 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %37 = load <3 x float>* %coords3D
  %38 = load float* %lod
  %color19 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 1, i32 %36, i32 140, <3 x float> %37, float %38, float undef)
  %39 = load <4 x float>* %color
  %color20 = fadd <4 x float> %39, %color19
  store <4 x float> %color20, <4 x float>* %color
  %40 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %41 = load <3 x float>* %coords3D
  %42 = load float* %lod
  %color21 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 2, i32 %40, i32 140, <3 x float> %41, float %42, float undef)
  %43 = load <4 x float>* %color
  %color22 = fadd <4 x float> %43, %color21
  store <4 x float> %color22, <4 x float>* %color
  %44 = load i32 addrspace(1)* @shadowSampler1D, !gla.uniform !13
  %45 = load <4 x float>* %coords4D
  %46 = load float* %lod
  %color23 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 1, i32 %44, i32 141, <4 x float> %45, float %46, float undef)
  %47 = load <4 x float>* %color
  %color24 = fadd <4 x float> %47, %color23
  store <4 x float> %color24, <4 x float>* %color
  %48 = load i32 addrspace(1)* @shadowSampler2D, !gla.uniform !16
  %49 = load <4 x float>* %coords4D
  %50 = load float* %lod
  %color25 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32 2, i32 %48, i32 141, <4 x float> %49, float %50, float undef)
  %51 = load <4 x float>* %color
  %color26 = fadd <4 x float> %51, %color25
  store <4 x float> %color26, <4 x float>* %color
  %gl_Position = load <4 x float>* %color
  store <4 x float> %gl_Position, <4 x float>* @gl_Position
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.f32(i32, i32, i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v2f32(i32, i32, i32, <2 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v4f32(i32, i32, i32, <4 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !7, !10, !13, !16}
!gla.inputs = !{!19, !21}
!gla.outputs = !{!23}
!gla.noStaticUse = !{!21}

!0 = !{!"main", i32 15}
!1 = !{!"texSampler1D", i32 12, i32* @texSampler1D_typeProxy, !2, !""}
!2 = !{i32 5, i32 0, i32 1024, !3, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{i32 0, i32* @texSampler1D_typeProxy, i32 0, i1 false, i1 false, i32 0}
!4 = !{!"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, !5, !""}
!5 = !{i32 5, i32 0, i32 1024, !6, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!7 = !{!"texSampler3D", i32 12, i32* @texSampler3D_typeProxy, !8, !""}
!8 = !{i32 5, i32 0, i32 1024, !9, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{i32 0, i32* @texSampler3D_typeProxy, i32 2, i1 false, i1 false, i32 0}
!10 = !{!"texSamplerCube", i32 12, i32* @texSamplerCube_typeProxy, !11, !""}
!11 = !{i32 5, i32 0, i32 1024, !12, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{i32 0, i32* @texSamplerCube_typeProxy, i32 3, i1 false, i1 false, i32 0}
!13 = !{!"shadowSampler1D", i32 12, i32* @shadowSampler1D_typeProxy, !14, !""}
!14 = !{i32 5, i32 0, i32 1024, !15, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{i32 0, i32* @shadowSampler1D_typeProxy, i32 0, i1 false, i1 true, i32 0}
!16 = !{!"shadowSampler2D", i32 12, i32* @shadowSampler2D_typeProxy, !17, !""}
!17 = !{i32 5, i32 0, i32 1024, !18, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!18 = !{i32 0, i32* @shadowSampler2D_typeProxy, i32 1, i1 false, i1 true, i32 0}
!19 = !{!"coords2D", i32 1, <2 x float>* @coords2D_typeProxy, !20, !""}
!20 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!21 = !{!"gl_VertexID", i32 2, i32* @gl_VertexID_typeProxy, !22, !""}
!22 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 7, i32 -1, i32 0, i32 -1}
!23 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !24, !""}
!24 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@x = global <3 x float> zeroinitializer
@y = global <3 x float> zeroinitializer
@bv = external addrspace(2) constant <3 x i1>
@iv4a = global <4 x i32> zeroinitializer
@iv4b = global <4 x i32> zeroinitializer
@imin = external addrspace(2) constant i32
@uv2x = global <2 x i32> zeroinitializer
@uv2y = global <2 x i32> zeroinitializer
@uv4y = global <4 x i32> zeroinitializer
@uy = global i32 0
@iv3a = global <3 x i32> zeroinitializer
@iv3b = global <3 x i32> zeroinitializer
@imax = external addrspace(2) constant i32
@uv2c = global <2 x i32> zeroinitializer
@umin = external addrspace(2) constant i32
@umax = external addrspace(2) constant i32
@f = global float 0.000000e+00
@v2a = global <2 x float> zeroinitializer
@v4 = global <4 x float> zeroinitializer
@v2b = global <2 x float> zeroinitializer
@result = global <4 x float> zeroinitializer
@gl_FragCoord = global <4 x float> zeroinitializer
@gl_PointCoord = global <2 x float> zeroinitializer
@gl_FragDepth = global float 0.000000e+00

define fastcc void @main() {
entry:
  %result90 = alloca <4 x float>
  %sum88 = alloca <4 x float>
  %sum86 = alloca <4 x float>
  %usum84 = alloca <4 x i32>
  %v18 = alloca <2 x float>
  %u17 = alloca i32
  %v16 = alloca <2 x float>
  %u15 = alloca i32
  %v20 = alloca <2 x float>
  %u19 = alloca i32
  %sum70 = alloca <4 x float>
  %v15 = alloca <2 x float>
  %isum62 = alloca <4 x i32>
  %i = alloca i32
  %isum58 = alloca <4 x i32>
  %b11 = alloca <4 x i1>
  %b10 = alloca <2 x i1>
  %sum52 = alloca <4 x float>
  %v13 = alloca <2 x float>
  %v12 = alloca <2 x float>
  %sum46 = alloca <4 x float>
  %sum43 = alloca <4 x float>
  %modfOut = alloca <3 x float>
  %v11 = alloca <3 x float>
  %usum36 = alloca <4 x i32>
  %u1233 = alloca <2 x i32>
  %usum27 = alloca <4 x i32>
  %u11 = alloca <2 x i32>
  %u10 = alloca <2 x i32>
  %isum19 = alloca <4 x i32>
  %i17 = alloca <3 x i32>
  %usum13 = alloca <4 x i32>
  %u = alloca <2 x i32>
  %sum2 = alloca <4 x float>
  %sum = alloca <4 x float>
  %isum = alloca <4 x i32>
  %usum = alloca <4 x i32>
  br label %mainBody

mainBody:                                         ; preds = %entry
  store <4 x i32> zeroinitializer, <4 x i32>* %usum
  store <4 x i32> zeroinitializer, <4 x i32>* %isum
  store <4 x float> zeroinitializer, <4 x float>* %sum
  %0 = load <3 x float>* @x
  %1 = load <3 x float>* @y
  %2 = load <3 x i1> addrspace(2)* @bv, !gla.uniform !35
  %sum1 = call <3 x float> @llvm.gla.fbMix.v3f32.v3f32.v3f32.v3i1(<3 x float> %0, <3 x float> %1, <3 x i1> %2), !gla.precision !47
  %3 = load <4 x float>* %sum2
  %4 = extractelement <3 x float> %sum1, i32 0, !gla.precision !47
  %5 = insertelement <4 x float> %3, float %4, i32 0, !gla.precision !47
  %6 = extractelement <3 x float> %sum1, i32 1, !gla.precision !47
  %7 = insertelement <4 x float> %5, float %6, i32 1, !gla.precision !47
  %8 = extractelement <3 x float> %sum1, i32 2, !gla.precision !47
  %9 = insertelement <4 x float> %7, float %8, i32 2, !gla.precision !47
  %10 = insertelement <4 x float> %9, float 0.000000e+00, i32 3, !gla.precision !47
  %11 = load <4 x float>* %sum
  %sum3 = fadd <4 x float> %11, %10, !gla.precision !47
  store <4 x float> %sum3, <4 x float>* %sum
  %12 = load <4 x i32>* @iv4a
  %isum4 = call <4 x i32> @llvm.gla.abs.v4i32.v4i32(<4 x i32> %12), !gla.precision !47
  store <4 x i32> %isum4, <4 x i32>* %isum
  %13 = load <4 x i32>* @iv4a
  %isum5 = call <4 x i32> @llvm.gla.sign.v4i32.v4i32(<4 x i32> %13), !gla.precision !47
  %14 = load <4 x i32>* %isum
  %isum6 = add <4 x i32> %14, %isum5, !gla.precision !47
  store <4 x i32> %isum6, <4 x i32>* %isum
  %15 = load <4 x i32>* @iv4a
  %16 = load <4 x i32>* @iv4b
  %isum7 = call <4 x i32> @llvm.gla.sMin.v4i32.v4i32.v4i32(<4 x i32> %15, <4 x i32> %16), !gla.precision !47
  %17 = load <4 x i32>* %isum
  %isum8 = add <4 x i32> %17, %isum7, !gla.precision !47
  store <4 x i32> %isum8, <4 x i32>* %isum
  %18 = load <4 x i32>* @iv4a
  %19 = load i32 addrspace(2)* @imin, !gla.uniform !37
  %isum9 = call <4 x i32> @llvm.gla.sMin.v4i32.v4i32.i32(<4 x i32> %18, i32 %19), !gla.precision !47
  %20 = load <4 x i32>* %isum
  %isum10 = add <4 x i32> %20, %isum9, !gla.precision !47
  store <4 x i32> %isum10, <4 x i32>* %isum
  %21 = load <2 x i32>* @uv2x
  %22 = load <2 x i32>* @uv2y
  %u12 = call <2 x i32> @llvm.gla.uMin.v2i32.v2i32.v2i32(<2 x i32> %21, <2 x i32> %22), !gla.precision !47
  store <2 x i32> %u12, <2 x i32>* %u
  %23 = load <2 x i32>* %u
  %24 = load <4 x i32>* %usum13
  %25 = extractelement <2 x i32> %23, i32 0, !gla.precision !47
  %26 = insertelement <4 x i32> %24, i32 %25, i32 0, !gla.precision !47
  %27 = extractelement <2 x i32> %23, i32 1, !gla.precision !47
  %28 = insertelement <4 x i32> %26, i32 %27, i32 1, !gla.precision !47
  %29 = insertelement <4 x i32> %28, i32 0, i32 2, !gla.precision !47
  %30 = insertelement <4 x i32> %29, i32 0, i32 3, !gla.precision !47
  %31 = load <4 x i32>* %usum
  %usum14 = add <4 x i32> %31, %30, !gla.precision !47
  store <4 x i32> %usum14, <4 x i32>* %usum
  %32 = load <4 x i32>* @uv4y
  %33 = load i32* @uy
  %usum15 = call <4 x i32> @llvm.gla.uMin.v4i32.v4i32.i32(<4 x i32> %32, i32 %33), !gla.precision !47
  %34 = load <4 x i32>* %usum
  %usum16 = add <4 x i32> %34, %usum15, !gla.precision !47
  store <4 x i32> %usum16, <4 x i32>* %usum
  %35 = load <3 x i32>* @iv3a
  %36 = load <3 x i32>* @iv3b
  %i1718 = call <3 x i32> @llvm.gla.sMax.v3i32.v3i32.v3i32(<3 x i32> %35, <3 x i32> %36), !gla.precision !47
  store <3 x i32> %i1718, <3 x i32>* %i17
  %37 = load <3 x i32>* %i17
  %38 = load <4 x i32>* %isum19
  %39 = extractelement <3 x i32> %37, i32 0, !gla.precision !47
  %40 = insertelement <4 x i32> %38, i32 %39, i32 0, !gla.precision !47
  %41 = extractelement <3 x i32> %37, i32 1, !gla.precision !47
  %42 = insertelement <4 x i32> %40, i32 %41, i32 1, !gla.precision !47
  %43 = extractelement <3 x i32> %37, i32 2, !gla.precision !47
  %44 = insertelement <4 x i32> %42, i32 %43, i32 2, !gla.precision !47
  %45 = insertelement <4 x i32> %44, i32 0, i32 3, !gla.precision !47
  %46 = load <4 x i32>* %isum
  %isum20 = add <4 x i32> %46, %45, !gla.precision !47
  store <4 x i32> %isum20, <4 x i32>* %isum
  %47 = load <4 x i32>* @iv4a
  %48 = load i32 addrspace(2)* @imax, !gla.uniform !39
  %isum21 = call <4 x i32> @llvm.gla.sMax.v4i32.v4i32.i32(<4 x i32> %47, i32 %48), !gla.precision !47
  %49 = load <4 x i32>* %isum
  %isum22 = add <4 x i32> %49, %isum21, !gla.precision !47
  store <4 x i32> %isum22, <4 x i32>* %isum
  %50 = load <2 x i32>* @uv2x
  %51 = load <2 x i32>* @uv2y
  %u1024 = call <2 x i32> @llvm.gla.uMax.v2i32.v2i32.v2i32(<2 x i32> %50, <2 x i32> %51), !gla.precision !47
  store <2 x i32> %u1024, <2 x i32>* %u10
  %52 = load <2 x i32>* @uv2x
  %53 = load i32* @uy
  %u1126 = call <2 x i32> @llvm.gla.uMax.v2i32.v2i32.i32(<2 x i32> %52, i32 %53), !gla.precision !47
  store <2 x i32> %u1126, <2 x i32>* %u11
  %54 = load <2 x i32>* %u10
  %55 = load <2 x i32>* %u11
  %56 = load <4 x i32>* %usum27
  %57 = extractelement <2 x i32> %54, i32 0, !gla.precision !47
  %58 = insertelement <4 x i32> %56, i32 %57, i32 0, !gla.precision !47
  %59 = extractelement <2 x i32> %54, i32 1, !gla.precision !47
  %60 = insertelement <4 x i32> %58, i32 %59, i32 1, !gla.precision !47
  %61 = extractelement <2 x i32> %55, i32 0, !gla.precision !47
  %62 = insertelement <4 x i32> %60, i32 %61, i32 2, !gla.precision !47
  %63 = extractelement <2 x i32> %55, i32 1, !gla.precision !47
  %64 = insertelement <4 x i32> %62, i32 %63, i32 3, !gla.precision !47
  %65 = load <4 x i32>* %usum
  %usum28 = add <4 x i32> %65, %64, !gla.precision !47
  store <4 x i32> %usum28, <4 x i32>* %usum
  %66 = load <4 x i32>* @iv4a
  %67 = load <4 x i32>* @iv4a
  %68 = load <4 x i32>* @iv4b
  %isum29 = call <4 x i32> @llvm.gla.sClamp.v4i32.v4i32.v4i32.v4i32(<4 x i32> %66, <4 x i32> %67, <4 x i32> %68), !gla.precision !47
  %69 = load <4 x i32>* %isum
  %isum30 = add <4 x i32> %69, %isum29, !gla.precision !47
  store <4 x i32> %isum30, <4 x i32>* %isum
  %70 = load <4 x i32>* @iv4a
  %71 = load i32 addrspace(2)* @imin, !gla.uniform !37
  %72 = load i32 addrspace(2)* @imax, !gla.uniform !39
  %isum31 = call <4 x i32> @llvm.gla.sClamp.v4i32.v4i32.i32.i32(<4 x i32> %70, i32 %71, i32 %72), !gla.precision !47
  %73 = load <4 x i32>* %isum
  %isum32 = add <4 x i32> %73, %isum31, !gla.precision !47
  store <4 x i32> %isum32, <4 x i32>* %isum
  %74 = load <2 x i32>* @uv2x
  %75 = load <2 x i32>* @uv2y
  %76 = load <2 x i32>* @uv2c
  %u123335 = call <2 x i32> @llvm.gla.uClamp.v2i32.v2i32.v2i32.v2i32(<2 x i32> %74, <2 x i32> %75, <2 x i32> %76), !gla.precision !47
  store <2 x i32> %u123335, <2 x i32>* %u1233
  %77 = load <2 x i32>* %u1233
  %78 = load <4 x i32>* %usum36
  %79 = extractelement <2 x i32> %77, i32 0, !gla.precision !47
  %80 = insertelement <4 x i32> %78, i32 %79, i32 0, !gla.precision !47
  %81 = extractelement <2 x i32> %77, i32 1, !gla.precision !47
  %82 = insertelement <4 x i32> %80, i32 %81, i32 1, !gla.precision !47
  %83 = insertelement <4 x i32> %82, i32 0, i32 2, !gla.precision !47
  %84 = insertelement <4 x i32> %83, i32 0, i32 3, !gla.precision !47
  %85 = load <4 x i32>* %usum
  %usum37 = add <4 x i32> %85, %84, !gla.precision !47
  store <4 x i32> %usum37, <4 x i32>* %usum
  %86 = load <4 x i32>* @uv4y
  %87 = load i32 addrspace(2)* @umin, !gla.uniform !40
  %88 = load i32 addrspace(2)* @umax, !gla.uniform !42
  %usum38 = call <4 x i32> @llvm.gla.uClamp.v4i32.v4i32.i32.i32(<4 x i32> %86, i32 %87, i32 %88), !gla.precision !47
  %89 = load <4 x i32>* %usum
  %usum39 = add <4 x i32> %89, %usum38, !gla.precision !47
  store <4 x i32> %usum39, <4 x i32>* %usum
  %90 = load <3 x float>* @x
  %v1140 = call { <3 x float>, <3 x float> } @llvm.gla.fModF.v3f32.v3f32.v3f32(<3 x float> %90), !gla.precision !47
  %modfOut41 = extractvalue { <3 x float>, <3 x float> } %v1140, 1
  store <3 x float> %modfOut41, <3 x float>* %modfOut
  %v1142 = extractvalue { <3 x float>, <3 x float> } %v1140, 0
  store <3 x float> %v1142, <3 x float>* %v11
  %91 = load <3 x float>* %v11
  %92 = load <3 x float>* %modfOut
  %93 = load <4 x float>* %sum43
  %94 = extractelement <3 x float> %91, i32 0, !gla.precision !47
  %95 = insertelement <4 x float> %93, float %94, i32 0, !gla.precision !47
  %96 = extractelement <3 x float> %91, i32 1, !gla.precision !47
  %97 = insertelement <4 x float> %95, float %96, i32 1, !gla.precision !47
  %98 = extractelement <3 x float> %91, i32 2, !gla.precision !47
  %99 = insertelement <4 x float> %97, float %98, i32 2, !gla.precision !47
  %100 = extractelement <3 x float> %92, i32 0, !gla.precision !47
  %101 = insertelement <4 x float> %99, float %100, i32 3, !gla.precision !47
  %102 = load <4 x float>* %sum
  %sum44 = fadd <4 x float> %102, %101, !gla.precision !47
  store <4 x float> %sum44, <4 x float>* %sum
  %103 = load float* @f
  %sum45 = call float @llvm.gla.fRoundZero.f32.f32(float %103), !gla.precision !47
  %104 = load <4 x float>* %sum46
  %105 = insertelement <4 x float> undef, float %sum45, i32 0, !gla.precision !47
  %106 = insertelement <4 x float> %105, float %sum45, i32 1, !gla.precision !47
  %107 = insertelement <4 x float> %106, float %sum45, i32 2, !gla.precision !47
  %108 = insertelement <4 x float> %107, float %sum45, i32 3, !gla.precision !47
  %109 = load <4 x float>* %sum
  %sum47 = fadd <4 x float> %109, %108, !gla.precision !47
  store <4 x float> %sum47, <4 x float>* %sum
  %110 = load <2 x float>* @v2a
  %v1249 = call <2 x float> @llvm.gla.fRoundFast.v2f32.v2f32(<2 x float> %110), !gla.precision !47
  store <2 x float> %v1249, <2 x float>* %v12
  %111 = load <2 x float>* @v2a
  %v1351 = call <2 x float> @llvm.gla.fRoundEven.v2f32.v2f32(<2 x float> %111), !gla.precision !47
  store <2 x float> %v1351, <2 x float>* %v13
  %112 = load <2 x float>* %v12
  %113 = load <2 x float>* %v13
  %114 = load <4 x float>* %sum52
  %115 = extractelement <2 x float> %112, i32 0, !gla.precision !47
  %116 = insertelement <4 x float> %114, float %115, i32 0, !gla.precision !47
  %117 = extractelement <2 x float> %112, i32 1, !gla.precision !47
  %118 = insertelement <4 x float> %116, float %117, i32 1, !gla.precision !47
  %119 = extractelement <2 x float> %113, i32 0, !gla.precision !47
  %120 = insertelement <4 x float> %118, float %119, i32 2, !gla.precision !47
  %121 = extractelement <2 x float> %113, i32 1, !gla.precision !47
  %122 = insertelement <4 x float> %120, float %121, i32 3, !gla.precision !47
  %123 = load <4 x float>* %sum
  %sum53 = fadd <4 x float> %123, %122, !gla.precision !47
  store <4 x float> %sum53, <4 x float>* %sum
  %124 = load <2 x float>* @v2a
  %b1055 = call <2 x i1> @llvm.gla.fIsNan.v2i1.v2f32(<2 x float> %124)
  store <2 x i1> %b1055, <2 x i1>* %b10
  %125 = load <4 x float>* @v4
  %b1157 = call <4 x i1> @llvm.gla.fIsInf.v4i1.v4f32(<4 x float> %125)
  store <4 x i1> %b1157, <4 x i1>* %b11
  %126 = load <2 x i1>* %b10
  %127 = zext <2 x i1> %126 to <2 x i32>, !gla.precision !47
  %128 = load <4 x i1>* %b11
  %129 = zext <4 x i1> %128 to <4 x i32>, !gla.precision !47
  %130 = load <4 x i32>* %isum58
  %131 = extractelement <2 x i32> %127, i32 0, !gla.precision !47
  %132 = insertelement <4 x i32> %130, i32 %131, i32 0, !gla.precision !47
  %133 = extractelement <2 x i32> %127, i32 1, !gla.precision !47
  %134 = insertelement <4 x i32> %132, i32 %133, i32 1, !gla.precision !47
  %135 = extractelement <4 x i32> %129, i32 0, !gla.precision !47
  %136 = insertelement <4 x i32> %134, i32 %135, i32 2, !gla.precision !47
  %137 = extractelement <4 x i32> %129, i32 1, !gla.precision !47
  %138 = insertelement <4 x i32> %136, i32 %137, i32 3, !gla.precision !47
  %139 = load <4 x i32>* %isum
  %isum59 = add <4 x i32> %139, %138, !gla.precision !47
  store <4 x i32> %isum59, <4 x i32>* %isum
  %140 = load float* @f
  %i61 = call i32 @llvm.gla.fFloatBitsToInt.i32.f32(float %140), !gla.precision !48
  store i32 %i61, i32* %i
  %141 = load i32* %i
  %142 = load <4 x i32>* %isum62
  %143 = insertelement <4 x i32> undef, i32 %141, i32 0, !gla.precision !47
  %144 = insertelement <4 x i32> %143, i32 %141, i32 1, !gla.precision !47
  %145 = insertelement <4 x i32> %144, i32 %141, i32 2, !gla.precision !47
  %146 = insertelement <4 x i32> %145, i32 %141, i32 3, !gla.precision !47
  %147 = load <4 x i32>* %isum
  %isum63 = add <4 x i32> %147, %146, !gla.precision !47
  store <4 x i32> %isum63, <4 x i32>* %isum
  %148 = load <4 x float>* @v4
  %usum64 = call <4 x i32> @llvm.gla.fFloatBitsToInt.v4i32.v4f32(<4 x float> %148), !gla.precision !48
  %149 = load <4 x i32>* %usum
  %usum65 = add <4 x i32> %149, %usum64, !gla.precision !48
  store <4 x i32> %usum65, <4 x i32>* %usum
  %150 = load <4 x i32>* @iv4a
  %sum66 = call <4 x float> @llvm.gla.fIntBitsTofloat.v4f32.v4i32(<4 x i32> %150), !gla.precision !48
  %151 = load <4 x float>* %sum
  %sum67 = fadd <4 x float> %151, %sum66, !gla.precision !48
  store <4 x float> %sum67, <4 x float>* %sum
  %152 = load <2 x i32>* @uv2c
  %v1569 = call <2 x float> @llvm.gla.fIntBitsTofloat.v2f32.v2i32(<2 x i32> %152), !gla.precision !48
  store <2 x float> %v1569, <2 x float>* %v15
  %153 = load <2 x float>* %v15
  %154 = load <4 x float>* %sum70
  %155 = extractelement <2 x float> %153, i32 0, !gla.precision !47
  %156 = insertelement <4 x float> %154, float %155, i32 0, !gla.precision !47
  %157 = extractelement <2 x float> %153, i32 1, !gla.precision !47
  %158 = insertelement <4 x float> %156, float %157, i32 1, !gla.precision !47
  %159 = insertelement <4 x float> %158, float 0.000000e+00, i32 2, !gla.precision !47
  %160 = insertelement <4 x float> %159, float 0.000000e+00, i32 3, !gla.precision !47
  %161 = load <4 x float>* %sum
  %sum71 = fadd <4 x float> %161, %160, !gla.precision !47
  store <4 x float> %sum71, <4 x float>* %sum
  %162 = load <2 x float>* @v2a
  %u1973 = call i32 @llvm.gla.fPackSnorm2x16.i32.v2f32(<2 x float> %162), !gla.precision !48
  store i32 %u1973, i32* %u19
  %163 = load i32* @uy
  %v2075 = call <2 x float> @llvm.gla.fUnpackSnorm2x16.v2f32.i32(i32 %163), !gla.precision !48
  store <2 x float> %v2075, <2 x float>* %v20
  %164 = load <2 x float>* @v2a
  %u1577 = call i32 @llvm.gla.fPackUnorm2x16.i32.v2f32(<2 x float> %164), !gla.precision !48
  store i32 %u1577, i32* %u15
  %165 = load i32* @uy
  %v1679 = call <2 x float> @llvm.gla.fUnpackUnorm2x16.v2f32.i32(i32 %165), !gla.precision !48
  store <2 x float> %v1679, <2 x float>* %v16
  %166 = load <2 x float>* @v2b
  %u1781 = call i32 @llvm.gla.fPackHalf2x16.i32.v2f32(<2 x float> %166), !gla.precision !48
  store i32 %u1781, i32* %u17
  %167 = load i32* @uy
  %v1883 = call <2 x float> @llvm.gla.fUnpackHalf2x16.v2f32.i32(i32 %167), !gla.precision !47
  store <2 x float> %v1883, <2 x float>* %v18
  %168 = load i32* %u19
  %169 = load i32* %u15
  %170 = load i32* %u17
  %171 = load <4 x i32>* %usum84
  %172 = insertelement <4 x i32> %171, i32 %168, i32 0, !gla.precision !47
  %173 = insertelement <4 x i32> %172, i32 %169, i32 1, !gla.precision !47
  %174 = insertelement <4 x i32> %173, i32 %170, i32 2, !gla.precision !47
  %175 = insertelement <4 x i32> %174, i32 0, i32 3, !gla.precision !47
  %176 = load <4 x i32>* %usum
  %usum85 = add <4 x i32> %176, %175, !gla.precision !47
  store <4 x i32> %usum85, <4 x i32>* %usum
  %177 = load <2 x float>* %v20
  %178 = load <2 x float>* %v16
  %179 = load <4 x float>* %sum86
  %180 = extractelement <2 x float> %177, i32 0, !gla.precision !47
  %181 = insertelement <4 x float> %179, float %180, i32 0, !gla.precision !47
  %182 = extractelement <2 x float> %177, i32 1, !gla.precision !47
  %183 = insertelement <4 x float> %181, float %182, i32 1, !gla.precision !47
  %184 = extractelement <2 x float> %178, i32 0, !gla.precision !47
  %185 = insertelement <4 x float> %183, float %184, i32 2, !gla.precision !47
  %186 = extractelement <2 x float> %178, i32 1, !gla.precision !47
  %187 = insertelement <4 x float> %185, float %186, i32 3, !gla.precision !47
  %188 = load <4 x float>* %sum
  %sum87 = fadd <4 x float> %188, %187, !gla.precision !47
  store <4 x float> %sum87, <4 x float>* %sum
  %189 = load <2 x float>* %v18
  %190 = load <4 x float>* %sum88
  %191 = extractelement <2 x float> %189, i32 0, !gla.precision !47
  %192 = insertelement <4 x float> %190, float %191, i32 0, !gla.precision !47
  %193 = extractelement <2 x float> %189, i32 1, !gla.precision !47
  %194 = insertelement <4 x float> %192, float %193, i32 1, !gla.precision !47
  %195 = insertelement <4 x float> %194, float 0.000000e+00, i32 2, !gla.precision !47
  %196 = insertelement <4 x float> %195, float 0.000000e+00, i32 3, !gla.precision !47
  %197 = load <4 x float>* %sum
  %sum89 = fadd <4 x float> %197, %196, !gla.precision !47
  store <4 x float> %sum89, <4 x float>* %sum
  %198 = load <4 x float>* %sum
  %199 = load <4 x i32>* %isum
  %200 = sitofp <4 x i32> %199 to <4 x float>, !gla.precision !47
  %201 = fadd <4 x float> %198, %200, !gla.precision !47
  %202 = load <4 x i32>* %usum
  %203 = uitofp <4 x i32> %202 to <4 x float>, !gla.precision !47
  %result = fadd <4 x float> %201, %203, !gla.precision !47
  store <4 x float> %result, <4 x float>* @result
  %204 = load <4 x float>* @gl_FragCoord
  %205 = load <2 x float>* @gl_PointCoord
  %206 = load <2 x float>* @gl_PointCoord
  %207 = fmul <2 x float> <float 2.000000e+00, float 2.000000e+00>, %206, !gla.precision !47
  %208 = load <4 x float>* %result90
  %209 = extractelement <2 x float> %205, i32 0, !gla.precision !48
  %210 = insertelement <4 x float> %208, float %209, i32 0, !gla.precision !48
  %211 = extractelement <2 x float> %205, i32 1, !gla.precision !48
  %212 = insertelement <4 x float> %210, float %211, i32 1, !gla.precision !48
  %213 = extractelement <2 x float> %207, i32 0, !gla.precision !48
  %214 = insertelement <4 x float> %212, float %213, i32 2, !gla.precision !48
  %215 = extractelement <2 x float> %207, i32 1, !gla.precision !48
  %216 = insertelement <4 x float> %214, float %215, i32 3, !gla.precision !48
  %217 = fadd <4 x float> %204, %216, !gla.precision !48
  %218 = load <4 x float>* @result
  %result91 = fadd <4 x float> %218, %217, !gla.precision !48
  store <4 x float> %result91, <4 x float>* @result
  %gl_FragDepth = load float* @f
  store float %gl_FragDepth, float* @gl_FragDepth
  %219 = load float* @gl_FragDepth
  %gl_FragDepth92 = fadd float %219, 0x3FB99999A0000000, !gla.precision !48
  store float %gl_FragDepth92, float* @gl_FragDepth
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fbMix.v3f32.v3f32.v3f32.v3i1(<3 x float>, <3 x float>, <3 x i1>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.abs.v4i32.v4i32(<4 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sign.v4i32.v4i32(<4 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sMin.v4i32.v4i32.v4i32(<4 x i32>, <4 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sMin.v4i32.v4i32.i32(<4 x i32>, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.uMin.v2i32.v2i32.v2i32(<2 x i32>, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.uMin.v4i32.v4i32.i32(<4 x i32>, i32) #0

; Function Attrs: nounwind readnone
declare <3 x i32> @llvm.gla.sMax.v3i32.v3i32.v3i32(<3 x i32>, <3 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sMax.v4i32.v4i32.i32(<4 x i32>, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.uMax.v2i32.v2i32.v2i32(<2 x i32>, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.uMax.v2i32.v2i32.i32(<2 x i32>, i32) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sClamp.v4i32.v4i32.v4i32.v4i32(<4 x i32>, <4 x i32>, <4 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.sClamp.v4i32.v4i32.i32.i32(<4 x i32>, i32, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.uClamp.v2i32.v2i32.v2i32.v2i32(<2 x i32>, <2 x i32>, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.uClamp.v4i32.v4i32.i32.i32(<4 x i32>, i32, i32) #0

; Function Attrs: nounwind readnone
declare { <3 x float>, <3 x float> } @llvm.gla.fModF.v3f32.v3f32.v3f32(<3 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fRoundZero.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fRoundFast.v2f32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fRoundEven.v2f32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x i1> @llvm.gla.fIsNan.v2i1.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i1> @llvm.gla.fIsInf.v4i1.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.fFloatBitsToInt.i32.f32(float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.fFloatBitsToInt.v4i32.v4f32(<4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fIntBitsTofloat.v4f32.v4i32(<4 x i32>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fIntBitsTofloat.v2f32.v2i32(<2 x i32>) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.fPackSnorm2x16.i32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fUnpackSnorm2x16.v2f32.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.fPackUnorm2x16.i32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fUnpackUnorm2x16.v2f32.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @llvm.gla.fPackHalf2x16.i32.v2f32(<2 x float>) #0

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.gla.fUnpackHalf2x16.v2f32.i32(i32) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5, !7, !9, !11, !13, !15, !17, !19, !21, !23, !25, !27, !29, !31, !33}
!gla.uniforms = !{!35, !37, !39, !40, !42}
!gla.outputs = !{!43, !45}

!0 = !{!"main", i32 15}
!1 = !{!"x", i32 1, <3 x float>* @x_typeProxy, !2, !""}
!2 = !{i32 0, i32 2, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"y", i32 1, <3 x float>* @y_typeProxy, !4, !""}
!4 = !{i32 0, i32 2, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"iv4a", i32 1, <4 x i32>* @iv4a_typeProxy, !6, !""}
!6 = !{i32 0, i32 2, i32 1026, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"iv4b", i32 1, <4 x i32>* @iv4b_typeProxy, !8, !""}
!8 = !{i32 0, i32 2, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"uv2x", i32 1, <2 x i32>* @uv2x_typeProxy, !10, !""}
!10 = !{i32 1, i32 2, i32 1028, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"uv2y", i32 1, <2 x i32>* @uv2y_typeProxy, !12, !""}
!12 = !{i32 1, i32 2, i32 1029, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!13 = !{!"uv4y", i32 1, <4 x i32>* @uv4y_typeProxy, !14, !""}
!14 = !{i32 1, i32 2, i32 1030, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{!"uy", i32 1, i32* @uy_typeProxy, !16, !""}
!16 = !{i32 1, i32 2, i32 1031, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!17 = !{!"iv3a", i32 1, <3 x i32>* @iv3a_typeProxy, !18, !""}
!18 = !{i32 0, i32 2, i32 1032, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!19 = !{!"iv3b", i32 1, <3 x i32>* @iv3b_typeProxy, !20, !""}
!20 = !{i32 0, i32 2, i32 1033, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!21 = !{!"uv2c", i32 1, <2 x i32>* @uv2c_typeProxy, !22, !""}
!22 = !{i32 1, i32 2, i32 1034, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!23 = !{!"f", i32 1, float* @f_typeProxy, !24, !""}
!24 = !{i32 0, i32 2, i32 1035, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!25 = !{!"v2a", i32 1, <2 x float>* @v2a_typeProxy, !26, !""}
!26 = !{i32 0, i32 2, i32 1036, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!27 = !{!"v4", i32 1, <4 x float>* @v4_typeProxy, !28, !""}
!28 = !{i32 0, i32 2, i32 1037, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!29 = !{!"v2b", i32 1, <2 x float>* @v2b_typeProxy, !30, !""}
!30 = !{i32 0, i32 2, i32 1038, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!31 = !{!"gl_FragCoord", i32 5, <4 x float>* @gl_FragCoord_typeProxy, !32, !""}
!32 = !{i32 0, i32 3, i32 1040, null, i32 0, i32 41, i32 -1, i32 0, i32 -1}
!33 = !{!"gl_PointCoord", i32 6, <2 x float>* @gl_PointCoord_typeProxy, !34, !""}
!34 = !{i32 0, i32 2, i32 1041, null, i32 0, i32 42, i32 -1, i32 0, i32 -1}
!35 = !{!"bv", i32 12, <3 x i1>* @bv_typeProxy, !36, !""}
!36 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!37 = !{!"imin", i32 12, i32* @imin_typeProxy, !38, !""}
!38 = !{i32 0, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!39 = !{!"imax", i32 12, i32* @imax_typeProxy, !38, !""}
!40 = !{!"umin", i32 12, i32* @umin_typeProxy, !41, !""}
!41 = !{i32 1, i32 2, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!42 = !{!"umax", i32 12, i32* @umax_typeProxy, !41, !""}
!43 = !{!"result", i32 7, <4 x float>* @result_typeProxy, !44, !""}
!44 = !{i32 0, i32 2, i32 1039, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!45 = !{!"gl_FragDepth", i32 11, float* @gl_FragDepth_typeProxy, !46, !""}
!46 = !{i32 0, i32 3, i32 1042, null, i32 0, i32 45, i32 -1, i32 0, i32 -1}
!47 = !{i32 2}
!48 = !{i32 3}

Top IR:
; ModuleID = 'Glslang'

@gl_VertexID = global i32 0
@gl_Position = global <4 x float> zeroinitializer
@ps = global float 0.000000e+00
@gl_PointSize = global float 0.000000e+00
@gl_InstanceID = global i32 0

define fastcc void @main() {
entry:
  %gl_Position = alloca <4 x float>
  %j = alloca i32
  %i = alloca i32
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load i32* @gl_VertexID
  %1 = mul i32 4, %0, !gla.precision !11
  %i1 = sub i32 %1, 10, !gla.precision !11
  store i32 %i1, i32* %i
  %2 = load i32* @gl_VertexID
  %3 = mul i32 4, %2, !gla.precision !11
  %j2 = sub i32 %3, 10, !gla.precision !11
  store i32 %j2, i32* %j
  %4 = load float* @ps
  %5 = load <4 x float>* %gl_Position
  %6 = insertelement <4 x float> undef, float %4, i32 0, !gla.precision !11
  %7 = insertelement <4 x float> %6, float %4, i32 1, !gla.precision !11
  %8 = insertelement <4 x float> %7, float %4, i32 2, !gla.precision !11
  %gl_Position3 = insertelement <4 x float> %8, float %4, i32 3, !gla.precision !11
  store <4 x float> %gl_Position3, <4 x float>* @gl_Position
  %9 = load i32* %i
  %10 = sitofp i32 %9 to float, !gla.precision !11
  %11 = load <4 x float>* @gl_Position
  %12 = insertelement <4 x float> undef, float %10, i32 0, !gla.precision !11
  %13 = insertelement <4 x float> %12, float %10, i32 1, !gla.precision !11
  %14 = insertelement <4 x float> %13, float %10, i32 2, !gla.precision !11
  %15 = insertelement <4 x float> %14, float %10, i32 3, !gla.precision !11
  %gl_Position4 = fmul <4 x float> %11, %15, !gla.precision !11
  store <4 x float> %gl_Position4, <4 x float>* @gl_Position
  %gl_PointSize = load float* @ps
  store float %gl_PointSize, float* @gl_PointSize
  %16 = load i32* %j
  %17 = sitofp i32 %16 to float, !gla.precision !11
  %18 = load float* @gl_PointSize
  %gl_PointSize5 = fmul float %18, %17, !gla.precision !11
  store float %gl_PointSize5, float* @gl_PointSize
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3, !5}
!gla.outputs = !{!7, !9}
!gla.invariant = !{!7}
!gla.noStaticUse = !{!5}

!0 = !{!"main", i32 15}
!1 = !{!"gl_VertexID", i32 2, i32* @gl_VertexID_typeProxy, !2, !""}
!2 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 7, i32 -1, i32 0, i32 -1}
!3 = !{!"ps", i32 1, float* @ps_typeProxy, !4, !""}
!4 = !{i32 0, i32 2, i32 1026, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"gl_InstanceID", i32 3, i32* @gl_InstanceID_typeProxy, !6, !""}
!6 = !{i32 0, i32 3, i32 1028, null, i32 0, i32 8, i32 -1, i32 0, i32 -1}
!7 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !8, !""}
!8 = !{i32 0, i32 3, i32 1025, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!9 = !{!"gl_PointSize", i32 9, float* @gl_PointSize_typeProxy, !10, !""}
!10 = !{i32 0, i32 3, i32 1027, null, i32 0, i32 10, i32 -1, i32 0, i32 -1}
!11 = !{i32 3}

Top IR:
; ModuleID = 'Glslang'

@color = external addrspace(2) constant [6 x <4 x float>]
@inColor = external addrspace(2) constant <3 x float>
@alpha = external addrspace(2) constant [16 x float]
@gl_FragColor = global <4 x float> zeroinitializer
@texSampler2D = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %texColor = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load <4 x float> addrspace(2)* getelementptr inbounds ([6 x <4 x float>] addrspace(2)* @color, i32 0, i32 1), !gla.uniform !1
  %1 = load <4 x float> addrspace(2)* getelementptr inbounds ([6 x <4 x float>] addrspace(2)* @color, i32 0, i32 1), !gla.uniform !1
  %texColor1 = fadd <4 x float> %0, %1
  store <4 x float> %texColor1, <4 x float>* %texColor
  %2 = load <3 x float> addrspace(2)* @inColor, !gla.uniform !3
  %3 = load <4 x float>* %texColor
  %4 = extractelement <4 x float> %3, i32 0
  %5 = insertelement <3 x float> undef, float %4, i32 0
  %6 = extractelement <4 x float> %3, i32 1
  %7 = insertelement <3 x float> %5, float %6, i32 1
  %8 = extractelement <4 x float> %3, i32 2
  %9 = insertelement <3 x float> %7, float %8, i32 2
  %10 = fadd <3 x float> %9, %2
  %11 = extractelement <3 x float> %10, i32 0
  %12 = getelementptr <4 x float>* %texColor, i32 0, i32 0
  store float %11, float* %12
  %13 = extractelement <3 x float> %10, i32 1
  %14 = getelementptr <4 x float>* %texColor, i32 0, i32 1
  store float %13, float* %14
  %15 = extractelement <3 x float> %10, i32 2
  %16 = getelementptr <4 x float>* %texColor, i32 0, i32 2
  store float %15, float* %16
  %17 = load float addrspace(2)* getelementptr inbounds ([16 x float] addrspace(2)* @alpha, i32 0, i32 12), !gla.uniform !4
  %18 = load <4 x float>* %texColor
  %19 = extractelement <4 x float> %18, i32 3
  %20 = fadd float %19, %17
  %21 = getelementptr <4 x float>* %texColor, i32 0, i32 3
  store float %20, float* %21
  %gl_FragColor = load <4 x float>* %texColor
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4, !5}
!gla.outputs = !{!8}
!gla.noStaticUse = !{!5}

!0 = !{!"main", i32 15}
!1 = !{!"color", i32 12, [6 x <4 x float>]* @color_typeProxy, !2, !""}
!2 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"inColor", i32 12, <3 x float>* @inColor_typeProxy, !2, !""}
!4 = !{!"alpha", i32 12, [16 x float]* @alpha_typeProxy, !2, !""}
!5 = !{!"texSampler2D", i32 12, i32* @texSampler2D_typeProxy, !6, !""}
!6 = !{i32 5, i32 0, i32 1024, !7, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{i32 0, i32* @texSampler2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!8 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !9, !""}
!9 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@s2D = external addrspace(1) constant i32
@c2D = global <2 x float> zeroinitializer
@s3D = external addrspace(1) constant i32
@c4D = global <4 x float> zeroinitializer
@s2DArray = external addrspace(1) constant i32
@c3D = global <3 x float> zeroinitializer
@s2DShadow = external addrspace(1) constant i32
@c1D = global float 0.000000e+00
@ic3D = global <3 x i32> zeroinitializer
@ic1D = global i32 0
@ic2D = global <2 x i32> zeroinitializer
@sCube = external addrspace(1) constant i32
@s2DArrayShadow = external addrspace(1) constant i32
@is2D = external addrspace(1) constant i32
@is3D = external addrspace(1) constant i32
@isCube = external addrspace(1) constant i32
@is2DArray = external addrspace(1) constant i32
@is2Dms = external addrspace(1) constant i32
@sb = external addrspace(1) constant i32
@sr = external addrspace(1) constant i32
@sCubeShadow = external addrspace(1) constant i32
@FragData = global <4 x float> zeroinitializer
@us2D = external addrspace(1) constant i32
@us3D = external addrspace(1) constant i32
@usCube = external addrspace(1) constant i32
@us2DArray = external addrspace(1) constant i32
@ic4D = global <4 x i32> zeroinitializer

define fastcc void @main() {
entry:
  %FragData = alloca <4 x float>
  %iv2 = alloca <2 x i32>
  %iv = alloca <4 x i32>
  %v = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load i32 addrspace(1)* @s2D, !gla.uniform !1
  %1 = load <2 x float>* @c2D
  %v2 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32 2, i32 %0, i32 0, <2 x float> %1)
  store <4 x float> %v2, <4 x float>* %v
  %2 = load i32 addrspace(1)* @s3D, !gla.uniform !4
  %3 = load <4 x float>* @c4D
  %v3 = call <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32 3, i32 %2, i32 1, <4 x float> %3)
  %4 = load <4 x float>* %v
  %v4 = fadd <4 x float> %4, %v3
  store <4 x float> %v4, <4 x float>* %v
  %5 = load i32 addrspace(1)* @s2DArray, !gla.uniform !7
  %6 = load <3 x float>* @c3D
  %v5 = call <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32 2, i32 %5, i32 148, <3 x float> %6, float 0x3FF3333340000000, float undef)
  %7 = load <4 x float>* %v
  %v6 = fadd <4 x float> %7, %v5
  store <4 x float> %v6, <4 x float>* %v
  %8 = load i32 addrspace(1)* @s2DShadow, !gla.uniform !10
  %9 = load <3 x float>* @c3D
  %10 = load float* @c1D
  %v7 = call float @llvm.gla.fTextureSampleLodRefZOffset.f32.v3f32.v2i32(i32 2, i32 %8, i32 394, <3 x float> %9, float %10, float undef, <2 x i32> <i32 3, i32 3>)
  %11 = load <4 x float>* %v
  %12 = extractelement <4 x float> %11, i32 1
  %13 = fadd float %12, %v7
  %14 = getelementptr <4 x float>* %v, i32 0, i32 1
  store float %13, float* %14
  %15 = load i32 addrspace(1)* @s3D, !gla.uniform !4
  %16 = load <3 x i32>* @ic3D
  %17 = load i32* @ic1D
  %v8 = call <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v3i32.i32.i32(i32 3, i32 %15, i32 164, <3 x i32> %16, i32 %17, float undef, i32 undef)
  %18 = load <4 x float>* %v
  %v9 = fadd <4 x float> %18, %v8
  store <4 x float> %v9, <4 x float>* %v
  %19 = load i32 addrspace(1)* @s2D, !gla.uniform !1
  %20 = load <2 x i32>* @ic2D
  %v10 = call <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.v2i32(i32 2, i32 %19, i32 420, <2 x i32> %20, i32 4, float undef, <2 x i32> <i32 3, i32 3>)
  %21 = load <4 x float>* %v
  %v11 = fadd <4 x float> %21, %v10
  store <4 x float> %v11, <4 x float>* %v
  %22 = load i32 addrspace(1)* @s2DShadow, !gla.uniform !10
  %23 = load <3 x float>* @c3D
  %24 = load float* @c1D
  %v12 = call float @llvm.gla.fTextureSampleLodRefZOffset.f32.v3f32.v2i32(i32 2, i32 %22, i32 396, <3 x float> %23, float %24, float undef, <2 x i32> <i32 3, i32 3>)
  %25 = load <4 x float>* %v
  %26 = extractelement <4 x float> %25, i32 1
  %27 = fadd float %26, %v12
  %28 = getelementptr <4 x float>* %v, i32 0, i32 1
  store float %27, float* %28
  %29 = load i32 addrspace(1)* @s2D, !gla.uniform !1
  %30 = load <3 x float>* @c3D
  %31 = load float* @c1D
  %v13 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffset.v4f32.v3f32.v2i32(i32 2, i32 %29, i32 389, <3 x float> %30, float %31, float undef, <2 x i32> <i32 3, i32 3>)
  %32 = load <4 x float>* %v
  %v14 = fadd <4 x float> %32, %v13
  store <4 x float> %v14, <4 x float>* %v
  %33 = load i32 addrspace(1)* @sCube, !gla.uniform !13
  %34 = load <3 x float>* @c3D
  %35 = load <3 x float>* @c3D
  %36 = load <3 x float>* @c3D
  %v15 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.i32.v3f32.v3f32(i32 4, i32 %33, i32 0, <3 x float> %34, float undef, float undef, i32 undef, <3 x float> %35, <3 x float> %36)
  %37 = load <4 x float>* %v
  %v16 = fadd <4 x float> %37, %v15
  store <4 x float> %v16, <4 x float>* %v
  %38 = load i32 addrspace(1)* @s2DArrayShadow, !gla.uniform !16
  %39 = load <4 x float>* @c4D
  %40 = load <2 x float>* @c2D
  %41 = load <2 x float>* @c2D
  %v17 = call float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32 2, i32 %38, i32 280, <4 x float> %39, float undef, float undef, <2 x i32> <i32 3, i32 3>, <2 x float> %40, <2 x float> %41)
  %42 = load <4 x float>* %v
  %43 = extractelement <4 x float> %42, i32 0
  %44 = fadd float %43, %v17
  %45 = getelementptr <4 x float>* %v, i32 0, i32 0
  store float %44, float* %45
  %46 = load i32 addrspace(1)* @s3D, !gla.uniform !4
  %47 = load <4 x float>* @c4D
  %48 = load <3 x float>* @c3D
  %49 = load <3 x float>* @c3D
  %v18 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v3f32.v3f32(i32 3, i32 %46, i32 1, <4 x float> %47, float undef, float undef, i32 undef, <3 x float> %48, <3 x float> %49)
  %50 = load <4 x float>* %v
  %v19 = fadd <4 x float> %50, %v18
  store <4 x float> %v19, <4 x float>* %v
  %51 = load i32 addrspace(1)* @s2D, !gla.uniform !1
  %52 = load <3 x float>* @c3D
  %53 = load <2 x float>* @c2D
  %54 = load <2 x float>* @c2D
  %v20 = call <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.v2i32.v2f32.v2f32(i32 2, i32 %51, i32 257, <3 x float> %52, float undef, float undef, <2 x i32> <i32 3, i32 3>, <2 x float> %53, <2 x float> %54)
  %55 = load <4 x float>* %v
  %v21 = fadd <4 x float> %55, %v20
  store <4 x float> %v21, <4 x float>* %v
  %56 = load i32 addrspace(1)* @is2D, !gla.uniform !19
  %57 = load <2 x float>* @c2D
  %iv22 = call <4 x i32> @llvm.gla.textureSample.v4i32.v2f32(i32 2, i32 %56, i32 0, <2 x float> %57)
  store <4 x i32> %iv22, <4 x i32>* %iv
  %58 = load <4 x i32>* %iv
  %59 = sitofp <4 x i32> %58 to <4 x float>
  %60 = load <4 x float>* %v
  %v23 = fadd <4 x float> %60, %59
  store <4 x float> %v23, <4 x float>* %v
  %61 = load i32 addrspace(1)* @is2D, !gla.uniform !19
  %62 = load <4 x float>* @c4D
  %iv24 = call <4 x i32> @llvm.gla.textureSampleLodRefZOffset.v4i32.v4f32.v2i32(i32 2, i32 %61, i32 257, <4 x float> %62, float undef, float undef, <2 x i32> <i32 3, i32 3>)
  store <4 x i32> %iv24, <4 x i32>* %iv
  %63 = load <4 x i32>* %iv
  %64 = sitofp <4 x i32> %63 to <4 x float>
  %65 = load <4 x float>* %v
  %v25 = fadd <4 x float> %65, %64
  store <4 x float> %v25, <4 x float>* %v
  %66 = load i32 addrspace(1)* @is2D, !gla.uniform !19
  %67 = load <3 x float>* @c3D
  %68 = load float* @c1D
  %iv26 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v3f32(i32 2, i32 %66, i32 133, <3 x float> %67, float %68, float undef)
  store <4 x i32> %iv26, <4 x i32>* %iv
  %69 = load <4 x i32>* %iv
  %70 = sitofp <4 x i32> %69 to <4 x float>
  %71 = load <4 x float>* %v
  %v27 = fadd <4 x float> %71, %70
  store <4 x float> %v27, <4 x float>* %v
  %72 = load i32 addrspace(1)* @is2D, !gla.uniform !19
  %73 = load <3 x float>* @c3D
  %74 = load <2 x float>* @c2D
  %75 = load <2 x float>* @c2D
  %iv28 = call <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v3f32.i32.v2f32.v2f32(i32 2, i32 %72, i32 1, <3 x float> %73, float undef, float undef, i32 undef, <2 x float> %74, <2 x float> %75)
  store <4 x i32> %iv28, <4 x i32>* %iv
  %76 = load <4 x i32>* %iv
  %77 = sitofp <4 x i32> %76 to <4 x float>
  %78 = load <4 x float>* %v
  %v29 = fadd <4 x float> %78, %77
  store <4 x float> %v29, <4 x float>* %v
  %79 = load i32 addrspace(1)* @is3D, !gla.uniform !22
  %80 = load <3 x float>* @c3D
  %iv30 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v3f32(i32 3, i32 %79, i32 130, <3 x float> %80, float 0x4010CCCCC0000000, float undef)
  store <4 x i32> %iv30, <4 x i32>* %iv
  %81 = load <4 x i32>* %iv
  %82 = sitofp <4 x i32> %81 to <4 x float>
  %83 = load <4 x float>* %v
  %v31 = fadd <4 x float> %83, %82
  store <4 x float> %v31, <4 x float>* %v
  %84 = load i32 addrspace(1)* @isCube, !gla.uniform !25
  %85 = load <3 x float>* @c3D
  %86 = load float* @c1D
  %iv32 = call <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v3f32(i32 4, i32 %84, i32 132, <3 x float> %85, float %86, float undef)
  store <4 x i32> %iv32, <4 x i32>* %iv
  %87 = load <4 x i32>* %iv
  %88 = sitofp <4 x i32> %87 to <4 x float>
  %89 = load <4 x float>* %v
  %v33 = fadd <4 x float> %89, %88
  store <4 x float> %v33, <4 x float>* %v
  %90 = load i32 addrspace(1)* @is2DArray, !gla.uniform !28
  %91 = load <3 x i32>* @ic3D
  %92 = load i32* @ic1D
  %iv34 = call <4 x i32> @llvm.gla.texelFetchOffset.v4i32.v3i32.i32.i32(i32 2, i32 %90, i32 180, <3 x i32> %91, i32 %92, float undef, i32 undef)
  store <4 x i32> %iv34, <4 x i32>* %iv
  %93 = load <4 x i32>* %iv
  %94 = sitofp <4 x i32> %93 to <4 x float>
  %95 = load <4 x float>* %v
  %v35 = fadd <4 x float> %95, %94
  store <4 x float> %v35, <4 x float>* %v
  %96 = load i32 addrspace(1)* @is2Dms, !gla.uniform !31
  %97 = load <2 x i32>* @ic2D
  %98 = load i32* @ic1D
  %iv36 = call <4 x i32> @llvm.gla.texelFetchOffset.v4i32.v2i32.i32.i32(i32 6, i32 %96, i32 672, <2 x i32> %97, i32 %98, float undef, i32 undef)
  %99 = load <4 x i32>* %iv
  %iv37 = add <4 x i32> %99, %iv36
  store <4 x i32> %iv37, <4 x i32>* %iv
  %100 = load <4 x i32>* %iv
  %101 = sitofp <4 x i32> %100 to <4 x float>
  %102 = load <4 x float>* %v
  %v38 = fadd <4 x float> %102, %101
  store <4 x float> %v38, <4 x float>* %v
  %103 = load i32 addrspace(1)* @sb, !gla.uniform !34
  %104 = load i32* @ic1D
  %v39 = call <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.i32.i32.i32(i32 0, i32 %103, i32 32, i32 %104, i32 undef, float undef, i32 undef)
  %105 = load <4 x float>* %v
  %v40 = fadd <4 x float> %105, %v39
  store <4 x float> %v40, <4 x float>* %v
  %106 = load i32 addrspace(1)* @sr, !gla.uniform !37
  %107 = load <2 x i32>* @ic2D
  %v41 = call <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.i32(i32 5, i32 %106, i32 32, <2 x i32> %107, i32 undef, float undef, i32 undef)
  %108 = load <4 x float>* %v
  %v42 = fadd <4 x float> %108, %v41
  store <4 x float> %v42, <4 x float>* %v
  %109 = load i32 addrspace(1)* @sCubeShadow, !gla.uniform !40
  %iv243 = call <2 x i32> @llvm.gla.queryTextureSize.v2i32(i32 4, i32 %109, i32 2)
  store <2 x i32> %iv243, <2 x i32>* %iv2
  %110 = load <4 x float>* %v
  %111 = load <2 x i32>* %iv2
  %112 = sitofp <2 x i32> %111 to <2 x float>
  %113 = load <4 x float>* %FragData
  %114 = extractelement <2 x float> %112, i32 0
  %115 = insertelement <4 x float> %113, float %114, i32 0
  %116 = extractelement <2 x float> %112, i32 1
  %117 = insertelement <4 x float> %115, float %116, i32 1
  %118 = insertelement <4 x float> %117, float 0.000000e+00, i32 2
  %119 = insertelement <4 x float> %118, float 0.000000e+00, i32 3
  %FragData44 = fadd <4 x float> %110, %119
  store <4 x float> %FragData44, <4 x float>* @FragData
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSample.v4f32.v4f32(i32, i32, i32, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZ.v4f32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZOffset.f32.v3f32.v2i32(i32, i32, i32, <3 x float>, float, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v3i32.i32.i32(i32, i32, i32, <3 x i32>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.v2i32(i32, i32, i32, <2 x i32>, i32, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffset.v4f32.v3f32.v2i32(i32, i32, i32, <3 x float>, float, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.i32.v3f32.v3f32(i32, i32, i32, <3 x float>, float, float, i32, <3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTextureSampleLodRefZOffsetGrad.f32.v4f32.v2i32.v2f32.v2f32(i32, i32, i32, <4 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v4f32.i32.v3f32.v3f32(i32, i32, i32, <4 x float>, float, float, i32, <3 x float>, <3 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTextureSampleLodRefZOffsetGrad.v4f32.v3f32.v2i32.v2f32.v2f32(i32, i32, i32, <3 x float>, float, float, <2 x i32>, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSample.v4i32.v2f32(i32, i32, i32, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffset.v4i32.v4f32.v2i32(i32, i32, i32, <4 x float>, float, float, <2 x i32>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZ.v4i32.v3f32(i32, i32, i32, <3 x float>, float, float) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.textureSampleLodRefZOffsetGrad.v4i32.v3f32.i32.v2f32.v2f32(i32, i32, i32, <3 x float>, float, float, i32, <2 x float>, <2 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelFetchOffset.v4i32.v3i32.i32.i32(i32, i32, i32, <3 x i32>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.gla.texelFetchOffset.v4i32.v2i32.i32.i32(i32, i32, i32, <2 x i32>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.i32.i32.i32(i32, i32, i32, i32, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelFetchOffset.v4f32.v2i32.i32.i32(i32, i32, i32, <2 x i32>, i32, float, i32) #0

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.gla.queryTextureSize.v2i32(i32, i32, i32) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !4, !7, !10, !13, !16, !19, !22, !25, !28, !31, !34, !37, !40, !43, !46, !49, !52}
!gla.inputs = !{!55, !57, !59, !61, !63, !65, !67, !69}
!gla.outputs = !{!71}
!gla.noStaticUse = !{!43, !46, !49, !52, !69}

!0 = !{!"main", i32 15}
!1 = !{!"s2D", i32 12, i32* @s2D_typeProxy, !2, !""}
!2 = !{i32 5, i32 0, i32 1024, !3, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!4 = !{!"s3D", i32 12, i32* @s3D_typeProxy, !5, !""}
!5 = !{i32 5, i32 0, i32 1024, !6, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{i32 0, i32* @s3D_typeProxy, i32 2, i1 false, i1 false, i32 0}
!7 = !{!"s2DArray", i32 12, i32* @s2DArray_typeProxy, !8, !""}
!8 = !{i32 5, i32 0, i32 1024, !9, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{i32 0, i32* @s2DArray_typeProxy, i32 1, i1 true, i1 false, i32 0}
!10 = !{!"s2DShadow", i32 12, i32* @s2DShadow_typeProxy, !11, !""}
!11 = !{i32 5, i32 0, i32 1024, !12, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{i32 0, i32* @s2DShadow_typeProxy, i32 1, i1 false, i1 true, i32 0}
!13 = !{!"sCube", i32 12, i32* @sCube_typeProxy, !14, !""}
!14 = !{i32 5, i32 0, i32 1024, !15, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{i32 0, i32* @sCube_typeProxy, i32 3, i1 false, i1 false, i32 0}
!16 = !{!"s2DArrayShadow", i32 12, i32* @s2DArrayShadow_typeProxy, !17, !""}
!17 = !{i32 5, i32 0, i32 1024, !18, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!18 = !{i32 0, i32* @s2DArrayShadow_typeProxy, i32 1, i1 true, i1 true, i32 0}
!19 = !{!"is2D", i32 12, i32* @is2D_typeProxy, !20, !""}
!20 = !{i32 5, i32 0, i32 1024, !21, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!21 = !{i32 0, i32* @is2D_typeProxy, i32 1, i1 false, i1 false, i32 1}
!22 = !{!"is3D", i32 12, i32* @is3D_typeProxy, !23, !""}
!23 = !{i32 5, i32 0, i32 1024, !24, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!24 = !{i32 0, i32* @is3D_typeProxy, i32 2, i1 false, i1 false, i32 1}
!25 = !{!"isCube", i32 12, i32* @isCube_typeProxy, !26, !""}
!26 = !{i32 5, i32 0, i32 1024, !27, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!27 = !{i32 0, i32* @isCube_typeProxy, i32 3, i1 false, i1 false, i32 1}
!28 = !{!"is2DArray", i32 12, i32* @is2DArray_typeProxy, !29, !""}
!29 = !{i32 5, i32 0, i32 1024, !30, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!30 = !{i32 0, i32* @is2DArray_typeProxy, i32 1, i1 true, i1 false, i32 1}
!31 = !{!"is2Dms", i32 12, i32* @is2Dms_typeProxy, !32, !""}
!32 = !{i32 5, i32 0, i32 1024, !33, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!33 = !{i32 0, i32* @is2Dms_typeProxy, i32 6, i1 false, i1 false, i32 1}
!34 = !{!"sb", i32 12, i32* @sb_typeProxy, !35, !""}
!35 = !{i32 5, i32 0, i32 1024, !36, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!36 = !{i32 0, i32* @sb_typeProxy, i32 5, i1 false, i1 false, i32 0}
!37 = !{!"sr", i32 12, i32* @sr_typeProxy, !38, !""}
!38 = !{i32 5, i32 0, i32 1024, !39, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!39 = !{i32 0, i32* @sr_typeProxy, i32 4, i1 false, i1 false, i32 0}
!40 = !{!"sCubeShadow", i32 12, i32* @sCubeShadow_typeProxy, !41, !""}
!41 = !{i32 5, i32 0, i32 1024, !42, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!42 = !{i32 0, i32* @sCubeShadow_typeProxy, i32 3, i1 false, i1 true, i32 0}
!43 = !{!"us2D", i32 12, i32* @us2D_typeProxy, !44, !""}
!44 = !{i32 5, i32 0, i32 1024, !45, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!45 = !{i32 0, i32* @us2D_typeProxy, i32 1, i1 false, i1 false, i32 2}
!46 = !{!"us3D", i32 12, i32* @us3D_typeProxy, !47, !""}
!47 = !{i32 5, i32 0, i32 1024, !48, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!48 = !{i32 0, i32* @us3D_typeProxy, i32 2, i1 false, i1 false, i32 2}
!49 = !{!"usCube", i32 12, i32* @usCube_typeProxy, !50, !""}
!50 = !{i32 5, i32 0, i32 1024, !51, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!51 = !{i32 0, i32* @usCube_typeProxy, i32 3, i1 false, i1 false, i32 2}
!52 = !{!"us2DArray", i32 12, i32* @us2DArray_typeProxy, !53, !""}
!53 = !{i32 5, i32 0, i32 1024, !54, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!54 = !{i32 0, i32* @us2DArray_typeProxy, i32 1, i1 true, i1 false, i32 2}
!55 = !{!"c2D", i32 1, <2 x float>* @c2D_typeProxy, !56, !""}
!56 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!57 = !{!"c4D", i32 1, <4 x float>* @c4D_typeProxy, !58, !""}
!58 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!59 = !{!"c3D", i32 1, <3 x float>* @c3D_typeProxy, !60, !""}
!60 = !{i32 0, i32 0, i32 1026, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!61 = !{!"c1D", i32 1, float* @c1D_typeProxy, !62, !""}
!62 = !{i32 0, i32 0, i32 1027, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!63 = !{!"ic3D", i32 1, <3 x i32>* @ic3D_typeProxy, !64, !""}
!64 = !{i32 0, i32 0, i32 1028, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!65 = !{!"ic1D", i32 1, i32* @ic1D_typeProxy, !66, !""}
!66 = !{i32 0, i32 0, i32 1029, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!67 = !{!"ic2D", i32 1, <2 x i32>* @ic2D_typeProxy, !68, !""}
!68 = !{i32 0, i32 0, i32 1030, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!69 = !{!"ic4D", i32 1, <4 x i32>* @ic4D_typeProxy, !70, !""}
!70 = !{i32 0, i32 0, i32 1032, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!71 = !{!"FragData", i32 7, <4 x float>* @FragData_typeProxy, !72, !""}
!72 = !{i32 0, i32 0, i32 1031, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}

Top IR:
; ModuleID = 'Glslang'

@outVi = global <4 x float> zeroinitializer
@inVc = global <4 x float> zeroinitializer
@inVs = global <4 x float> zeroinitializer
@inVf = global <4 x float> zeroinitializer
@inVn = global <4 x float> zeroinitializer
@inVcn = global <4 x float> zeroinitializer
@inV = global <4 x float> zeroinitializer
@imageVc = external addrspace(1) constant i32
@imageVv = external addrspace(1) constant i32
@imageVr = external addrspace(1) constant i32
@imageVro = external addrspace(1) constant i32
@imageVwo = external addrspace(1) constant i32
@imageVall = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load <4 x float>* @inVc
  %1 = load <4 x float>* @inVs
  %2 = fadd <4 x float> %0, %1
  %3 = load <4 x float>* @inVf
  %4 = fadd <4 x float> %2, %3
  %5 = load <4 x float>* @inVn
  %6 = fadd <4 x float> %4, %5
  %7 = load <4 x float>* @inVcn
  %outVi = fadd <4 x float> %6, %7
  store <4 x float> %outVi, <4 x float>* @outVi
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}
!gla.invariant = !{!1}
!gla.inputs = !{!3, !5, !7, !9, !11, !13}
!gla.noStaticUse = !{!13, !15, !18, !21, !24, !27, !30}
!gla.uniforms = !{!15, !18, !21, !24, !27, !30}

!0 = !{!"main", i32 15}
!1 = !{!"outVi", i32 7, <4 x float>* @outVi_typeProxy, !2, !""}
!2 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"inVc", i32 1, <4 x float>* @inVc_typeProxy, !4, !""}
!4 = !{i32 0, i32 0, i32 1025, null, i32 513, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"inVs", i32 1, <4 x float>* @inVs_typeProxy, !6, !""}
!6 = !{i32 0, i32 0, i32 1026, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"inVf", i32 1, <4 x float>* @inVf_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"inVn", i32 1, <4 x float>* @inVn_typeProxy, !10, !""}
!10 = !{i32 0, i32 0, i32 1028, null, i32 2, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"inVcn", i32 1, <4 x float>* @inVcn_typeProxy, !12, !""}
!12 = !{i32 0, i32 0, i32 1029, null, i32 514, i32 0, i32 -1, i32 0, i32 -1}
!13 = !{!"inV", i32 1, <4 x float>* @inV_typeProxy, !14, !""}
!14 = !{i32 0, i32 0, i32 1030, null, i32 257, i32 0, i32 -1, i32 0, i32 -1}
!15 = !{!"imageVc", i32 12, i32* @imageVc_typeProxy, !16, !""}
!16 = !{i32 5, i32 0, i32 1024, !17, i32 -1, i32 0, i32 -1, i32 16, i32 -1}
!17 = !{i32 2, i32* @imageVc_typeProxy, i32 1, i1 false, i1 false, i32 0}
!18 = !{!"imageVv", i32 12, i32* @imageVv_typeProxy, !19, !""}
!19 = !{i32 5, i32 0, i32 1024, !20, i32 -1, i32 0, i32 -1, i32 4, i32 -1}
!20 = !{i32 2, i32* @imageVv_typeProxy, i32 1, i1 false, i1 false, i32 0}
!21 = !{!"imageVr", i32 12, i32* @imageVr_typeProxy, !22, !""}
!22 = !{i32 5, i32 0, i32 1024, !23, i32 -1, i32 0, i32 -1, i32 8, i32 -1}
!23 = !{i32 2, i32* @imageVr_typeProxy, i32 1, i1 false, i1 false, i32 0}
!24 = !{!"imageVro", i32 12, i32* @imageVro_typeProxy, !25, !""}
!25 = !{i32 5, i32 0, i32 1024, !26, i32 -1, i32 0, i32 -1, i32 2, i32 -1}
!26 = !{i32 2, i32* @imageVro_typeProxy, i32 1, i1 false, i1 false, i32 0}
!27 = !{!"imageVwo", i32 12, i32* @imageVwo_typeProxy, !28, !""}
!28 = !{i32 5, i32 0, i32 1024, !29, i32 -1, i32 0, i32 -1, i32 1, i32 -1}
!29 = !{i32 1, i32* @imageVwo_typeProxy, i32 1, i1 false, i1 false, i32 0}
!30 = !{!"imageVall", i32 12, i32* @imageVall_typeProxy, !31, !""}
!31 = !{i32 5, i32 0, i32 1024, !32, i32 -1, i32 0, i32 -1, i32 31, i32 -1}
!32 = !{i32 1, i32* @imageVall_typeProxy, i32 1, i1 false, i1 false, i32 0}
test.frag

test.vert

deepRvalue.frag

block.frag

length.frag

matrix2.frag

matrixAgg.frag

texture.frag

texture.vert

300BuiltIns.frag

300BuiltIns.vert

uniformArray.frag

newTexture.frag

qualifiers.frag

