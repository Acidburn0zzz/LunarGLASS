
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i107 = alloca i32
  %i94 = alloca i32
  %i82 = alloca i32
  %i67 = alloca i32
  %i59 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %mainBody
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  unreachable

ifmerge:                                          ; preds = %loop-header
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  unreachable

ifmerge5:                                         ; preds = %ifmerge
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  unreachable

ifmerge9:                                         ; preds = %ifmerge5
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  unreachable

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge17

post-loop-break14:                                ; No predecessors!
  unreachable

ifmerge15:                                        ; preds = %loop-header12
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

loop-merge17:                                     ; preds = %then13
  br label %loop-header18

loop-header18:                                    ; preds = %ifmerge24, %then23, %loop-merge17
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-merge26

post-loop-break20:                                ; No predecessors!
  unreachable

ifmerge21:                                        ; preds = %loop-header18
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color22 = fadd <4 x float> %22, %21
  store <4 x float> %color22, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then23, label %ifmerge24

then23:                                           ; preds = %ifmerge21
  br label %loop-header18

post-loop-continue:                               ; No predecessors!
  unreachable

ifmerge24:                                        ; preds = %ifmerge21
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color25 = fadd <4 x float> %28, %27
  store <4 x float> %color25, <4 x float>* %color
  br label %loop-header18

loop-merge26:                                     ; preds = %then19
  br label %loop-header27

loop-header27:                                    ; preds = %ifmerge30, %loop-merge26
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then28, label %ifmerge30

then28:                                           ; preds = %loop-header27
  br label %loop-merge32

post-loop-break29:                                ; No predecessors!
  unreachable

ifmerge30:                                        ; preds = %loop-header27
  %33 = load <4 x float>* %color
  %color31 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color31, <4 x float>* %color
  br label %loop-header27

loop-merge32:                                     ; preds = %then28
  br label %loop-header33

loop-header33:                                    ; preds = %ifmerge36, %loop-merge32
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then34, label %ifmerge36

then34:                                           ; preds = %loop-header33
  br label %loop-merge38

post-loop-break35:                                ; No predecessors!
  unreachable

ifmerge36:                                        ; preds = %loop-header33
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color37 = fadd <4 x float> %45, %44
  store <4 x float> %color37, <4 x float>* %color
  br label %loop-header33

loop-merge38:                                     ; preds = %then34
  br label %loop-header39

loop-header39:                                    ; preds = %ifmerge46, %loop-merge38
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then40, label %ifmerge42

then40:                                           ; preds = %loop-header39
  br label %loop-merge48

post-loop-break41:                                ; No predecessors!
  unreachable

ifmerge42:                                        ; preds = %loop-header39
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color43 = fadd <4 x float> %52, %51
  store <4 x float> %color43, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then44, label %ifmerge46

then44:                                           ; preds = %ifmerge42
  br label %loop-merge48

post-loop-break45:                                ; No predecessors!
  unreachable

ifmerge46:                                        ; preds = %ifmerge42
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color47 = fadd <4 x float> %58, %57
  store <4 x float> %color47, <4 x float>* %color
  br label %loop-header39

loop-merge48:                                     ; preds = %then44, %then40
  store i32 0, i32* %i
  br label %loop-header49

loop-header49:                                    ; preds = %ifmerge52, %loop-merge48
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then50, label %ifmerge52

then50:                                           ; preds = %loop-header49
  br label %loop-merge55

post-loop-break51:                                ; No predecessors!
  unreachable

ifmerge52:                                        ; preds = %loop-header49
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color53 = fadd <4 x float> %64, %63
  store <4 x float> %color53, <4 x float>* %color
  %65 = load i32* %i
  %i54 = add i32 %65, 1
  store i32 %i54, i32* %i
  br label %loop-header49

loop-merge55:                                     ; preds = %then50
  br label %loop-header56

loop-header56:                                    ; preds = %loop-merge55
  br label %loop-body

loop-body:                                        ; preds = %loop-test, %loop-header56
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color57 = fadd <4 x float> %67, %66
  store <4 x float> %color57, <4 x float>* %color
  br label %loop-test

loop-test:                                        ; preds = %loop-body
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  br i1 %71, label %loop-body, label %loop-merge58

loop-merge58:                                     ; preds = %loop-test
  store i32 0, i32* %i59
  br label %loop-header60

loop-header60:                                    ; preds = %ifmerge63, %loop-merge58
  %72 = load i32* %i59
  %73 = icmp slt i32 %72, 42
  %74 = xor i1 %73, true
  br i1 %74, label %then61, label %ifmerge63

then61:                                           ; preds = %loop-header60
  br label %loop-merge66

post-loop-break62:                                ; No predecessors!
  unreachable

ifmerge63:                                        ; preds = %loop-header60
  %75 = load float addrspace(2)* @d3, !gla.uniform !8
  %76 = load <4 x float>* %color
  %77 = extractelement <4 x float> %76, i32 2
  %78 = fadd float %77, %75
  %79 = load <4 x float>* %color
  %color64 = insertelement <4 x float> %79, float %78, i32 2
  store <4 x float> %color64, <4 x float>* %color
  %80 = load i32* %i59
  %i5965 = add i32 %80, 1
  store i32 %i5965, i32* %i59
  br label %loop-header60

loop-merge66:                                     ; preds = %then61
  store i32 0, i32* %i67
  br label %loop-header68

loop-header68:                                    ; preds = %ifmerge79, %loop-merge66
  %81 = load i32* %i67
  %82 = icmp slt i32 %81, 100
  %83 = xor i1 %82, true
  br i1 %83, label %then69, label %ifmerge71

then69:                                           ; preds = %loop-header68
  br label %loop-merge81

post-loop-break70:                                ; No predecessors!
  unreachable

ifmerge71:                                        ; preds = %loop-header68
  %84 = load <4 x float>* %color
  %85 = extractelement <4 x float> %84, i32 2
  %86 = fcmp olt float %85, 2.000000e+01
  br i1 %86, label %then72, label %else

then72:                                           ; preds = %ifmerge71
  %87 = load <4 x float>* %color
  %88 = extractelement <4 x float> %87, i32 0
  %89 = fadd float %88, 1.000000e+00
  %90 = load <4 x float>* %color
  %color73 = insertelement <4 x float> %90, float %89, i32 0
  store <4 x float> %color73, <4 x float>* %color
  br label %ifmerge75

else:                                             ; preds = %ifmerge71
  %91 = load <4 x float>* %color
  %92 = extractelement <4 x float> %91, i32 1
  %93 = fadd float %92, 1.000000e+00
  %94 = load <4 x float>* %color
  %color74 = insertelement <4 x float> %94, float %93, i32 1
  store <4 x float> %color74, <4 x float>* %color
  br label %ifmerge75

ifmerge75:                                        ; preds = %else, %then72
  %95 = load <4 x float>* %color
  %96 = extractelement <4 x float> %95, i32 3
  %97 = fcmp olt float %96, 2.000000e+01
  br i1 %97, label %then76, label %ifmerge79

then76:                                           ; preds = %ifmerge75
  %98 = load <4 x float>* %color
  %99 = extractelement <4 x float> %98, i32 2
  %100 = load <4 x float>* %color
  %101 = extractelement <4 x float> %100, i32 1
  %102 = fcmp ogt float %99, %101
  br i1 %102, label %then77, label %ifmerge78

then77:                                           ; preds = %then76
  br label %ifmerge78

ifmerge78:                                        ; preds = %then76, %then77
  br label %ifmerge79

ifmerge79:                                        ; preds = %ifmerge75, %ifmerge78
  %103 = load i32* %i67
  %i6780 = add i32 %103, 1
  store i32 %i6780, i32* %i67
  br label %loop-header68

loop-merge81:                                     ; preds = %then69
  store i32 0, i32* %i82
  br label %loop-header83

loop-header83:                                    ; preds = %ifmerge91, %loop-merge81
  %104 = load i32* %i82
  %105 = icmp slt i32 %104, 120
  %106 = xor i1 %105, true
  br i1 %106, label %then84, label %ifmerge86

then84:                                           ; preds = %loop-header83
  br label %loop-merge93

post-loop-break85:                                ; No predecessors!
  unreachable

ifmerge86:                                        ; preds = %loop-header83
  %107 = load <4 x float>* %color
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fcmp olt float %108, 2.000000e+01
  br i1 %109, label %then87, label %else89

then87:                                           ; preds = %ifmerge86
  %110 = load <4 x float>* %color
  %111 = extractelement <4 x float> %110, i32 0
  %112 = fadd float %111, 1.000000e+00
  %113 = load <4 x float>* %color
  %color88 = insertelement <4 x float> %113, float %112, i32 0
  store <4 x float> %color88, <4 x float>* %color
  br label %ifmerge91

else89:                                           ; preds = %ifmerge86
  %114 = load <4 x float>* %color
  %115 = extractelement <4 x float> %114, i32 1
  %116 = fadd float %115, 1.000000e+00
  %117 = load <4 x float>* %color
  %color90 = insertelement <4 x float> %117, float %116, i32 1
  store <4 x float> %color90, <4 x float>* %color
  br label %ifmerge91

ifmerge91:                                        ; preds = %else89, %then87
  %118 = load i32* %i82
  %i8292 = add i32 %118, 1
  store i32 %i8292, i32* %i82
  br label %loop-header83

loop-merge93:                                     ; preds = %then84
  store i32 0, i32* %i94
  br label %loop-header95

loop-header95:                                    ; preds = %ifmerge103, %then100, %loop-merge93
  %119 = load i32* %i94
  %120 = icmp slt i32 %119, 42
  %121 = xor i1 %120, true
  br i1 %121, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  br label %loop-merge106

post-loop-break97:                                ; No predecessors!
  unreachable

ifmerge98:                                        ; preds = %loop-header95
  %122 = load float addrspace(2)* @d3, !gla.uniform !8
  %123 = load <4 x float>* %color
  %124 = extractelement <4 x float> %123, i32 2
  %125 = fadd float %124, %122
  %126 = load <4 x float>* %color
  %color99 = insertelement <4 x float> %126, float %125, i32 2
  store <4 x float> %color99, <4 x float>* %color
  %127 = load <4 x float>* %color
  %128 = extractelement <4 x float> %127, i32 0
  %129 = load float addrspace(2)* @d4, !gla.uniform !11
  %130 = fcmp olt float %128, %129
  br i1 %130, label %then100, label %ifmerge103

then100:                                          ; preds = %ifmerge98
  %131 = load i32* %i94
  %i94101 = add i32 %131, 1
  store i32 %i94101, i32* %i94
  br label %loop-header95

post-loop-continue102:                            ; No predecessors!
  unreachable

ifmerge103:                                       ; preds = %ifmerge98
  %132 = load <4 x float>* %color
  %133 = extractelement <4 x float> %132, i32 3
  %134 = fadd float %133, 1.000000e+00
  %135 = load <4 x float>* %color
  %color104 = insertelement <4 x float> %135, float %134, i32 3
  store <4 x float> %color104, <4 x float>* %color
  %136 = load i32* %i94
  %i94105 = add i32 %136, 1
  store i32 %i94105, i32* %i94
  br label %loop-header95

loop-merge106:                                    ; preds = %then96
  store i32 0, i32* %i107
  br label %loop-header108

loop-header108:                                   ; preds = %ifmerge115, %loop-merge106
  %137 = load i32* %i107
  %138 = icmp slt i32 %137, 42
  %139 = xor i1 %138, true
  br i1 %139, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-merge118

post-loop-break110:                               ; No predecessors!
  unreachable

ifmerge111:                                       ; preds = %loop-header108
  %140 = load float addrspace(2)* @d3, !gla.uniform !8
  %141 = load <4 x float>* %color
  %142 = extractelement <4 x float> %141, i32 2
  %143 = fadd float %142, %140
  %144 = load <4 x float>* %color
  %color112 = insertelement <4 x float> %144, float %143, i32 2
  store <4 x float> %color112, <4 x float>* %color
  %145 = load <4 x float>* %color
  %146 = extractelement <4 x float> %145, i32 0
  %147 = load float addrspace(2)* @d4, !gla.uniform !11
  %148 = fcmp olt float %146, %147
  br i1 %148, label %then113, label %ifmerge115

then113:                                          ; preds = %ifmerge111
  br label %loop-merge118

post-loop-break114:                               ; No predecessors!
  unreachable

ifmerge115:                                       ; preds = %ifmerge111
  %149 = load <4 x float>* %color
  %150 = extractelement <4 x float> %149, i32 3
  %151 = fadd float %150, 1.000000e+00
  %152 = load <4 x float>* %color
  %color116 = insertelement <4 x float> %152, float %151, i32 3
  store <4 x float> %color116, <4 x float>* %color
  %153 = load i32* %i107
  %i107117 = add i32 %153, 1
  store i32 %i107117, i32* %i107
  br label %loop-header108

loop-merge118:                                    ; preds = %then113, %then109
  br label %loop-header119

loop-header119:                                   ; preds = %loop-merge118
  br label %loop-body120

loop-body120:                                     ; preds = %loop-test130, %loop-header119
  %154 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %155 = load <4 x float>* %color
  %color121 = fadd <4 x float> %155, %154
  store <4 x float> %color121, <4 x float>* %color
  %156 = load <4 x float>* %color
  %157 = extractelement <4 x float> %156, i32 0
  %158 = load float addrspace(2)* @d4, !gla.uniform !11
  %159 = fcmp olt float %157, %158
  br i1 %159, label %then122, label %ifmerge124

then122:                                          ; preds = %loop-body120
  br label %loop-test130

post-loop-continue123:                            ; No predecessors!
  unreachable

ifmerge124:                                       ; preds = %loop-body120
  %160 = load <4 x float>* %color
  %161 = extractelement <4 x float> %160, i32 1
  %162 = load float addrspace(2)* @d4, !gla.uniform !11
  %163 = fcmp olt float %161, %162
  br i1 %163, label %then125, label %else127

then125:                                          ; preds = %ifmerge124
  %164 = load float addrspace(2)* @d4, !gla.uniform !11
  %165 = load <4 x float>* %color
  %166 = extractelement <4 x float> %165, i32 1
  %167 = fadd float %166, %164
  %168 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %168, float %167, i32 1
  store <4 x float> %color126, <4 x float>* %color
  br label %ifmerge129

else127:                                          ; preds = %ifmerge124
  %169 = load float addrspace(2)* @d4, !gla.uniform !11
  %170 = load <4 x float>* %color
  %171 = extractelement <4 x float> %170, i32 0
  %172 = fadd float %171, %169
  %173 = load <4 x float>* %color
  %color128 = insertelement <4 x float> %173, float %172, i32 0
  store <4 x float> %color128, <4 x float>* %color
  br label %ifmerge129

ifmerge129:                                       ; preds = %else127, %then125
  br label %loop-test130

loop-test130:                                     ; preds = %ifmerge129, %then122
  %174 = load <4 x float>* %color
  %175 = extractelement <4 x float> %174, i32 2
  %176 = load float addrspace(2)* @d4, !gla.uniform !11
  %177 = fcmp olt float %175, %176
  br i1 %177, label %loop-body120, label %loop-merge131

loop-merge131:                                    ; preds = %loop-test130
  br label %loop-header132

loop-header132:                                   ; preds = %loop-merge131
  br label %loop-body133

loop-body133:                                     ; preds = %loop-test138, %loop-header132
  %178 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %179 = load <4 x float>* %color
  %color134 = fadd <4 x float> %179, %178
  store <4 x float> %color134, <4 x float>* %color
  %180 = load <4 x float>* %color
  %181 = extractelement <4 x float> %180, i32 1
  %182 = load float addrspace(2)* @d5, !gla.uniform !17
  %183 = fcmp olt float %181, %182
  br i1 %183, label %then135, label %ifmerge137

then135:                                          ; preds = %loop-body133
  %184 = load float addrspace(2)* @d5, !gla.uniform !17
  %185 = load <4 x float>* %color
  %186 = extractelement <4 x float> %185, i32 1
  %187 = fadd float %186, %184
  %188 = load <4 x float>* %color
  %color136 = insertelement <4 x float> %188, float %187, i32 1
  store <4 x float> %color136, <4 x float>* %color
  br label %ifmerge137

ifmerge137:                                       ; preds = %loop-body133, %then135
  br label %loop-test138

loop-test138:                                     ; preds = %ifmerge137
  %189 = load <4 x float>* %color
  %190 = extractelement <4 x float> %189, i32 0
  %191 = load float addrspace(2)* @d5, !gla.uniform !17
  %192 = fcmp olt float %190, %191
  br i1 %192, label %loop-body133, label %loop-merge139

loop-merge139:                                    ; preds = %loop-test138
  %193 = load <4 x float>* %color
  %194 = extractelement <4 x float> %193, i32 0
  %195 = load float addrspace(2)* @d6, !gla.uniform !18
  %196 = fcmp olt float %194, %195
  br i1 %196, label %then140, label %else147

then140:                                          ; preds = %loop-merge139
  br label %loop-header141

loop-header141:                                   ; preds = %ifmerge144, %then140
  %197 = load <4 x float>* %color
  %198 = extractelement <4 x float> %197, i32 1
  %199 = load float addrspace(2)* @d6, !gla.uniform !18
  %200 = fcmp olt float %198, %199
  %201 = xor i1 %200, true
  br i1 %201, label %then142, label %ifmerge144

then142:                                          ; preds = %loop-header141
  br label %loop-merge146

post-loop-break143:                               ; No predecessors!
  unreachable

ifmerge144:                                       ; preds = %loop-header141
  %202 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %203 = load <4 x float>* %color
  %color145 = fadd <4 x float> %203, %202
  store <4 x float> %color145, <4 x float>* %color
  br label %loop-header141

loop-merge146:                                    ; preds = %then142
  br label %ifmerge154

else147:                                          ; preds = %loop-merge139
  br label %loop-header148

loop-header148:                                   ; preds = %ifmerge151, %else147
  %204 = load <4 x float>* %color
  %205 = extractelement <4 x float> %204, i32 2
  %206 = load float addrspace(2)* @d6, !gla.uniform !18
  %207 = fcmp olt float %205, %206
  %208 = xor i1 %207, true
  br i1 %208, label %then149, label %ifmerge151

then149:                                          ; preds = %loop-header148
  br label %loop-merge153

post-loop-break150:                               ; No predecessors!
  unreachable

ifmerge151:                                       ; preds = %loop-header148
  %209 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %210 = extractelement <4 x float> %209, i32 2
  %211 = load <4 x float>* %color
  %212 = extractelement <4 x float> %211, i32 2
  %213 = fadd float %212, %210
  %214 = load <4 x float>* %color
  %color152 = insertelement <4 x float> %214, float %213, i32 2
  store <4 x float> %color152, <4 x float>* %color
  br label %loop-header148

loop-merge153:                                    ; preds = %then149
  br label %ifmerge154

ifmerge154:                                       ; preds = %loop-merge153, %loop-merge146
  %215 = load <4 x float>* %color
  %216 = extractelement <4 x float> %215, i32 0
  %217 = load float addrspace(2)* @d6, !gla.uniform !18
  %218 = fcmp olt float %216, %217
  br i1 %218, label %then155, label %else165

then155:                                          ; preds = %ifmerge154
  br label %loop-header156

loop-header156:                                   ; preds = %ifmerge163, %then155
  %219 = load <4 x float>* %color
  %220 = extractelement <4 x float> %219, i32 1
  %221 = load float addrspace(2)* @d6, !gla.uniform !18
  %222 = fcmp olt float %220, %221
  %223 = xor i1 %222, true
  br i1 %223, label %then157, label %ifmerge159

then157:                                          ; preds = %loop-header156
  br label %loop-merge164

post-loop-break158:                               ; No predecessors!
  unreachable

ifmerge159:                                       ; preds = %loop-header156
  %224 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %225 = load <4 x float>* %color
  %color160 = fadd <4 x float> %225, %224
  store <4 x float> %color160, <4 x float>* %color
  %226 = load float addrspace(2)* @d7, !gla.uniform !20
  %227 = fcmp olt float %226, 1.000000e+00
  br i1 %227, label %then161, label %ifmerge163

then161:                                          ; preds = %ifmerge159
  br label %loop-merge164

post-loop-break162:                               ; No predecessors!
  unreachable

ifmerge163:                                       ; preds = %ifmerge159
  br label %loop-header156

loop-merge164:                                    ; preds = %then161, %then157
  br label %ifmerge172

else165:                                          ; preds = %ifmerge154
  br label %loop-header166

loop-header166:                                   ; preds = %ifmerge169, %else165
  %228 = load <4 x float>* %color
  %229 = extractelement <4 x float> %228, i32 2
  %230 = load float addrspace(2)* @d6, !gla.uniform !18
  %231 = fcmp olt float %229, %230
  %232 = xor i1 %231, true
  br i1 %232, label %then167, label %ifmerge169

then167:                                          ; preds = %loop-header166
  br label %loop-merge171

post-loop-break168:                               ; No predecessors!
  unreachable

ifmerge169:                                       ; preds = %loop-header166
  %233 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %234 = extractelement <4 x float> %233, i32 2
  %235 = load <4 x float>* %color
  %236 = extractelement <4 x float> %235, i32 2
  %237 = fadd float %236, %234
  %238 = load <4 x float>* %color
  %color170 = insertelement <4 x float> %238, float %237, i32 2
  store <4 x float> %color170, <4 x float>* %color
  br label %loop-header166

loop-merge171:                                    ; preds = %then167
  br label %ifmerge172

ifmerge172:                                       ; preds = %loop-merge171, %loop-merge164
  br label %loop-header173

loop-header173:                                   ; preds = %ifmerge172
  br label %loop-body174

loop-body174:                                     ; preds = %loop-test184, %loop-header173
  %239 = load float addrspace(2)* @d7, !gla.uniform !20
  %240 = fcmp olt float %239, 0.000000e+00
  br i1 %240, label %then175, label %ifmerge177

then175:                                          ; preds = %loop-body174
  br label %loop-merge185

post-loop-break176:                               ; No predecessors!
  unreachable

ifmerge177:                                       ; preds = %loop-body174
  %241 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %242 = load <4 x float>* %color
  %color178 = fadd <4 x float> %242, %241
  store <4 x float> %color178, <4 x float>* %color
  %243 = load float addrspace(2)* @d7, !gla.uniform !20
  %244 = fcmp olt float %243, 1.000000e+00
  br i1 %244, label %then179, label %ifmerge182

then179:                                          ; preds = %ifmerge177
  %245 = load <4 x float>* %color
  %246 = extractelement <4 x float> %245, i32 2
  %247 = fadd float %246, 1.000000e+00
  %248 = load <4 x float>* %color
  %color180 = insertelement <4 x float> %248, float %247, i32 2
  store <4 x float> %color180, <4 x float>* %color
  br label %loop-merge185

post-loop-break181:                               ; No predecessors!
  unreachable

ifmerge182:                                       ; preds = %ifmerge177
  %249 = load <4 x float>* @BaseColor
  %250 = load <4 x float>* %color
  %color183 = fadd <4 x float> %250, %249
  store <4 x float> %color183, <4 x float>* %color
  br label %loop-test184

loop-test184:                                     ; preds = %ifmerge182
  br i1 true, label %loop-body174, label %loop-merge185

loop-merge185:                                    ; preds = %loop-test184, %then179, %then175
  br label %loop-header186

loop-header186:                                   ; preds = %loop-merge185
  br label %loop-body187

loop-body187:                                     ; preds = %loop-test202, %loop-header186
  %251 = load float addrspace(2)* @d8, !gla.uniform !22
  %252 = fcmp olt float %251, 0.000000e+00
  br i1 %252, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-body187
  br label %loop-merge203

post-loop-break189:                               ; No predecessors!
  unreachable

ifmerge190:                                       ; preds = %loop-body187
  %253 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %254 = load <4 x float>* %color
  %color191 = fadd <4 x float> %254, %253
  store <4 x float> %color191, <4 x float>* %color
  %255 = load float addrspace(2)* @d8, !gla.uniform !22
  %256 = fcmp olt float %255, 1.000000e+00
  br i1 %256, label %then192, label %ifmerge200

then192:                                          ; preds = %ifmerge190
  %257 = load <4 x float>* %color
  %258 = extractelement <4 x float> %257, i32 2
  %259 = fadd float %258, 1.000000e+00
  %260 = load <4 x float>* %color
  %color193 = insertelement <4 x float> %260, float %259, i32 2
  store <4 x float> %color193, <4 x float>* %color
  %261 = load float addrspace(2)* @d8, !gla.uniform !22
  %262 = fcmp olt float %261, 2.000000e+00
  br i1 %262, label %then194, label %else196

then194:                                          ; preds = %then192
  %263 = load <4 x float>* %color
  %264 = extractelement <4 x float> %263, i32 1
  %265 = fadd float %264, 1.000000e+00
  %266 = load <4 x float>* %color
  %color195 = insertelement <4 x float> %266, float %265, i32 1
  store <4 x float> %color195, <4 x float>* %color
  br label %ifmerge198

else196:                                          ; preds = %then192
  %267 = load <4 x float>* %color
  %268 = extractelement <4 x float> %267, i32 0
  %269 = fadd float %268, 1.000000e+00
  %270 = load <4 x float>* %color
  %color197 = insertelement <4 x float> %270, float %269, i32 0
  store <4 x float> %color197, <4 x float>* %color
  br label %ifmerge198

ifmerge198:                                       ; preds = %else196, %then194
  br label %loop-merge203

post-loop-break199:                               ; No predecessors!
  unreachable

ifmerge200:                                       ; preds = %ifmerge190
  %271 = load <4 x float>* @BaseColor
  %272 = load <4 x float>* %color
  %color201 = fadd <4 x float> %272, %271
  store <4 x float> %color201, <4 x float>* %color
  br label %loop-test202

loop-test202:                                     ; preds = %ifmerge200
  %273 = load <4 x float>* %color
  %274 = extractelement <4 x float> %273, i32 2
  %275 = load float addrspace(2)* @d8, !gla.uniform !22
  %276 = fcmp olt float %274, %275
  br i1 %276, label %loop-body187, label %loop-merge203

loop-merge203:                                    ; preds = %loop-test202, %ifmerge198, %then188
  br label %loop-header204

loop-header204:                                   ; preds = %ifmerge216, %loop-merge203
  %277 = load <4 x float>* %color
  %278 = extractelement <4 x float> %277, i32 3
  %279 = load float addrspace(2)* @d9, !gla.uniform !23
  %280 = fcmp olt float %278, %279
  %281 = xor i1 %280, true
  br i1 %281, label %then205, label %ifmerge207

then205:                                          ; preds = %loop-header204
  br label %loop-merge217

post-loop-break206:                               ; No predecessors!
  unreachable

ifmerge207:                                       ; preds = %loop-header204
  %282 = load float addrspace(2)* @d9, !gla.uniform !23
  %283 = load float addrspace(2)* @d8, !gla.uniform !22
  %284 = fcmp ogt float %282, %283
  br i1 %284, label %then208, label %ifmerge216

then208:                                          ; preds = %ifmerge207
  %285 = load <4 x float>* %color
  %286 = extractelement <4 x float> %285, i32 0
  %287 = load float addrspace(2)* @d7, !gla.uniform !20
  %288 = fcmp ole float %286, %287
  br i1 %288, label %then209, label %ifmerge215

then209:                                          ; preds = %then208
  %289 = load <4 x float>* %color
  %290 = extractelement <4 x float> %289, i32 2
  %291 = fcmp oeq float %290, 5.000000e+00
  br i1 %291, label %then210, label %else212

then210:                                          ; preds = %then209
  %292 = load <4 x float>* %color
  %293 = extractelement <4 x float> %292, i32 3
  %294 = fadd float %293, 1.000000e+00
  %295 = load <4 x float>* %color
  %color211 = insertelement <4 x float> %295, float %294, i32 3
  store <4 x float> %color211, <4 x float>* %color
  br label %ifmerge214

else212:                                          ; preds = %then209
  br label %loop-merge217

post-loop-break213:                               ; No predecessors!
  unreachable

ifmerge214:                                       ; preds = %then210
  br label %ifmerge215

ifmerge215:                                       ; preds = %then208, %ifmerge214
  br label %ifmerge216

ifmerge216:                                       ; preds = %ifmerge207, %ifmerge215
  br label %loop-header204

loop-merge217:                                    ; preds = %else212, %then205
  br label %loop-header218

loop-header218:                                   ; preds = %ifmerge229, %loop-merge217
  %296 = load <4 x float>* %color
  %297 = extractelement <4 x float> %296, i32 2
  %298 = load float addrspace(2)* @d10, !gla.uniform !24
  %299 = fcmp olt float %297, %298
  %300 = xor i1 %299, true
  br i1 %300, label %then219, label %ifmerge221

then219:                                          ; preds = %loop-header218
  br label %loop-merge234

post-loop-break220:                               ; No predecessors!
  unreachable

ifmerge221:                                       ; preds = %loop-header218
  %301 = load <4 x float>* %color
  %302 = extractelement <4 x float> %301, i32 1
  %303 = fadd float %302, 1.000000e+00
  %304 = load <4 x float>* %color
  %color222 = insertelement <4 x float> %304, float %303, i32 1
  store <4 x float> %color222, <4 x float>* %color
  %305 = load <4 x float>* %color
  %306 = extractelement <4 x float> %305, i32 1
  %307 = load float addrspace(2)* @d11, !gla.uniform !25
  %308 = fcmp olt float %306, %307
  br i1 %308, label %then223, label %ifmerge231

then223:                                          ; preds = %ifmerge221
  %309 = load <4 x float>* %color
  %310 = extractelement <4 x float> %309, i32 2
  %311 = fadd float %310, 1.000000e+00
  %312 = load <4 x float>* %color
  %color224 = insertelement <4 x float> %312, float %311, i32 2
  store <4 x float> %color224, <4 x float>* %color
  %313 = load <4 x float>* %color
  %314 = extractelement <4 x float> %313, i32 3
  %315 = load float addrspace(2)* @d12, !gla.uniform !26
  %316 = fcmp olt float %314, %315
  br i1 %316, label %then225, label %else227

then225:                                          ; preds = %then223
  %317 = load <4 x float>* %color
  %318 = extractelement <4 x float> %317, i32 3
  %319 = fadd float %318, 1.000000e+00
  %320 = load <4 x float>* %color
  %color226 = insertelement <4 x float> %320, float %319, i32 3
  store <4 x float> %color226, <4 x float>* %color
  br label %ifmerge229

else227:                                          ; preds = %then223
  %321 = load <4 x float>* %color
  %322 = extractelement <4 x float> %321, i32 0
  %323 = fadd float %322, 1.000000e+00
  %324 = load <4 x float>* %color
  %color228 = insertelement <4 x float> %324, float %323, i32 0
  store <4 x float> %color228, <4 x float>* %color
  br label %ifmerge229

ifmerge229:                                       ; preds = %else227, %then225
  br label %loop-header218

post-loop-continue230:                            ; No predecessors!
  unreachable

ifmerge231:                                       ; preds = %ifmerge221
  %325 = load <4 x float>* %color
  %color232 = fadd <4 x float> %325, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color232, <4 x float>* %color
  br label %loop-merge234

post-loop-break233:                               ; No predecessors!
  unreachable

loop-merge234:                                    ; preds = %ifmerge231, %then219
  br label %loop-header235

loop-header235:                                   ; preds = %ifmerge244, %then241, %loop-merge234
  %326 = load <4 x float>* %color
  %327 = extractelement <4 x float> %326, i32 0
  %328 = fcmp olt float %327, 1.000000e+01
  %329 = xor i1 %328, true
  br i1 %329, label %then236, label %ifmerge238

then236:                                          ; preds = %loop-header235
  br label %loop-merge246

post-loop-break237:                               ; No predecessors!
  unreachable

ifmerge238:                                       ; preds = %loop-header235
  %330 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %331 = load <4 x float>* %color
  %color239 = fadd <4 x float> %331, %330
  store <4 x float> %color239, <4 x float>* %color
  %332 = load <4 x float>* %color
  %333 = extractelement <4 x float> %332, i32 2
  %334 = load float addrspace(2)* @d8, !gla.uniform !22
  %335 = fcmp olt float %333, %334
  br i1 %335, label %then240, label %ifmerge244

then240:                                          ; preds = %ifmerge238
  %336 = load <4 x float>* %color
  %337 = extractelement <4 x float> %336, i32 3
  %338 = load float addrspace(2)* @d6, !gla.uniform !18
  %339 = fcmp olt float %337, %338
  br i1 %339, label %then241, label %ifmerge243

then241:                                          ; preds = %then240
  br label %loop-header235

post-loop-continue242:                            ; No predecessors!
  unreachable

ifmerge243:                                       ; preds = %then240
  br label %ifmerge244

ifmerge244:                                       ; preds = %ifmerge238, %ifmerge243
  %340 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %341 = extractelement <4 x float> %340, i32 0
  %342 = load <4 x float>* %color
  %343 = extractelement <4 x float> %342, i32 1
  %344 = fadd float %343, %341
  %345 = load <4 x float>* %color
  %color245 = insertelement <4 x float> %345, float %344, i32 1
  store <4 x float> %color245, <4 x float>* %color
  br label %loop-header235

loop-merge246:                                    ; preds = %then236
  %346 = load <4 x float>* %color
  %color247 = fadd <4 x float> %346, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color247, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header248

loop-header248:                                   ; preds = %ifmerge255, %loop-merge246
  %347 = load <4 x float>* %color
  %348 = extractelement <4 x float> %347, i32 0
  %349 = load float addrspace(2)* @d14, !gla.uniform !28
  %350 = fcmp olt float %348, %349
  %351 = xor i1 %350, true
  br i1 %351, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  br label %loop-merge256

post-loop-break250:                               ; No predecessors!
  unreachable

ifmerge251:                                       ; preds = %loop-header248
  %352 = load <4 x float>* %color
  %353 = extractelement <4 x float> %352, i32 1
  %354 = load float addrspace(2)* @d15, !gla.uniform !29
  %355 = fcmp olt float %353, %354
  br i1 %355, label %then252, label %else253

then252:                                          ; preds = %ifmerge251
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  unreachable

else253:                                          ; preds = %ifmerge251
  %356 = load <4 x float>* %color
  %color254 = fadd <4 x float> %356, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color254, <4 x float>* %color
  br label %ifmerge255

ifmerge255:                                       ; preds = %else253
  br label %loop-header248

loop-merge256:                                    ; preds = %then249
  %357 = load <4 x float>* %color
  %color257 = fadd <4 x float> %357, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color257, <4 x float>* %color
  br label %loop-header258

loop-header258:                                   ; preds = %ifmerge261, %loop-merge256
  %358 = load <4 x float>* %color
  %359 = extractelement <4 x float> %358, i32 3
  %360 = load float addrspace(2)* @d16, !gla.uniform !30
  %361 = fcmp olt float %359, %360
  %362 = xor i1 %361, true
  br i1 %362, label %then259, label %ifmerge261

then259:                                          ; preds = %loop-header258
  br label %loop-merge263

post-loop-break260:                               ; No predecessors!
  unreachable

ifmerge261:                                       ; preds = %loop-header258
  %363 = load <4 x float>* %color
  %364 = extractelement <4 x float> %363, i32 3
  %365 = fadd float %364, 1.000000e+00
  %366 = load <4 x float>* %color
  %color262 = insertelement <4 x float> %366, float %365, i32 3
  store <4 x float> %color262, <4 x float>* %color
  br label %loop-header258

loop-merge263:                                    ; preds = %then259
  br label %loop-header264

loop-header264:                                   ; preds = %ifmerge271, %loop-merge263
  %367 = load <4 x float>* %color
  %368 = extractelement <4 x float> %367, i32 3
  %369 = load float addrspace(2)* @d2, !gla.uniform !7
  %370 = fcmp olt float %368, %369
  %371 = load <4 x float>* %color
  %372 = extractelement <4 x float> %371, i32 1
  %373 = load float addrspace(2)* @d3, !gla.uniform !8
  %374 = fcmp olt float %372, %373
  %375 = and i1 %370, %374
  %376 = xor i1 %375, true
  br i1 %376, label %then265, label %ifmerge267

then265:                                          ; preds = %loop-header264
  br label %loop-merge272

post-loop-break266:                               ; No predecessors!
  unreachable

ifmerge267:                                       ; preds = %loop-header264
  %377 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %378 = load <4 x float>* %color
  %color268 = fadd <4 x float> %378, %377
  store <4 x float> %color268, <4 x float>* %color
  %379 = load <4 x float>* %color
  %380 = extractelement <4 x float> %379, i32 2
  %381 = load float addrspace(2)* @d3, !gla.uniform !8
  %382 = fcmp olt float %380, %381
  br i1 %382, label %then269, label %ifmerge271

then269:                                          ; preds = %ifmerge267
  br label %stage-epilogue

post-return270:                                   ; No predecessors!
  unreachable

ifmerge271:                                       ; preds = %ifmerge267
  br label %loop-header264

loop-merge272:                                    ; preds = %then265
  br label %loop-header273

loop-header273:                                   ; preds = %loop-merge272
  br label %loop-body274

loop-body274:                                     ; preds = %loop-test279, %loop-header273
  %383 = load <4 x float>* %color
  %384 = extractelement <4 x float> %383, i32 1
  %385 = load float addrspace(2)* @d18, !gla.uniform !31
  %386 = fcmp olt float %384, %385
  br i1 %386, label %then275, label %ifmerge277

then275:                                          ; preds = %loop-body274
  br label %stage-epilogue

post-return276:                                   ; No predecessors!
  unreachable

ifmerge277:                                       ; preds = %loop-body274
  %387 = load <4 x float>* %color
  %color278 = fadd <4 x float> %387, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color278, <4 x float>* %color
  br label %loop-test279

loop-test279:                                     ; preds = %ifmerge277
  %388 = load <4 x float>* %color
  %389 = extractelement <4 x float> %388, i32 0
  %390 = load float addrspace(2)* @d17, !gla.uniform !32
  %391 = fcmp olt float %389, %390
  br i1 %391, label %loop-body274, label %loop-merge280

loop-merge280:                                    ; preds = %loop-test279
  br label %loop-header281

loop-header281:                                   ; preds = %ifmerge288, %loop-merge280
  %392 = load <4 x float>* %color
  %393 = extractelement <4 x float> %392, i32 1
  %394 = load float addrspace(2)* @d16, !gla.uniform !30
  %395 = fcmp olt float %393, %394
  %396 = xor i1 %395, true
  br i1 %396, label %then282, label %ifmerge284

then282:                                          ; preds = %loop-header281
  br label %loop-merge289

post-loop-break283:                               ; No predecessors!
  unreachable

ifmerge284:                                       ; preds = %loop-header281
  %397 = load <4 x float>* %color
  %398 = extractelement <4 x float> %397, i32 3
  %399 = load float addrspace(2)* @d16, !gla.uniform !30
  %400 = fcmp olt float %398, %399
  br i1 %400, label %then285, label %else286

then285:                                          ; preds = %ifmerge284
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  unreachable

else286:                                          ; preds = %ifmerge284
  %401 = load <4 x float>* %color
  %color287 = fadd <4 x float> %401, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color287, <4 x float>* %color
  br label %ifmerge288

ifmerge288:                                       ; preds = %else286
  br label %loop-header281

loop-merge289:                                    ; preds = %then282
  %402 = load <4 x float>* %color
  %color290 = fadd <4 x float> %402, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color290, <4 x float>* %color
  %gl_FragColor291 = load <4 x float>* %color
  store <4 x float> %gl_FragColor291, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge289, %then275, %then269, %then252
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then285
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor, align 16
  %0 = extractelement <4 x float> %color1, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select295.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select305.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select295.v
  %select305 = fadd <4 x float> %color1, %select305.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select305, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header18

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header18:                                    ; preds = %ifmerge21, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select294, %ifmerge21 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-header27

ifmerge21:                                        ; preds = %loop-header18
  %color22 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color22, i32 3
  %10 = fcmp olt float %9, %.pre
  %color25 = fadd <4 x float> %6, %color22
  %select294 = select i1 %10, <4 x float> %color22, <4 x float> %color25
  br label %loop-header18

loop-header27:                                    ; preds = %ifmerge30, %then19
  %color.3 = phi <4 x float> [ %color.2, %then19 ], [ %color31, %ifmerge30 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then28, label %ifmerge30

then28:                                           ; preds = %loop-header27
  %.pre307 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre308 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header33

ifmerge30:                                        ; preds = %loop-header27
  %color31 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header27

loop-header33:                                    ; preds = %ifmerge36, %then28
  %color.4 = phi <4 x float> [ %color.3, %then28 ], [ %color37, %ifmerge36 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre307
  %notrhs = fcmp uge float %15, %.pre308
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then34, label %ifmerge36

then34:                                           ; preds = %loop-header33
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header39

ifmerge36:                                        ; preds = %loop-header33
  %color37 = fadd <4 x float> %color.4, %13
  br label %loop-header33

loop-header39:                                    ; preds = %ifmerge46, %then34
  %color.5 = phi <4 x float> [ %color.4, %then34 ], [ %color47, %ifmerge46 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre308
  br i1 %20, label %then40, label %ifmerge42

then40:                                           ; preds = %loop-header39
  br label %loop-merge48

ifmerge42:                                        ; preds = %loop-header39
  %color43 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color43, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then44, label %ifmerge46

then44:                                           ; preds = %ifmerge42
  br label %loop-merge48

ifmerge46:                                        ; preds = %ifmerge42
  %color47 = fadd <4 x float> %17, %color43
  br label %loop-header39

loop-merge48:                                     ; preds = %then44, %then40
  %color.6 = phi <4 x float> [ %color.5, %then40 ], [ %color43, %then44 ]
  %.pre309 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header49

loop-header49:                                    ; preds = %ifmerge52, %loop-merge48
  %color.7 = phi <4 x float> [ %color.6, %loop-merge48 ], [ %color53, %ifmerge52 ]
  %i.0 = phi i32 [ 0, %loop-merge48 ], [ %i54, %ifmerge52 ]
  %24 = icmp slt i32 %i.0, %.pre309
  br i1 %24, label %ifmerge52, label %then50

then50:                                           ; preds = %loop-header49
  %.pre310 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-body

ifmerge52:                                        ; preds = %loop-header49
  %color53 = fadd <4 x float> %color.7, %23
  %i54 = add i32 %i.0, 1
  br label %loop-header49

loop-body:                                        ; preds = %loop-body, %then50
  %color.8 = phi <4 x float> [ %color.7, %then50 ], [ %color57, %loop-body ]
  %color57 = fadd <4 x float> %color.8, %.pre310
  %25 = extractelement <4 x float> %color57, i32 0
  %26 = fcmp olt float %25, %.pre307
  br i1 %26, label %loop-body, label %loop-merge58

loop-merge58:                                     ; preds = %loop-body
  %27 = extractelement <4 x float> %color57, i32 2
  %28 = fadd float %27, %.pre308
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color57, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre308
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre308
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre308
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre308
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre308
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre308
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre308
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre308
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre308
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre308
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre308
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre308
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre308
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre308
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre308
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre308
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre308
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre308
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre308
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre308
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre308
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre308
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre308
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre308
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre308
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre308
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre308
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre308
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre308
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre308
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre308
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre308
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre308
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre308
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre308
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre308
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre308
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre308
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre308
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre308
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre308
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header68

loop-header68:                                    ; preds = %ifmerge71, %loop-merge58
  %color.10 = phi <4 x float> [ %152, %loop-merge58 ], [ %select296, %ifmerge71 ]
  %i67.0 = phi i32 [ 0, %loop-merge58 ], [ %i6780, %ifmerge71 ]
  %exitcond355 = icmp eq i32 %i67.0, 100
  br i1 %exitcond355, label %then69, label %ifmerge71

then69:                                           ; preds = %loop-header68
  br label %loop-header83

ifmerge71:                                        ; preds = %loop-header68
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select296 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i6780 = add i32 %i67.0, 1
  br label %loop-header68

loop-header83:                                    ; preds = %ifmerge86, %then69
  %color.12 = phi <4 x float> [ %color.10, %then69 ], [ %select297, %ifmerge86 ]
  %i82.0 = phi i32 [ 0, %then69 ], [ %i8292, %ifmerge86 ]
  %exitcond354 = icmp eq i32 %i82.0, 120
  br i1 %exitcond354, label %then84, label %ifmerge86

then84:                                           ; preds = %loop-header83
  %161 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header95

ifmerge86:                                        ; preds = %loop-header83
  %162 = extractelement <4 x float> %color.12, i32 2
  %163 = fcmp olt float %162, 2.000000e+01
  %164 = extractelement <4 x float> %color.12, i32 0
  %165 = fadd float %164, 1.000000e+00
  %166 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %165, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %167 = extractelement <4 x float> %color.12, i32 1
  %168 = fadd float %167, 1.000000e+00
  %169 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %168, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select297 = select i1 %163, <4 x float> %166, <4 x float> %169
  %i8292 = add i32 %i82.0, 1
  br label %loop-header83

loop-header95:                                    ; preds = %ifmerge98, %then84
  %color.14 = phi <4 x float> [ %color.12, %then84 ], [ %select298, %ifmerge98 ]
  %i94.0 = phi i32 [ 0, %then84 ], [ %select299, %ifmerge98 ]
  %exitcond = icmp eq i32 %i94.0, 42
  br i1 %exitcond, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  br label %loop-header108

ifmerge98:                                        ; preds = %loop-header95
  %170 = extractelement <4 x float> %color.14, i32 2
  %171 = fadd float %170, %.pre308
  %172 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float undef, i32 undef)
  %173 = extractelement <4 x float> %color.14, i32 0
  %174 = fcmp olt float %173, %161
  %175 = extractelement <4 x float> %color.14, i32 3
  %176 = fadd float %175, 1.000000e+00
  %177 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float %176, i32 0)
  %select298 = select i1 %174, <4 x float> %172, <4 x float> %177
  %select299 = add i32 %i94.0, 1
  br label %loop-header95

loop-header108:                                   ; preds = %ifmerge115, %then96
  %color.15 = phi <4 x float> [ %color.14, %then96 ], [ %186, %ifmerge115 ]
  %i107.0 = phi i32 [ 0, %then96 ], [ %i107117, %ifmerge115 ]
  %178 = icmp sgt i32 %i107.0, 41
  br i1 %178, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-merge118

ifmerge111:                                       ; preds = %loop-header108
  %179 = extractelement <4 x float> %color.15, i32 2
  %180 = fadd float %179, %.pre308
  %181 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %180, i32 0, float undef, i32 undef)
  %182 = extractelement <4 x float> %color.15, i32 0
  %183 = fcmp olt float %182, %161
  br i1 %183, label %then113, label %ifmerge115

then113:                                          ; preds = %ifmerge111
  br label %loop-merge118

ifmerge115:                                       ; preds = %ifmerge111
  %184 = extractelement <4 x float> %color.15, i32 3
  %185 = fadd float %184, 1.000000e+00
  %186 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %181, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %185, i32 0)
  %i107117 = add i32 %i107.0, 1
  br label %loop-header108

loop-merge118:                                    ; preds = %then113, %then109
  %color.16 = phi <4 x float> [ %color.15, %then109 ], [ %181, %then113 ]
  %.pre311 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-body120

loop-body120:                                     ; preds = %loop-body120, %loop-merge118
  %color.17 = phi <4 x float> [ %color.16, %loop-merge118 ], [ %select300, %loop-body120 ]
  %color121 = fadd <4 x float> %color.17, %.pre311
  %187 = extractelement <4 x float> %color121, i32 0
  %188 = fcmp olt float %187, %161
  %189 = extractelement <4 x float> %color121, i32 1
  %190 = fcmp olt float %189, %161
  %191 = fadd float %161, %189
  %192 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color121, i32 2, float undef, i32 undef, float %191, i32 0, float undef, i32 undef, float undef, i32 undef)
  %193 = fadd float %161, %187
  %194 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color121, i32 1, float %193, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select = select i1 %190, <4 x float> %192, <4 x float> %194
  %select300 = select i1 %188, <4 x float> %color121, <4 x float> %select
  %195 = extractelement <4 x float> %select300, i32 2
  %196 = fcmp olt float %195, %161
  br i1 %196, label %loop-body120, label %loop-merge131

loop-merge131:                                    ; preds = %loop-body120
  %.pre313 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre314 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-body133

loop-body133:                                     ; preds = %loop-body133, %loop-merge131
  %color.20 = phi <4 x float> [ %select300, %loop-merge131 ], [ %select301, %loop-body133 ]
  %color134 = fadd <4 x float> %color.20, %.pre313
  %197 = extractelement <4 x float> %color134, i32 1
  %198 = fcmp olt float %197, %.pre314
  %199 = fadd float %.pre314, %197
  %200 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color134, i32 2, float undef, i32 undef, float %199, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select301 = select i1 %198, <4 x float> %200, <4 x float> %color134
  %201 = extractelement <4 x float> %select301, i32 0
  %202 = fcmp olt float %201, %.pre314
  br i1 %202, label %loop-body133, label %loop-merge139

loop-merge139:                                    ; preds = %loop-body133
  %203 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %204 = fcmp olt float %201, %203
  br i1 %204, label %then140, label %else147

then140:                                          ; preds = %loop-merge139
  %205 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header141

loop-header141:                                   ; preds = %ifmerge144, %then140
  %color.22 = phi <4 x float> [ %select301, %then140 ], [ %color145, %ifmerge144 ]
  %206 = extractelement <4 x float> %color.22, i32 1
  %207 = fcmp uge float %206, %203
  br i1 %207, label %then142, label %ifmerge144

then142:                                          ; preds = %loop-header141
  br label %ifmerge154

ifmerge144:                                       ; preds = %loop-header141
  %color145 = fadd <4 x float> %color.22, %205
  br label %loop-header141

else147:                                          ; preds = %loop-merge139
  %208 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %209 = extractelement <4 x float> %208, i32 2
  br label %loop-header148

loop-header148:                                   ; preds = %ifmerge151, %else147
  %color.23 = phi <4 x float> [ %select301, %else147 ], [ %213, %ifmerge151 ]
  %210 = extractelement <4 x float> %color.23, i32 2
  %211 = fcmp uge float %210, %203
  br i1 %211, label %then149, label %ifmerge151

then149:                                          ; preds = %loop-header148
  br label %ifmerge154

ifmerge151:                                       ; preds = %loop-header148
  %212 = fadd float %210, %209
  %213 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.23, i32 4, float undef, i32 undef, float undef, i32 undef, float %212, i32 0, float undef, i32 undef)
  br label %loop-header148

ifmerge154:                                       ; preds = %then149, %then142
  %214 = phi <4 x float> [ %205, %then142 ], [ %208, %then149 ]
  %color.24 = phi <4 x float> [ %color.22, %then142 ], [ %color.23, %then149 ]
  %215 = extractelement <4 x float> %color.24, i32 0
  %216 = fcmp olt float %215, %203
  br i1 %216, label %then155, label %else165

then155:                                          ; preds = %ifmerge154
  %217 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %218 = fcmp olt float %217, 1.000000e+00
  br label %loop-header156

loop-header156:                                   ; preds = %ifmerge159, %then155
  %color.25 = phi <4 x float> [ %color.24, %then155 ], [ %color160, %ifmerge159 ]
  %219 = extractelement <4 x float> %color.25, i32 1
  %220 = fcmp uge float %219, %203
  br i1 %220, label %then157, label %ifmerge159

then157:                                          ; preds = %loop-header156
  br label %loop-merge164

ifmerge159:                                       ; preds = %loop-header156
  %color160 = fadd <4 x float> %color.25, %214
  br i1 %218, label %then161, label %loop-header156

then161:                                          ; preds = %ifmerge159
  br label %loop-merge164

loop-merge164:                                    ; preds = %then161, %then157
  %color.26 = phi <4 x float> [ %color.25, %then157 ], [ %color160, %then161 ]
  br label %ifmerge172

else165:                                          ; preds = %ifmerge154
  %221 = extractelement <4 x float> %214, i32 2
  br label %loop-header166

loop-header166:                                   ; preds = %ifmerge169, %else165
  %color.27 = phi <4 x float> [ %color.24, %else165 ], [ %225, %ifmerge169 ]
  %222 = extractelement <4 x float> %color.27, i32 2
  %223 = fcmp uge float %222, %203
  br i1 %223, label %then167, label %ifmerge169

then167:                                          ; preds = %loop-header166
  br label %ifmerge172

ifmerge169:                                       ; preds = %loop-header166
  %224 = fadd float %222, %221
  %225 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.27, i32 4, float undef, i32 undef, float undef, i32 undef, float %224, i32 0, float undef, i32 undef)
  br label %loop-header166

ifmerge172:                                       ; preds = %then167, %loop-merge164
  %color.28 = phi <4 x float> [ %color.26, %loop-merge164 ], [ %color.27, %then167 ]
  %.pre315 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %226 = fcmp olt float %.pre315, 0.000000e+00
  %227 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %228 = fcmp olt float %.pre315, 1.000000e+00
  br label %loop-body174

loop-body174:                                     ; preds = %ifmerge182, %ifmerge172
  %color.29 = phi <4 x float> [ %color.28, %ifmerge172 ], [ %color183, %ifmerge182 ]
  br i1 %226, label %then175, label %ifmerge177

then175:                                          ; preds = %loop-body174
  br label %loop-merge185

ifmerge177:                                       ; preds = %loop-body174
  %color178 = fadd <4 x float> %color.29, %227
  br i1 %228, label %then179, label %ifmerge182

then179:                                          ; preds = %ifmerge177
  %229 = extractelement <4 x float> %color178, i32 2
  %230 = fadd float %229, 1.000000e+00
  %231 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color178, i32 4, float undef, i32 undef, float undef, i32 undef, float %230, i32 0, float undef, i32 undef)
  br label %loop-merge185

ifmerge182:                                       ; preds = %ifmerge177
  %color183 = fadd <4 x float> %color178, %color1
  br label %loop-body174

loop-merge185:                                    ; preds = %then179, %then175
  %color.30 = phi <4 x float> [ %color.29, %then175 ], [ %231, %then179 ]
  %.pre316 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %232 = fcmp olt float %.pre316, 0.000000e+00
  %233 = fcmp olt float %.pre316, 1.000000e+00
  br label %loop-body187

loop-body187:                                     ; preds = %ifmerge200, %loop-merge185
  %color.31 = phi <4 x float> [ %color.30, %loop-merge185 ], [ %color201, %ifmerge200 ]
  br i1 %232, label %then188, label %ifmerge190

then188:                                          ; preds = %loop-body187
  br label %loop-merge203

ifmerge190:                                       ; preds = %loop-body187
  %color191 = fadd <4 x float> %color.31, %227
  br i1 %233, label %then192, label %ifmerge200

then192:                                          ; preds = %ifmerge190
  %234 = extractelement <4 x float> %color191, i32 2
  %235 = fadd float %234, 1.000000e+00
  %236 = fcmp olt float %.pre316, 2.000000e+00
  %237 = extractelement <4 x float> %color191, i32 1
  %238 = fadd float %237, 1.000000e+00
  %239 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color191, i32 6, float undef, i32 undef, float %238, i32 0, float %235, i32 0, float undef, i32 undef)
  %240 = extractelement <4 x float> %color191, i32 0
  %241 = fadd float %240, 1.000000e+00
  %242 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color191, i32 5, float %241, i32 0, float undef, i32 undef, float %235, i32 0, float undef, i32 undef)
  %select302 = select i1 %236, <4 x float> %239, <4 x float> %242
  br label %loop-merge203

ifmerge200:                                       ; preds = %ifmerge190
  %color201 = fadd <4 x float> %color191, %color1
  %243 = extractelement <4 x float> %color201, i32 2
  %244 = fcmp olt float %243, %.pre316
  br i1 %244, label %loop-body187, label %loop-merge203.loopexit

loop-merge203.loopexit:                           ; preds = %ifmerge200
  br label %loop-merge203

loop-merge203:                                    ; preds = %loop-merge203.loopexit, %then192, %then188
  %color.33 = phi <4 x float> [ %color.31, %then188 ], [ %select302, %then192 ], [ %color201, %loop-merge203.loopexit ]
  %.pre317 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %245 = fcmp ogt float %.pre317, %.pre316
  br label %loop-header204

loop-header204:                                   ; preds = %ifmerge216, %loop-merge203
  %color.34 = phi <4 x float> [ %color.33, %loop-merge203 ], [ %color.36, %ifmerge216 ]
  %246 = extractelement <4 x float> %color.34, i32 3
  %247 = fcmp uge float %246, %.pre317
  br i1 %247, label %then205, label %ifmerge207

then205:                                          ; preds = %loop-header204
  br label %loop-merge217

ifmerge207:                                       ; preds = %loop-header204
  br i1 %245, label %then208, label %ifmerge216

then208:                                          ; preds = %ifmerge207
  %248 = extractelement <4 x float> %color.34, i32 0
  %249 = fcmp ugt float %248, %.pre315
  br i1 %249, label %ifmerge215, label %then209

then209:                                          ; preds = %then208
  %250 = extractelement <4 x float> %color.34, i32 2
  %251 = fcmp oeq float %250, 5.000000e+00
  br i1 %251, label %then210, label %else212

then210:                                          ; preds = %then209
  %252 = fadd float %246, 1.000000e+00
  %253 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.34, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %252, i32 0)
  br label %ifmerge215

else212:                                          ; preds = %then209
  br label %loop-merge217

ifmerge215:                                       ; preds = %then208, %then210
  %color.35 = phi <4 x float> [ %253, %then210 ], [ %color.34, %then208 ]
  br label %ifmerge216

ifmerge216:                                       ; preds = %ifmerge207, %ifmerge215
  %color.36 = phi <4 x float> [ %color.35, %ifmerge215 ], [ %color.34, %ifmerge207 ]
  br label %loop-header204

loop-merge217:                                    ; preds = %else212, %then205
  %.pre318 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %254 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %255 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header218

loop-header218:                                   ; preds = %then223, %loop-merge217
  %color.37 = phi <4 x float> [ %color.34, %loop-merge217 ], [ %select303, %then223 ]
  %256 = extractelement <4 x float> %color.37, i32 2
  %257 = fcmp uge float %256, %.pre318
  br i1 %257, label %then219, label %ifmerge221

then219:                                          ; preds = %loop-header218
  br label %loop-merge234

ifmerge221:                                       ; preds = %loop-header218
  %258 = extractelement <4 x float> %color.37, i32 1
  %259 = fadd float %258, 1.000000e+00
  %260 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.37, i32 2, float undef, i32 undef, float %259, i32 0, float undef, i32 undef, float undef, i32 undef)
  %261 = fcmp olt float %259, %254
  br i1 %261, label %then223, label %ifmerge231

then223:                                          ; preds = %ifmerge221
  %262 = fadd float %256, 1.000000e+00
  %263 = extractelement <4 x float> %color.37, i32 3
  %264 = fcmp olt float %263, %255
  %265 = fadd float %263, 1.000000e+00
  %266 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 12, float undef, i32 undef, float undef, i32 undef, float %262, i32 0, float %265, i32 0)
  %267 = extractelement <4 x float> %color.37, i32 0
  %268 = fadd float %267, 1.000000e+00
  %269 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 5, float %268, i32 0, float undef, i32 undef, float %262, i32 0, float undef, i32 undef)
  %select303 = select i1 %264, <4 x float> %266, <4 x float> %269
  br label %loop-header218

ifmerge231:                                       ; preds = %ifmerge221
  %color232 = fadd <4 x float> %260, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge234

loop-merge234:                                    ; preds = %ifmerge231, %then219
  %color.39 = phi <4 x float> [ %color.37, %then219 ], [ %color232, %ifmerge231 ]
  %270 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %271 = extractelement <4 x float> %270, i32 0
  br label %loop-header235

loop-header235:                                   ; preds = %ifmerge238, %loop-merge234
  %color.40 = phi <4 x float> [ %color.39, %loop-merge234 ], [ %select306, %ifmerge238 ]
  %272 = extractelement <4 x float> %color.40, i32 0
  %273 = fcmp uge float %272, 1.000000e+01
  br i1 %273, label %then236, label %ifmerge238

then236:                                          ; preds = %loop-header235
  %color247 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color247, <4 x float>* @gl_FragColor, align 16
  %.pre319 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %274 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header248

ifmerge238:                                       ; preds = %loop-header235
  %color239 = fadd <4 x float> %color.40, %270
  %275 = extractelement <4 x float> %color239, i32 2
  %276 = fcmp olt float %275, %.pre316
  %277 = extractelement <4 x float> %color239, i32 3
  %278 = fcmp olt float %277, %203
  %279 = extractelement <4 x float> %color239, i32 1
  %280 = fadd float %279, %271
  %281 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color239, i32 2, float undef, i32 undef, float %280, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select304 = select i1 %278, <4 x float> %color239, <4 x float> %281
  %select306 = select i1 %276, <4 x float> %select304, <4 x float> %281
  br label %loop-header235

loop-header248:                                   ; preds = %else253, %then236
  %color.41 = phi <4 x float> [ %color247, %then236 ], [ %color254, %else253 ]
  %282 = extractelement <4 x float> %color.41, i32 0
  %283 = fcmp uge float %282, %.pre319
  br i1 %283, label %then249, label %ifmerge251

then249:                                          ; preds = %loop-header248
  %color257 = fadd <4 x float> %color.41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre320 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header258

ifmerge251:                                       ; preds = %loop-header248
  %284 = extractelement <4 x float> %color.41, i32 1
  %285 = fcmp olt float %284, %274
  br i1 %285, label %then252, label %else253

then252:                                          ; preds = %ifmerge251
  br label %stage-epilogue

else253:                                          ; preds = %ifmerge251
  %color254 = fadd <4 x float> %color.41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header248

loop-header258:                                   ; preds = %ifmerge261, %then249
  %color.42 = phi <4 x float> [ %color257, %then249 ], [ %290, %ifmerge261 ]
  %286 = extractelement <4 x float> %color.42, i32 3
  %287 = fcmp uge float %286, %.pre320
  br i1 %287, label %then259, label %ifmerge261

then259:                                          ; preds = %loop-header258
  %288 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header264

ifmerge261:                                       ; preds = %loop-header258
  %289 = fadd float %286, 1.000000e+00
  %290 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.42, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %289, i32 0)
  br label %loop-header258

loop-header264:                                   ; preds = %ifmerge267, %then259
  %color.43 = phi <4 x float> [ %color.42, %then259 ], [ %color268, %ifmerge267 ]
  %291 = extractelement <4 x float> %color.43, i32 3
  %292 = extractelement <4 x float> %color.43, i32 1
  %notlhs292 = fcmp uge float %291, %.pre307
  %notrhs293 = fcmp uge float %292, %.pre308
  %293 = or i1 %notrhs293, %notlhs292
  br i1 %293, label %then265, label %ifmerge267

then265:                                          ; preds = %loop-header264
  %.pre321 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %294 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-body274

ifmerge267:                                       ; preds = %loop-header264
  %color268 = fadd <4 x float> %color.43, %288
  %295 = extractelement <4 x float> %color268, i32 2
  %296 = fcmp olt float %295, %.pre308
  br i1 %296, label %then269, label %loop-header264

then269:                                          ; preds = %ifmerge267
  br label %stage-epilogue

loop-body274:                                     ; preds = %ifmerge277, %then265
  %color.44 = phi <4 x float> [ %color.43, %then265 ], [ %color278, %ifmerge277 ]
  %297 = extractelement <4 x float> %color.44, i32 1
  %298 = fcmp olt float %297, %.pre321
  br i1 %298, label %then275, label %ifmerge277

then275:                                          ; preds = %loop-body274
  br label %stage-epilogue

ifmerge277:                                       ; preds = %loop-body274
  %color278 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %299 = extractelement <4 x float> %color278, i32 0
  %300 = fcmp olt float %299, %294
  br i1 %300, label %loop-body274, label %loop-merge280

loop-merge280:                                    ; preds = %ifmerge277
  br label %loop-header281

loop-header281:                                   ; preds = %else286, %loop-merge280
  %color.45 = phi <4 x float> [ %color278, %loop-merge280 ], [ %color287, %else286 ]
  %301 = extractelement <4 x float> %color.45, i32 1
  %302 = fcmp uge float %301, %.pre320
  br i1 %302, label %then282, label %ifmerge284

then282:                                          ; preds = %loop-header281
  %color290 = fadd <4 x float> %color.45, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color290, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

ifmerge284:                                       ; preds = %loop-header281
  %303 = extractelement <4 x float> %color.45, i32 3
  %304 = fcmp olt float %303, %.pre320
  br i1 %304, label %then285, label %else286

then285:                                          ; preds = %ifmerge284
  call void @llvm.gla.discard()
  br label %stage-exit

else286:                                          ; preds = %ifmerge284
  %color287 = fadd <4 x float> %color.45, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header281

stage-epilogue:                                   ; preds = %then282, %then275, %then269, %then252
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then285
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 color61;
const int C_0 = 0;
vec4 color91;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 Lg_5;
const int C_1 = 1;
vec4 select8;
vec4 select9;
float Lg_6;
vec4 colord1;
const float C_0d0 = 0.0;
vec4 colore1;
vec4 colorg1;
const float C_2d0 = 2.0;
vec4 colorh1;
const float C_5d0 = 5.0;
vec4 Lg_7;
const float C_10d0 = 10.0;
vec4 colorn1;

void main()
{
	vec4 color;
	vec4 color1;
	vec4 color2;
	vec4 color3;
	vec4 color4;
	vec4 color5;
	vec4 color6;
	int i;
	vec4 color7;
	vec4 color8;
	int Lg_1;
	vec4 color9;
	int Lg_2;
	vec4 colora;
	int Lg_3;
	vec4 colorb;
	int Lg_4;
	vec4 colorc;
	vec4 colord;
	vec4 colore;
	vec4 colorf;
	vec4 colorg;
	vec4 colorh;
	vec4 colori;
	vec4 colorj;
	vec4 colork;
	vec4 colorl;
	vec4 colorm;
	vec4 colorn;
	vec4 coloro;
	vec4 colorp;
	vec4 colorq;
	vec4 colorr;
	vec4 colors;
	vec4 colort;
	vec4 coloru;
	vec4 colorv;
	vec4 colorw;
	vec4 colorx;
	vec4 colory;
	vec4 colorz;
	vec4 color01;
	bool H_bghf2q1 = BaseColor.x < C_0d33;
	bool H_9j9phn = BaseColor.x < C_0d66;
	vec4 select = H_9j9phn ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 select1 = H_bghf2q1 ? C_vec4p0d33p : select;
	vec4 select2 = BaseColor + select1;
	color = select2;
	while (color.x < d) {
		vec4 color11 = bigColor + color;
		color = color11;
	}
	
	color1 = color;
	while (color1.z < d) {
		vec4 color21 = bigColor1_1 + color1;
		bool H_28748h = color21.w < d;
		vec4 color31 = bigColor1_1 + color21;
		vec4 select3 = H_28748h ? color21 : color31;
		color1 = select3;
	}
	
	color2 = color1;
	while (color2.x < C_42d0) {
		vec4 color41 = color2 + C_vec4p1d0p;
		color2 = color41;
	}
	
	color3 = color2;
	while (true) {
		bool notlhs = color3.w >= d2;
		bool notrhs = color3.y >= d3;
		bool H_nbn92x = notrhs || notlhs;
		if (H_nbn92x) {
			break;
		}
		
		vec4 color51 = bigColor1_2 + color3;
		color3 = color51;
	}
	
	color4 = color3;
	color5 = color4;
	while (color4.z < d3) {
		color61 = bigColor1_3 + color4;
		bool H_cp7uj51 = color61.y < d4;
		if (H_cp7uj51) {
			color5 = color61;
			break;
		}
		
		vec4 color71 = bigColor1_3 + color61;
		color4 = color71;
		color5 = color4;
	}
	
	color6 = color5;
	i = C_0;
	for (i = 0; i < Count; ++i) {
		vec4 color81 = bigColor2 + color6;
		color6 = color81;
	}
	
	color7 = color6;
	while (true) {
		color91 = bigColor3 + color7;
		bool H_ijthug1 = color91.x < d2;
		if (! H_ijthug1) {
			break;
		}
		
		color7 = color91;
	}
	
	float H_whexx6 = color91.z + d3;
	vec4 H_eyhjdu = color91;
	H_eyhjdu.z = H_whexx6;
	float H_r8jpbt1 = H_eyhjdu.z + d3;
	vec4 H_rl164k1 = H_eyhjdu;
	H_rl164k1.z = H_r8jpbt1;
	float H_jm57691 = H_rl164k1.z + d3;
	vec4 H_r9rsbw = H_rl164k1;
	H_r9rsbw.z = H_jm57691;
	float H_teod78 = H_r9rsbw.z + d3;
	vec4 H_xhaazp1 = H_r9rsbw;
	H_xhaazp1.z = H_teod78;
	float H_r86qnl1 = H_xhaazp1.z + d3;
	vec4 H_zfnbra1 = H_xhaazp1;
	H_zfnbra1.z = H_r86qnl1;
	float H_6u1wt61 = H_zfnbra1.z + d3;
	vec4 H_0dg3w = H_zfnbra1;
	H_0dg3w.z = H_6u1wt61;
	float H_v8xbk61 = H_0dg3w.z + d3;
	vec4 H_v3dvd3 = H_0dg3w;
	H_v3dvd3.z = H_v8xbk61;
	float H_2f0g8y1 = H_v3dvd3.z + d3;
	vec4 H_g9fwjf = H_v3dvd3;
	H_g9fwjf.z = H_2f0g8y1;
	float H_zmpw1p1 = H_g9fwjf.z + d3;
	vec4 H_7ir20v1 = H_g9fwjf;
	H_7ir20v1.z = H_zmpw1p1;
	float H_ldm5g11 = H_7ir20v1.z + d3;
	vec4 H_d59hcd = H_7ir20v1;
	H_d59hcd.z = H_ldm5g11;
	float H_9bdgf31 = H_d59hcd.z + d3;
	vec4 H_lcl6l2 = H_d59hcd;
	H_lcl6l2.z = H_9bdgf31;
	float H_hur0wd = H_lcl6l2.z + d3;
	vec4 H_1okb3r = H_lcl6l2;
	H_1okb3r.z = H_hur0wd;
	float H_6rhtxy = H_1okb3r.z + d3;
	vec4 H_sxxc8l = H_1okb3r;
	H_sxxc8l.z = H_6rhtxy;
	float H_k3oo5n = H_sxxc8l.z + d3;
	vec4 H_61r0841 = H_sxxc8l;
	H_61r0841.z = H_k3oo5n;
	float H_wiryko = H_61r0841.z + d3;
	vec4 H_iomeyc = H_61r0841;
	H_iomeyc.z = H_wiryko;
	float H_cwto6a1 = H_iomeyc.z + d3;
	vec4 H_qxsych = H_iomeyc;
	H_qxsych.z = H_cwto6a1;
	float H_4eyrkk = H_qxsych.z + d3;
	vec4 H_ynulb9 = H_qxsych;
	H_ynulb9.z = H_4eyrkk;
	float H_fpocnt = H_ynulb9.z + d3;
	vec4 H_rvbgqc1 = H_ynulb9;
	H_rvbgqc1.z = H_fpocnt;
	float H_c7h3pk1 = H_rvbgqc1.z + d3;
	vec4 H_etvtj81 = H_rvbgqc1;
	H_etvtj81.z = H_c7h3pk1;
	float H_epfg401 = H_etvtj81.z + d3;
	vec4 H_gok8ar = H_etvtj81;
	H_gok8ar.z = H_epfg401;
	float H_s31wpc1 = H_gok8ar.z + d3;
	vec4 H_ichz901 = H_gok8ar;
	H_ichz901.z = H_s31wpc1;
	float H_k5wcuv = H_ichz901.z + d3;
	vec4 H_2genf51 = H_ichz901;
	H_2genf51.z = H_k5wcuv;
	float H_2oqnl8 = H_2genf51.z + d3;
	vec4 H_wsih881 = H_2genf51;
	H_wsih881.z = H_2oqnl8;
	float H_oxwqoj1 = H_wsih881.z + d3;
	vec4 H_mqenm1 = H_wsih881;
	H_mqenm1.z = H_oxwqoj1;
	float H_ra85mi1 = H_mqenm1.z + d3;
	vec4 H_jhskoo1 = H_mqenm1;
	H_jhskoo1.z = H_ra85mi1;
	float H_xh74801 = H_jhskoo1.z + d3;
	vec4 H_tmxmk3 = H_jhskoo1;
	H_tmxmk3.z = H_xh74801;
	float H_0ep6up = H_tmxmk3.z + d3;
	vec4 H_aeu3g5 = H_tmxmk3;
	H_aeu3g5.z = H_0ep6up;
	float H_wh8qon = H_aeu3g5.z + d3;
	vec4 H_ee08ce = H_aeu3g5;
	H_ee08ce.z = H_wh8qon;
	float H_0lojdy = H_ee08ce.z + d3;
	vec4 H_21bzs01 = H_ee08ce;
	H_21bzs01.z = H_0lojdy;
	float H_58mfy = H_21bzs01.z + d3;
	vec4 H_lgencq = H_21bzs01;
	H_lgencq.z = H_58mfy;
	float H_865c43 = H_lgencq.z + d3;
	vec4 H_6tlzz31 = H_lgencq;
	H_6tlzz31.z = H_865c43;
	float H_0ob62j1 = H_6tlzz31.z + d3;
	vec4 H_6hi82r1 = H_6tlzz31;
	H_6hi82r1.z = H_0ob62j1;
	float H_gclhqq = H_6hi82r1.z + d3;
	vec4 H_ie893v1 = H_6hi82r1;
	H_ie893v1.z = H_gclhqq;
	float H_bqtmch1 = H_ie893v1.z + d3;
	vec4 H_vyhe23 = H_ie893v1;
	H_vyhe23.z = H_bqtmch1;
	float H_h0exes1 = H_vyhe23.z + d3;
	vec4 H_5lwuln1 = H_vyhe23;
	H_5lwuln1.z = H_h0exes1;
	float H_cx9xbb = H_5lwuln1.z + d3;
	vec4 H_eb4yqa = H_5lwuln1;
	H_eb4yqa.z = H_cx9xbb;
	float H_81hi4x = H_eb4yqa.z + d3;
	vec4 H_u4n3lt = H_eb4yqa;
	H_u4n3lt.z = H_81hi4x;
	float H_kj94nv = H_u4n3lt.z + d3;
	vec4 H_2mfj451 = H_u4n3lt;
	H_2mfj451.z = H_kj94nv;
	float H_5zwnye1 = H_2mfj451.z + d3;
	vec4 H_5lc5fh = H_2mfj451;
	H_5lc5fh.z = H_5zwnye1;
	float H_vb1m6c1 = H_5lc5fh.z + d3;
	vec4 H_rlcp8b1 = H_5lc5fh;
	H_rlcp8b1.z = H_vb1m6c1;
	float H_kljeh71 = H_rlcp8b1.z + d3;
	vec4 H_24aovh = H_rlcp8b1;
	H_24aovh.z = H_kljeh71;
	float H_ack95d1 = H_24aovh.z + d3;
	vec4 H_cbxqcb1 = H_24aovh;
	H_cbxqcb1.z = H_ack95d1;
	color8 = H_cbxqcb1;
	Lg_1 = C_0;
	for ( ; Lg_1 != 100; ++Lg_1) {
		bool H_ouigu9 = color8.z < C_20d0;
		float H_i27ik71 = color8.x + C_1d0;
		vec4 H_wgo1rc = color8;
		H_wgo1rc.x = H_i27ik71;
		float H_tyie6w1 = C_1d0 + color8.y;
		vec4 H_wgo1rcr = color8;
		H_wgo1rcr.y = H_tyie6w1;
		vec4 select4 = H_ouigu9 ? H_wgo1rc : H_wgo1rcr;
		color8 = select4;
	}
	
	color9 = color8;
	Lg_2 = C_0;
	for ( ; Lg_2 != 120; ++Lg_2) {
		bool H_dkcc0l1 = color9.z < C_20d0;
		float H_5t8tep = C_1d0 + color9.x;
		vec4 H_v5a11d = color9;
		H_v5a11d.x = H_5t8tep;
		float H_64nt4p = C_1d0 + color9.y;
		vec4 H_v5a11dr = color9;
		H_v5a11dr.y = H_64nt4p;
		vec4 select5 = H_dkcc0l1 ? H_v5a11d : H_v5a11dr;
		color9 = select5;
	}
	
	colora = color9;
	Lg_3 = C_0;
	for ( ; Lg_3 != 42; ++Lg_3) {
		float H_bthy3g = colora.z + d3;
		vec4 H_ze6hx1 = colora;
		H_ze6hx1.z = H_bthy3g;
		bool H_nda4t5 = colora.x < d4;
		float H_0bsj8w1 = C_1d0 + colora.w;
		vec4 H_ze6hx1r = colora;
		H_ze6hx1r.zw = vec2(H_bthy3g, H_0bsj8w1);
		vec4 select6 = H_nda4t5 ? H_ze6hx1 : H_ze6hx1r;
		colora = select6;
	}
	
	colorb = colora;
	Lg_4 = C_0;
	colorc = colorb;
	while (Lg_4 <= C_41) {
		float H_0f3y181 = colorb.z + d3;
		Lg_5 = colorb;
		Lg_5.z = H_0f3y181;
		bool H_0rnct = colorb.x < d4;
		if (H_0rnct) {
			colorc = Lg_5;
			break;
		}
		
		float H_heycbr = C_1d0 + colorb.w;
		vec4 H_0vqk2y = Lg_5;
		H_0vqk2y.w = H_heycbr;
		int H_zk97sd1 = Lg_4 + C_1;
		colorb = H_0vqk2y;
		Lg_4 = H_zk97sd1;
		colorc = colorb;
	}
	
	colord = colorc;
	while (true) {
		vec4 colora1 = bigColor4 + colord;
		bool H_wfbsrv1 = colora1.x < d4;
		bool H_l4he8s1 = colora1.y < d4;
		float H_ejmt1t1 = colora1.y + d4;
		vec4 H_egrhpy = colora1;
		H_egrhpy.y = H_ejmt1t1;
		float H_jeh00b1 = colora1.x + d4;
		vec4 H_egrhpyr = colora1;
		H_egrhpyr.x = H_jeh00b1;
		vec4 select7 = H_l4he8s1 ? H_egrhpy : H_egrhpyr;
		select8 = H_wfbsrv1 ? colora1 : select7;
		bool H_hxwloo = select8.z < d4;
		if (! H_hxwloo) {
			break;
		}
		
		colord = select8;
	}
	
	colore = select8;
	while (true) {
		vec4 colorb1 = bigColor5 + colore;
		bool H_z5hy3o = colorb1.y < d5;
		float H_g4jirs1 = colorb1.y + d5;
		vec4 H_hbtye1 = colorb1;
		H_hbtye1.y = H_g4jirs1;
		select9 = H_z5hy3o ? H_hbtye1 : colorb1;
		bool H_5otk5o = select9.x < d5;
		if (! H_5otk5o) {
			break;
		}
		
		colore = select9;
	}
	
	bool H_8l0mbn = select9.x < d6;
	if (H_8l0mbn) {
		colorf = select9;
		while (colorf.y < d6) {
			vec4 colorc1 = bigColor6 + colorf;
			colorf = colorc1;
		}
		
		colorh = colorf;
	} else {
		colorg = select9;
		while (colorg.z < d6) {
			float H_9z12ld1 = bigColor6.z + colorg.z;
			vec4 H_tksel3 = colorg;
			H_tksel3.z = H_9z12ld1;
			colorg = H_tksel3;
		}
		
		colorh = colorg;
	}
	
	bool H_s3gwv91 = colorh.x < d6;
	if (H_s3gwv91) {
		bool H_lmykhx1 = d7 < C_1d0;
		colori = colorh;
		colorj = colori;
		while (colori.y < d6) {
			colord1 = bigColor6 + colori;
			if (H_lmykhx1) {
				colorj = colord1;
				break;
			}
			
			colori = colord1;
			colorj = colori;
		}
		
		colorl = colorj;
	} else {
		colork = colorh;
		while (colork.z < d6) {
			float H_5b1cdw1 = bigColor6.z + colork.z;
			vec4 H_59kj9 = colork;
			H_59kj9.z = H_5b1cdw1;
			colork = H_59kj9;
		}
		
		colorl = colork;
	}
	
	bool H_2ecxn2 = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	colorm = colorl;
	while (true) {
		if (H_2ecxn2) {
			colorn = colorm;
			break;
		}
		
		colore1 = bigColor7 + colorm;
		if (H_lmykhx1r) {
			float H_2h17h = C_1d0 + colore1.z;
			vec4 H_airzhw = colore1;
			H_airzhw.z = H_2h17h;
			colorn = H_airzhw;
			break;
		}
		
		vec4 colorf1 = BaseColor + colore1;
		colorm = colorf1;
	}
	
	bool H_zt4vz81 = d8 < C_0d0;
	bool H_cokhy9 = d8 < C_1d0;
	coloro = colorn;
	while (true) {
		if (H_zt4vz81) {
			colorp = coloro;
			break;
		}
		
		colorg1 = bigColor7 + coloro;
		if (H_cokhy9) {
			float H_k5f2xg = C_1d0 + colorg1.z;
			bool H_hrxnuy1 = d8 < C_2d0;
			float H_h881rh = C_1d0 + colorg1.y;
			vec4 H_wta1uz = colorg1;
			H_wta1uz.yz = vec2(H_h881rh, H_k5f2xg);
			float H_ijm1hh = C_1d0 + colorg1.x;
			vec4 H_wta1uzr = colorg1;
			H_wta1uzr.xz = vec2(H_ijm1hh, H_k5f2xg);
			vec4 selecta = H_hrxnuy1 ? H_wta1uz : H_wta1uzr;
			colorp = selecta;
			break;
		}
		
		colorh1 = BaseColor + colorg1;
		bool H_9va71v1 = colorh1.z < d8;
		if (! H_9va71v1) {
			colorp = colorh1;
			break;
		}
		
		coloro = colorh1;
	}
	
	bool H_45lodh = d9 > d8;
	colorq = colorp;
	while (colorq.w < d9) {
		colors = colorq;
		if (H_45lodh) {
			bool H_kfralj = colorq.x > d7;
			colorr = colorq;
			if (! H_kfralj) {
				bool H_u9htxo = colorq.z == C_5d0;
				if (! H_u9htxo) {
					break;
				}
				
				float H_s84pya = C_1d0 + colorq.w;
				vec4 H_jalriw1 = colorq;
				H_jalriw1.w = H_s84pya;
				colorr = H_jalriw1;
			}
			
			colors = colorr;
		}
		
		colorq = colors;
	}
	
	colort = colorq;
	coloru = colort;
	while (colort.z < d10) {
		float H_906no3 = C_1d0 + colort.y;
		Lg_7 = colort;
		Lg_7.y = H_906no3;
		bool H_h329lb1 = H_906no3 < d11;
		if (! H_h329lb1) {
			vec4 colori1 = C_vec4p1d0p + Lg_7;
			coloru = colori1;
			break;
		}
		
		float H_cxcou2 = C_1d0 + colort.z;
		bool H_c8m0ti = colort.w < d12;
		float H_zx6jg6 = C_1d0 + colort.w;
		vec4 H_y8yjmy = Lg_7;
		H_y8yjmy.zw = vec2(H_cxcou2, H_zx6jg6);
		float H_abkne3 = C_1d0 + colort.x;
		vec4 H_y8yjmyr = Lg_7;
		H_y8yjmyr.xz = vec2(H_abkne3, H_cxcou2);
		vec4 selectb = H_c8m0ti ? H_y8yjmy : H_y8yjmyr;
		colort = selectb;
		coloru = colort;
	}
	
	colorv = coloru;
	while (colorv.x < C_10d0) {
		vec4 colorj1 = bigColor8 + colorv;
		bool H_f99dxf1 = colorj1.z < d8;
		bool H_sm96gh1 = colorj1.w < d6;
		float H_8im07j = bigColor8.x + colorj1.y;
		vec4 H_1tnwgw = colorj1;
		H_1tnwgw.y = H_8im07j;
		vec4 selectc = H_sm96gh1 ? colorj1 : H_1tnwgw;
		vec4 selectd = H_f99dxf1 ? selectc : H_1tnwgw;
		colorv = selectd;
	}
	
	vec4 colork1 = C_vec4p1d0p + colorv;
	gl_FragColor = colork1;
	colorw = colork1;
	while (colorw.x < d14) {
		bool H_2es7t7 = colorw.y < d15;
		if (H_2es7t7) {
			return;
		}
		
		vec4 colorl1 = C_vec4p1d0p + colorw;
		colorw = colorl1;
	}
	
	vec4 colorm1 = C_vec4p1d0p + colorw;
	colorx = colorm1;
	while (colorx.w < d16) {
		float H_zaeepd = C_1d0 + colorx.w;
		vec4 H_s16v0u1 = colorx;
		H_s16v0u1.w = H_zaeepd;
		colorx = H_s16v0u1;
	}
	
	colory = colorx;
	while (true) {
		bool notlhs1 = colory.w >= d2;
		bool notrhs1 = colory.y >= d3;
		bool H_9acxdp1 = notrhs1 || notlhs1;
		if (H_9acxdp1) {
			colorz = colory;
			while (colorz.y >= d18) {
				colorn1 = C_vec4p1d0p + colorz;
				bool H_zpm6ma1 = colorn1.x < d17;
				if (! H_zpm6ma1) {
					color01 = colorn1;
					while (color01.y < d16) {
						bool H_z37o2g1 = color01.w < d16;
						if (H_z37o2g1) {
							discard;
						}
						
						vec4 coloro1 = C_vec4p1d0p + color01;
						color01 = coloro1;
					}
					
					vec4 colorp1 = C_vec4p1d0p + color01;
					gl_FragColor = colorp1;
					return;
				}
				
				colorz = colorn1;
			}
			
			return;
		}
		
		vec4 colorq1 = bigColor1_2 + colory;
		bool H_33cymd1 = colorq1.z < d3;
		if (H_33cymd1) {
			
		}
		
		colory = colorq1;
	}
	
}

#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 colorg;
const int C_0 = 0;
vec4 colorj;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 Lg_1;
const int C_1 = 1;
vec4 colora2;
vec4 select7;
float Lg_2;
vec4 colord1;
const float C_0d0 = 0.0;
vec4 colore1;
vec4 colorg1;
const float C_2d0 = 2.0;
vec4 colorh1;
const float C_5d0 = 5.0;
vec4 Lg_3;
const float C_10d0 = 10.0;
vec4 colorn1;

void main()
{
	vec4 color;
	vec4 color1;
	vec4 color2;
	vec4 color3;
	vec4 color4;
	vec4 color5;
	int i;
	vec4 color6;
	vec4 color7;
	int Lg_;
	vec4 color8;
	int Lg_1;
	vec4 color9;
	int Lg_2;
	vec4 colora;
	vec4 colorc;
	int Lg_3;
	vec4 colorc1;
	vec4 colord;
	vec4 colore;
	vec4 colorf;
	vec4 colorg;
	vec4 colorh;
	vec4 colorj;
	vec4 colorj1;
	vec4 colork;
	vec4 colorl;
	vec4 colorm;
	vec4 colorn;
	vec4 coloro;
	vec4 colorp;
	vec4 colorq;
	vec4 colorr;
	vec4 colors;
	vec4 colort;
	vec4 coloru;
	vec4 colorv;
	vec4 colorw;
	vec4 colorx;
	vec4 colory;
	vec4 colorz;
	vec4 colora;
	bool H_bghf2q = BaseColor.x < C_0d33;
	bool H_9j9phn = BaseColor.x < C_0d66;
	vec4 select = H_9j9phn ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 _L = H_bghf2q ? C_vec4p0d33p : select;
	vec4 select1 = BaseColor + _L;
	color = select1;
	while (color.x < d) {
		vec4 colorb = bigColor + color;
		color = colorb;
	}
	
	color1 = color;
	while (color1.z < d) {
		vec4 colorc = bigColor1_1 + color1;
		bool H_28748h = colorc.w < d;
		vec4 colord = bigColor1_1 + colorc;
		vec4 select2 = H_28748h ? colorc : colord;
		color1 = select2;
	}
	
	color2 = color1;
	while (color2.x < C_42d0) {
		vec4 colore = color2 + C_vec4p1d0p;
		color2 = colore;
	}
	
	color3 = color2;
	while (true) {
		bool notlhs = color3.w >= d2;
		bool notrhs = color3.y >= d3;
		bool H_nbn92x = notrhs || notlhs;
		if (H_nbn92x) {
			break;
		}
		
		vec4 colorf = bigColor1_2 + color3;
		color3 = colorf;
	}
	
	color4 = color3;
	color5 = color4;
	while (color4.z < d3) {
		colorg = bigColor1_3 + color4;
		bool H_cp7uj = colorg.y < d4;
		if (H_cp7uj) {
			color5 = colorg;
			break;
		}
		
		vec4 colorh = bigColor1_3 + colorg;
		color4 = colorh;
		color5 = color4;
	}
	
	i = C_0;
	color6 = color5;
	for (i = 0; i < Count; ++i) {
		vec4 colori = bigColor2 + color6;
		color6 = colori;
	}
	
	color7 = color6;
	while (true) {
		colorj = bigColor3 + color7;
		bool H_946xso1 = colorj.x >= d2;
		if (H_946xso1) {
			break;
		}
		
		color7 = colorj;
	}
	
	float H_whexx = colorj.z + d3;
	float H_r8jpbt = H_whexx + d3;
	float H_jm = H_r8jpbt + d3;
	float H_teod = H_jm + d3;
	float H_r86qnl = H_teod + d3;
	float H_6u1wt = H_r86qnl + d3;
	float H_v8xbk = H_6u1wt + d3;
	float H_2f0g8y = H_v8xbk + d3;
	float H_zmpw1p = H_2f0g8y + d3;
	float H_ldm5g = H_zmpw1p + d3;
	float H_9bdgf = H_ldm5g + d3;
	float H_hur0wd = H_9bdgf + d3;
	float H_6rhtxy = H_hur0wd + d3;
	float H_k3oo5n = H_6rhtxy + d3;
	float H_wiryko = H_k3oo5n + d3;
	float H_cwto6a = H_wiryko + d3;
	float H_4eyrkk = H_cwto6a + d3;
	float H_fpocnt = H_4eyrkk + d3;
	float H_c7h3pk = H_fpocnt + d3;
	float H_epfg = H_c7h3pk + d3;
	float H_s31wpc = H_epfg + d3;
	float H_k5wcuv = H_s31wpc + d3;
	float H_2oqnl = H_k5wcuv + d3;
	float H_oxwqoj = H_2oqnl + d3;
	float H_ra85mi = H_oxwqoj + d3;
	float H_xh = H_ra85mi + d3;
	float H_0ep6up = H_xh + d3;
	float H_wh8qon = H_0ep6up + d3;
	float H_0lojdy = H_wh8qon + d3;
	float H_58mfy = H_0lojdy + d3;
	float H_865c = H_58mfy + d3;
	float H_0ob62j = H_865c + d3;
	float H_gclhqq = H_0ob62j + d3;
	float H_bqtmch = H_gclhqq + d3;
	float H_h0exes = H_bqtmch + d3;
	float H_cx9xbb = H_h0exes + d3;
	float H_81hi4x = H_cx9xbb + d3;
	float H_kj94nv = H_81hi4x + d3;
	float H_5zwnye = H_kj94nv + d3;
	float H_vb1m6c = H_5zwnye + d3;
	float H_kljeh = H_vb1m6c + d3;
	float H_ack95d = H_kljeh + d3;
	vec4 H_aj0o0z1 = colorj;
	H_aj0o0z1.z = H_ack95d;
	Lg_ = C_0;
	color8 = H_aj0o0z1;
	for ( ; Lg_ != 100; ++Lg_) {
		bool H_ouigu = color8.z < C_20d0;
		float H_i27ik = color8.x + C_1d0;
		vec4 H_wgo1rc = color8;
		H_wgo1rc.x = H_i27ik;
		float H_tyie6w = C_1d0 + color8.y;
		vec4 H_wgo1rcr = color8;
		H_wgo1rcr.y = H_tyie6w;
		vec4 select3 = H_ouigu ? H_wgo1rc : H_wgo1rcr;
		color8 = select3;
	}
	
	Lg_1 = C_0;
	color9 = color8;
	for ( ; Lg_1 != 120; ++Lg_1) {
		bool H_dkcc0l = color9.z < C_20d0;
		float H_5t8tep = C_1d0 + color9.x;
		vec4 H_v5a11d = color9;
		H_v5a11d.x = H_5t8tep;
		float H_64nt4p = C_1d0 + color9.y;
		vec4 H_v5a11dr = color9;
		H_v5a11dr.y = H_64nt4p;
		vec4 select4 = H_dkcc0l ? H_v5a11d : H_v5a11dr;
		color9 = select4;
	}
	
	Lg_2 = C_0;
	colora = color9;
	for ( ; Lg_2 != 42; ++Lg_2) {
		float H_bthy3g = colora.z + d3;
		bool H_nda4t = colora.x < d4;
		vec4 H_ze6hx1 = colora;
		H_ze6hx1.z = H_bthy3g;
		float H_0bsj8w = C_1d0 + colora.w;
		vec4 H_ze6hx1r = colora;
		H_ze6hx1r.zw = vec2(H_bthy3g, H_0bsj8w);
		vec4 select5 = H_nda4t ? H_ze6hx1 : H_ze6hx1r;
		colora = select5;
	}
	
	colorc = colora;
	Lg_3 = C_0;
	colorc1 = colorc;
	while (Lg_3 <= C_41) {
		float H_0f3y = colorc.z + d3;
		Lg_1 = colorc;
		Lg_1.z = H_0f3y;
		bool H_0rnct = colorc.x < d4;
		if (H_0rnct) {
			colorc1 = Lg_1;
			break;
		}
		
		float H_heycbr = C_1d0 + colorc.w;
		vec4 H_43cmyw = Lg_1;
		H_43cmyw.w = H_heycbr;
		int H_zk97sd = Lg_3 + C_1;
		colorc = H_43cmyw;
		Lg_3 = H_zk97sd;
		colorc1 = colorc;
	}
	
	colord = colorc1;
	while (true) {
		vec4 colora1 = bigColor4 + colord;
		bool H_wfbsrv = colora1.x < d4;
		bool H_l4he8s = colora1.y < d4;
		float H_ejmt1t = colora1.y + d4;
		vec4 H_egrhpy = colora1;
		H_egrhpy.y = H_ejmt1t;
		float H_jeh00b = colora1.x + d4;
		vec4 H_egrhpyr = colora1;
		H_egrhpyr.x = H_jeh00b;
		vec4 select6 = H_l4he8s ? H_egrhpy : H_egrhpyr;
		colora2 = H_wfbsrv ? colora1 : select6;
		bool H_wnbq1a = colora2.z >= d4;
		if (H_wnbq1a) {
			break;
		}
		
		colord = colora2;
	}
	
	colore = colora2;
	while (true) {
		vec4 colorb1 = bigColor5 + colore;
		bool H_z5hy3o = colorb1.y < d5;
		float H_g4jirs = colorb1.y + d5;
		vec4 H_hbtye1 = colorb1;
		H_hbtye1.y = H_g4jirs;
		select7 = H_z5hy3o ? H_hbtye1 : colorb1;
		bool H_obwk4n1 = select7.x >= d5;
		if (H_obwk4n1) {
			break;
		}
		
		colore = select7;
	}
	
	bool H_8l0mbn = select7.x < d6;
	if (H_8l0mbn) {
		colorf = select7;
		while (colorf.y < d6) {
			vec4 colorc2 = bigColor6 + colorf;
			colorf = colorc2;
		}
		
		colorh = colorf;
	} else {
		colorg = select7;
		while (colorg.z < d6) {
			float H_9z12ld = bigColor6.z + colorg.z;
			vec4 H_tksel3 = colorg;
			H_tksel3.z = H_9z12ld;
			colorg = H_tksel3;
		}
		
		colorh = colorg;
	}
	
	bool H_s3gwv = colorh.x < d6;
	if (H_s3gwv) {
		bool H_lmykhx = d7 < C_1d0;
		colorj = colorh;
		colorj1 = colorj;
		while (colorj.y < d6) {
			colord1 = bigColor6 + colorj;
			if (H_lmykhx) {
				colorj1 = colord1;
				break;
			}
			
			colorj = colord1;
			colorj1 = colorj;
		}
		
		colorl = colorj1;
	} else {
		colork = colorh;
		while (colork.z < d6) {
			float H_5b1cdw = bigColor6.z + colork.z;
			vec4 H_59kj9 = colork;
			H_59kj9.z = H_5b1cdw;
			colork = H_59kj9;
		}
		
		colorl = colork;
	}
	
	bool H_2ecxn = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	colorm = colorl;
	while (true) {
		if (H_2ecxn) {
			colorn = colorm;
			break;
		}
		
		colore1 = bigColor7 + colorm;
		if (H_lmykhx1r) {
			float H_2h17h = C_1d0 + colore1.z;
			vec4 H_airzhw = colore1;
			H_airzhw.z = H_2h17h;
			colorn = H_airzhw;
			break;
		}
		
		vec4 colorf1 = BaseColor + colore1;
		colorm = colorf1;
	}
	
	bool H_zt4vz = d8 < C_0d0;
	bool H_cokhy = d8 < C_1d0;
	coloro = colorn;
	while (true) {
		if (H_zt4vz) {
			colorp = coloro;
			break;
		}
		
		colorg1 = bigColor7 + coloro;
		if (H_cokhy) {
			float H_k5f2xg = C_1d0 + colorg1.z;
			bool H_hrxnuy = d8 < C_2d0;
			float H_h881rh = C_1d0 + colorg1.y;
			vec4 H_wta1uz = colorg1;
			H_wta1uz.yz = vec2(H_h881rh, H_k5f2xg);
			float H_ijm1hh = C_1d0 + colorg1.x;
			vec4 H_wta1uzr = colorg1;
			H_wta1uzr.xz = vec2(H_ijm1hh, H_k5f2xg);
			vec4 select8 = H_hrxnuy ? H_wta1uz : H_wta1uzr;
			colorp = select8;
			break;
		}
		
		colorh1 = BaseColor + colorg1;
		bool H_sxbc5j = colorh1.z >= d8;
		if (H_sxbc5j) {
			colorp = colorh1;
			break;
		}
		
		coloro = colorh1;
	}
	
	bool H_45lodh = d9 > d8;
	colorq = colorp;
	while (colorq.w < d9) {
		colors = colorq;
		if (H_45lodh) {
			bool H_119bn2 = colorq.x <= d7;
			colorr = colorq;
			if (H_119bn2) {
				bool H_6q2oii = colorq.z != C_5d0;
				if (H_6q2oii) {
					break;
				}
				
				float H_s84pya = C_1d0 + colorq.w;
				vec4 H_jalriw1 = colorq;
				H_jalriw1.w = H_s84pya;
				colorr = H_jalriw1;
			}
			
			colors = colorr;
		}
		
		colorq = colors;
	}
	
	colort = colorq;
	coloru = colort;
	while (colort.z < d10) {
		float H_906no = C_1d0 + colort.y;
		Lg_3 = colort;
		Lg_3.y = H_906no;
		bool H_91q1tp1 = H_906no >= d11;
		if (H_91q1tp1) {
			vec4 colori1 = C_vec4p1d0p + Lg_3;
			coloru = colori1;
			break;
		}
		
		float H_cxcou = C_1d0 + colort.z;
		bool H_c8m0ti = colort.w < d12;
		float H_zx6jg = C_1d0 + colort.w;
		vec4 H_2hjlix = Lg_3;
		H_2hjlix.zw = vec2(H_cxcou, H_zx6jg);
		float H_abkne = C_1d0 + colort.x;
		vec4 H_2hjlixr = Lg_3;
		H_2hjlixr.xz = vec2(H_abkne, H_cxcou);
		vec4 select9 = H_c8m0ti ? H_2hjlix : H_2hjlixr;
		colort = select9;
		coloru = colort;
	}
	
	colorv = coloru;
	while (colorv.x < C_10d0) {
		vec4 colorj2 = bigColor8 + colorv;
		bool H_f99dxf = colorj2.z < d8;
		bool H_sm96gh = colorj2.w < d6;
		float H_8im07j = bigColor8.x + colorj2.y;
		vec4 H_4quxmv = colorj2;
		H_4quxmv.y = H_8im07j;
		vec4 colorj3 = H_sm96gh ? colorj2 : H_4quxmv;
		vec4 selectd = H_f99dxf ? colorj3 : H_4quxmv;
		colorv = selectd;
	}
	
	vec4 colork1 = C_vec4p1d0p + colorv;
	gl_FragColor = colork1;
	colorw = colork1;
	while (colorw.x < d14) {
		bool H_2es7t = colorw.y < d15;
		if (H_2es7t) {
			return;
		}
		
		vec4 colorl1 = C_vec4p1d0p + colorw;
		colorw = colorl1;
	}
	
	vec4 colorm1 = C_vec4p1d0p + colorw;
	colorx = colorm1;
	while (colorx.w < d16) {
		float H_zaeepd = C_1d0 + colorx.w;
		vec4 H_s16v0u1 = colorx;
		H_s16v0u1.w = H_zaeepd;
		colorx = H_s16v0u1;
	}
	
	colory = colorx;
	while (true) {
		bool notlhs1 = colory.w >= d2;
		bool notrhs1 = colory.y >= d3;
		bool H_9acxdp = notrhs1 || notlhs1;
		vec4 colorq1 = bigColor1_2 + colory;
		colory = colorq1;
	}
	
	colorz = colory;
	while (colorz.y >= d18) {
		colorn1 = C_vec4p1d0p + colorz;
		bool H_0dzijc1 = colorn1.x >= d17;
		if (H_0dzijc1) {
			colora = colorn1;
			while (colora.y < d16) {
				bool H_z37o2g = colora.w < d16;
				if (H_z37o2g) {
					discard;
				}
				
				vec4 coloro1 = C_vec4p1d0p + colora;
				colora = coloro1;
			}
			
			vec4 colorp1 = C_vec4p1d0p + colora;
			gl_FragColor = colorp1;
			return;
		}
		
		colorz = colorn1;
	}
	
	
}

