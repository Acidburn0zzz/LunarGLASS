
Top IR:
; ModuleID = 'Glslang'

%fromVertex = type { <3 x float>, i32, i32 }
%fromVertex.0 = type { <3 x float> }
%gl_PerVertex = type { <4 x float>, float }
%gl_PerVertex.1 = type { <4 x float>, float }
%toFragment = type { <3 x float> }

@"anon@0" = global %fromVertex zeroinitializer
@fromV = global [4 x %fromVertex.0] zeroinitializer
@centr = global [4 x <3 x float>] zeroinitializer
@"anon@1" = global %gl_PerVertex zeroinitializer
@gl_in = global [4 x %gl_PerVertex.1] zeroinitializer
@gl_PrimitiveID = global i32 0
@gl_PrimitiveIDIn = global i32 0
@gl_Layer = global i32 0
@gl_InvocationID = global i32 0
@nonBlockUnsized = global [4 x <4 x float>] zeroinitializer
@toF = global %toFragment zeroinitializer

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  %0 = load <3 x float>* getelementptr inbounds ([4 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0)
  %1 = load <3 x float>* getelementptr inbounds ([4 x <3 x float>]* @centr, i32 0, i32 1)
  %2 = fadd <3 x float> %0, %1, !gla.precision !41
  store <3 x float> %2, <3 x float>* getelementptr inbounds (%fromVertex* @"anon@0", i32 0, i32 0)
  %3 = load <4 x float>* getelementptr inbounds ([4 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0)
  store <4 x float> %3, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 0)
  %gl_PrimitiveID = load i32* @gl_PrimitiveIDIn
  store i32 %gl_PrimitiveID, i32* @gl_PrimitiveID
  store i32 2, i32* @gl_Layer
  store i32 4, i32* getelementptr inbounds (%fromVertex* @"anon@0", i32 0, i32 1)
  %4 = load i32* @gl_InvocationID
  store i32 %4, i32* getelementptr inbounds (%fromVertex* @"anon@0", i32 0, i32 2)
  call void @"pointSize2("()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc void @"pointSize2("() #0 {
entry:
  %ps = alloca float
  %ps1 = load float* getelementptr inbounds ([4 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1)
  store float %ps1, float* %ps
  %0 = load float* %ps
  store float %0, float* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 1)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #1

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5, !12, !18, !20, !22}
!gla.inputs = !{!26, !29, !31, !35, !37, !39}
!gla.noStaticUse = !{!39, !22}

!0 = !{i32 4}
!1 = !{i32 200}
!2 = !{i32 3}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %fromVertex* @"anon@0_typeProxy", !6, !"fromVertex", !7, !9, !11}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"color", i32 7, <3 x float>* @color_typeProxy, !8, !""}
!8 = !{i32 0, i32 2, i32 1024, null, i32 512, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"len", i32 7, i32* @len_typeProxy, !10, !""}
!10 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"inv", i32 7, i32* @inv_typeProxy, !10, !""}
!12 = !{!"", i32 16, %gl_PerVertex* @"anon@1_typeProxy", !13, !"gl_PerVertex", !14, !16}
!13 = !{i32 0, i32 0, i32 1035, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!14 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !15, !""}
!15 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!16 = !{!"gl_PointSize", i32 9, float* @gl_PointSize_typeProxy, !17, !""}
!17 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 10, i32 -1, i32 0, i32 -1}
!18 = !{!"gl_PrimitiveID", i32 7, i32* @gl_PrimitiveID_typeProxy, !19, !""}
!19 = !{i32 0, i32 3, i32 1045, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!20 = !{!"gl_Layer", i32 7, i32* @gl_Layer_typeProxy, !21, !""}
!21 = !{i32 0, i32 3, i32 1047, null, i32 0, i32 32, i32 -1, i32 0, i32 -1}
!22 = !{!"toF", i32 16, %toFragment* @toF_typeProxy, !23, !"toFragment", !24}
!23 = !{i32 0, i32 0, i32 1053, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!24 = !{!"color", i32 7, <3 x float>* @color_typeProxy, !25, !""}
!25 = !{i32 0, i32 2, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!26 = !{!"fromV", i32 17, [4 x %fromVertex.0]* @fromV_typeProxy, !27, !"fromVertex", !28}
!27 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!28 = !{!"color", i32 1, <3 x float>* @color_typeProxy, !25, !""}
!29 = !{!"centr", i32 1, [4 x <3 x float>]* @centr_typeProxy, !30, !""}
!30 = !{i32 0, i32 2, i32 1031, null, i32 512, i32 0, i32 -1, i32 0, i32 -1}
!31 = !{!"gl_in", i32 17, [4 x %gl_PerVertex.1]* @gl_in_typeProxy, !32, !"gl_PerVertex", !33, !34}
!32 = !{i32 0, i32 0, i32 1037, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!33 = !{!"gl_Position", i32 1, <4 x float>* @gl_Position_typeProxy, !15, !""}
!34 = !{!"gl_PointSize", i32 1, float* @gl_PointSize_typeProxy, !17, !""}
!35 = !{!"gl_PrimitiveIDIn", i32 1, i32* @gl_PrimitiveIDIn_typeProxy, !36, !""}
!36 = !{i32 0, i32 3, i32 1046, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!37 = !{!"gl_InvocationID", i32 1, i32* @gl_InvocationID_typeProxy, !38, !""}
!38 = !{i32 0, i32 3, i32 1048, null, i32 0, i32 30, i32 -1, i32 0, i32 -1}
!39 = !{!"nonBlockUnsized", i32 1, [4 x <4 x float>]* @nonBlockUnsized_typeProxy, !40, !""}
!40 = !{i32 0, i32 2, i32 1049, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!41 = !{i32 2}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

%fromVertex = type { <3 x float>, i32, i32 }
%fromVertex.0 = type { <3 x float> }
%gl_PerVertex = type { <4 x float>, float }
%gl_PerVertex.1 = type { <4 x float>, float }
%toFragment = type { <3 x float> }

@"anon@0" = global %fromVertex zeroinitializer
@fromV = global [4 x %fromVertex.0] zeroinitializer
@centr = global [4 x <3 x float>] zeroinitializer
@"anon@1" = global %gl_PerVertex zeroinitializer
@gl_in = global [4 x %gl_PerVertex.1] zeroinitializer
@gl_PrimitiveID = global i32 0
@gl_PrimitiveIDIn = global i32 0
@gl_Layer = global i32 0
@gl_InvocationID = global i32 0
@nonBlockUnsized = global [4 x <4 x float>] zeroinitializer
@toF = global %toFragment zeroinitializer

define fastcc void @main() {
entry:
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  %gla_constGEP = getelementptr [4 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0
  %0 = load <3 x float>* %gla_constGEP
  %gla_constGEP1 = getelementptr [4 x <3 x float>]* @centr, i32 0, i32 1
  %1 = load <3 x float>* %gla_constGEP1
  %2 = fadd <3 x float> %0, %1, !gla.precision !41
  %gla_constGEP2 = getelementptr %fromVertex* @"anon@0", i32 0, i32 0
  store <3 x float> %2, <3 x float>* %gla_constGEP2
  %gla_constGEP3 = getelementptr [4 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0
  %3 = load <4 x float>* %gla_constGEP3
  %gla_constGEP4 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 0
  store <4 x float> %3, <4 x float>* %gla_constGEP4
  %gl_PrimitiveID = load i32* @gl_PrimitiveIDIn
  store i32 %gl_PrimitiveID, i32* @gl_PrimitiveID
  store i32 2, i32* @gl_Layer
  %gla_constGEP5 = getelementptr %fromVertex* @"anon@0", i32 0, i32 1
  store i32 4, i32* %gla_constGEP5
  %4 = load i32* @gl_InvocationID
  %gla_constGEP6 = getelementptr %fromVertex* @"anon@0", i32 0, i32 2
  store i32 %4, i32* %gla_constGEP6
  %gla_constGEP7 = getelementptr [4 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1
  %ps1.i = load float* %gla_constGEP7
  %gla_constGEP8 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 1
  store float %ps1.i, float* %gla_constGEP8
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5, !12, !18, !20, !22}
!gla.inputs = !{!26, !29, !31, !35, !37, !39}
!gla.noStaticUse = !{!39, !22}

!0 = !{i32 4}
!1 = !{i32 200}
!2 = !{i32 3}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %fromVertex* @"anon@0_typeProxy", !6, !"fromVertex", !7, !9, !11}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"color", i32 7, <3 x float>* @color_typeProxy, !8, !""}
!8 = !{i32 0, i32 2, i32 1024, null, i32 512, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"len", i32 7, i32* @len_typeProxy, !10, !""}
!10 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!11 = !{!"inv", i32 7, i32* @inv_typeProxy, !10, !""}
!12 = !{!"", i32 16, %gl_PerVertex* @"anon@1_typeProxy", !13, !"gl_PerVertex", !14, !16}
!13 = !{i32 0, i32 0, i32 1035, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!14 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !15, !""}
!15 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!16 = !{!"gl_PointSize", i32 9, float* @gl_PointSize_typeProxy, !17, !""}
!17 = !{i32 0, i32 3, i32 1024, null, i32 0, i32 10, i32 -1, i32 0, i32 -1}
!18 = !{!"gl_PrimitiveID", i32 7, i32* @gl_PrimitiveID_typeProxy, !19, !""}
!19 = !{i32 0, i32 3, i32 1045, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!20 = !{!"gl_Layer", i32 7, i32* @gl_Layer_typeProxy, !21, !""}
!21 = !{i32 0, i32 3, i32 1047, null, i32 0, i32 32, i32 -1, i32 0, i32 -1}
!22 = !{!"toF", i32 16, %toFragment* @toF_typeProxy, !23, !"toFragment", !24}
!23 = !{i32 0, i32 0, i32 1053, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!24 = !{!"color", i32 7, <3 x float>* @color_typeProxy, !25, !""}
!25 = !{i32 0, i32 2, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!26 = !{!"fromV", i32 17, [4 x %fromVertex.0]* @fromV_typeProxy, !27, !"fromVertex", !28}
!27 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!28 = !{!"color", i32 1, <3 x float>* @color_typeProxy, !25, !""}
!29 = !{!"centr", i32 1, [4 x <3 x float>]* @centr_typeProxy, !30, !""}
!30 = !{i32 0, i32 2, i32 1031, null, i32 512, i32 0, i32 -1, i32 0, i32 -1}
!31 = !{!"gl_in", i32 17, [4 x %gl_PerVertex.1]* @gl_in_typeProxy, !32, !"gl_PerVertex", !33, !34}
!32 = !{i32 0, i32 0, i32 1037, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!33 = !{!"gl_Position", i32 1, <4 x float>* @gl_Position_typeProxy, !15, !""}
!34 = !{!"gl_PointSize", i32 1, float* @gl_PointSize_typeProxy, !17, !""}
!35 = !{!"gl_PrimitiveIDIn", i32 1, i32* @gl_PrimitiveIDIn_typeProxy, !36, !""}
!36 = !{i32 0, i32 3, i32 1046, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!37 = !{!"gl_InvocationID", i32 1, i32* @gl_InvocationID_typeProxy, !38, !""}
!38 = !{i32 0, i32 3, i32 1048, null, i32 0, i32 30, i32 -1, i32 0, i32 -1}
!39 = !{!"nonBlockUnsized", i32 1, [4 x <4 x float>]* @nonBlockUnsized_typeProxy, !40, !""}
!40 = !{i32 0, i32 2, i32 1049, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!41 = !{i32 2}
#version 310 es
// LunarGOO output
#extension GL_ANDROID_extension_pack_es31a : enable
#extension GL_EXT_geometry_shader : enable
#extension GL_EXT_gpu_shader5 : enable
#extension GL_EXT_primitive_bounding_box : enable
#extension GL_EXT_shader_io_blocks : enable
#extension GL_EXT_tessellation_shader : enable
#extension GL_EXT_texture_buffer : enable
#extension GL_EXT_texture_cube_map_array : enable
#extension GL_KHR_blend_equation_advanced : enable
#extension GL_OES_geometry_point_size : enable
#extension GL_OES_sample_variables : enable
#extension GL_OES_shader_image_atomic : enable
#extension GL_OES_shader_multisample_interpolation : enable
#extension GL_OES_texture_storage_multisample_2d_array : enable
layout(lines_adjacency) in;
layout(invocations = 4) in;
layout(triangle_strip) out;
layout(max_vertices = 200) out;
in fromVertex {
	mediump vec3 color;
} fromV[4];
in mediump vec3 centr[4];
in mediump vec4 nonBlockUnsized[4];
out fromVertex {
	mediump vec3 color;
	highp int len;
	highp int inv;
} ;
out toFragment {
	mediump vec3 color;
} toF;
const int C_2 = 2;
const int C_4 = 4;

void main()
{
	EmitVertex();
	EndPrimitive();
	mediump vec3 H_g00yqf1 = centr[1] + fromV[0].color;
	color = H_g00yqf1;
	gl_Position = gl_in[0].gl_Position;
	gl_PrimitiveID = gl_PrimitiveIDIn;
	gl_Layer = C_2;
	len = C_4;
	inv = gl_InvocationID;
	gl_PointSize = gl_in[3].gl_PointSize;
	
}

