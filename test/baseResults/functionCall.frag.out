
Top IR:
; ModuleID = 'Glslang'

@h = internal global float 0.000000e+00
@d = external addrspace(2) constant float
@BaseColor = global <4 x float> zeroinitializer
@gl_FragColor = global <4 x float> zeroinitializer
@bigColor = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %g = alloca float
  %f = alloca float
  %color2 = alloca <4 x float>
  %param = alloca <4 x float>
  %color = alloca <4 x float>
  store float 0.000000e+00, float* @h
  br label %mainBody

mainBody:                                         ; preds = %entry
  %param1 = load <4 x float>* @BaseColor
  store <4 x float> %param1, <4 x float>* %param
  %0 = call float @"foo(vf4;"(<4 x float>* %param)
  %1 = load <4 x float>* %color2
  %2 = insertelement <4 x float> undef, float %0, i32 0
  %3 = insertelement <4 x float> %2, float %0, i32 1
  %4 = insertelement <4 x float> %3, float %0, i32 2
  %color3 = insertelement <4 x float> %4, float %0, i32 3
  store <4 x float> %color3, <4 x float>* %color
  call void @"bar("()
  %f4 = call float @"unreachableReturn("()
  store float %f4, float* %f
  %g5 = call float @"missingReturn("()
  store float %g5, float* %g
  %5 = load <4 x float>* %color
  %6 = load float* %f
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %8 = insertelement <4 x float> %7, float %6, i32 1
  %9 = insertelement <4 x float> %8, float %6, i32 2
  %10 = insertelement <4 x float> %9, float %6, i32 3
  %11 = fmul <4 x float> %5, %10
  %12 = load float* @h
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = insertelement <4 x float> %13, float %12, i32 1
  %15 = insertelement <4 x float> %14, float %12, i32 2
  %16 = insertelement <4 x float> %15, float %12, i32 3
  %gl_FragColor = fmul <4 x float> %11, %16
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"foo(vf4;"(<4 x float>*) #0 {
entry:
  %1 = load <4 x float>* %0
  %2 = extractelement <4 x float> %1, i32 0
  %3 = load <4 x float>* %0
  %4 = extractelement <4 x float> %3, i32 1
  %5 = fadd float %2, %4
  ret float %5

post-return:                                      ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc void @"bar("() #0 {
entry:
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"unreachableReturn("() #0 {
entry:
  %0 = load float addrspace(2)* @d, !gla.uniform !0
  %1 = fcmp olt float %0, 0x4010CCCCC0000000
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret float 0x3FF3333340000000

post-return:                                      ; No predecessors!
  unreachable

else:                                             ; preds = %entry
  ret float 4.500000e+00

post-return1:                                     ; No predecessors!
  unreachable

ifmerge:                                          ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc float @"missingReturn("() #0 {
entry:
  %dummyReturn = alloca float
  %0 = load float addrspace(2)* @d, !gla.uniform !0
  %1 = fcmp olt float %0, 4.500000e+00
  br i1 %1, label %then, label %ifmerge

then:                                             ; preds = %entry
  %h = load float addrspace(2)* @d, !gla.uniform !0
  store float %h, float* @h
  ret float 0x400F333340000000

post-return:                                      ; No predecessors!
  unreachable

ifmerge:                                          ; preds = %entry
  %2 = load float* %dummyReturn
  ret float %2
}

attributes #0 = { alwaysinline }

!gla.uniforms = !{!0, !2}
!gla.entrypoint = !{!3}
!gla.inputs = !{!4}
!gla.outputs = !{!6}
!gla.noStaticUse = !{!2}

!0 = !{!"d", i32 12, float* @d_typeProxy, !1}
!1 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!2 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !1}
!3 = !{!"main", i32 15}
!4 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !5}
!5 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !7}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
