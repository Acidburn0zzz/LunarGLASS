
Top IR:
; ModuleID = 'Glslang'

%gl_PerVertex = type { <4 x float>, [1 x float] }
%gl_PerVertex.0 = type { <4 x float>, [1 x float] }

@"anon@0" = global %gl_PerVertex zeroinitializer
@gl_in = global [3 x %gl_PerVertex.0] zeroinitializer

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load <4 x float>* getelementptr inbounds ([3 x %gl_PerVertex.0]* @gl_in, i32 0, i32 1, i32 0)
  store <4 x float> %0, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@0", i32 0, i32 0)
  %1 = load float* getelementptr inbounds ([3 x %gl_PerVertex.0]* @gl_in, i32 0, i32 1, i32 1, i32 0)
  store float %1, float* getelementptr inbounds (%gl_PerVertex* @"anon@0", i32 0, i32 1, i32 0)
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5}
!gla.inputs = !{!11}

!0 = !{i32 1}
!1 = !{i32 3}
!2 = !{i32 5}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %gl_PerVertex* @"anon@0_typeProxy", !6, !"gl_PerVertex", !7, !9}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!9 = !{!"gl_ClipDistance", i32 7, [1 x float]* @gl_ClipDistance_typeProxy, !10, !""}
!10 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 12, i32 -1, i32 0, i32 -1}
!11 = !{!"gl_in", i32 17, [3 x %gl_PerVertex.0]* @gl_in_typeProxy, !12, !"gl_PerVertex", !13, !14}
!12 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!13 = !{!"gl_Position", i32 1, <4 x float>* @gl_Position_typeProxy, !8, !""}
!14 = !{!"gl_ClipDistance", i32 1, [1 x float]* @gl_ClipDistance_typeProxy, !10, !""}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

%gl_PerVertex = type { <4 x float>, [1 x float] }
%gl_PerVertex.0 = type { <4 x float>, [1 x float] }

@"anon@0" = global %gl_PerVertex zeroinitializer
@gl_in = global [3 x %gl_PerVertex.0] zeroinitializer

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [3 x %gl_PerVertex.0]* @gl_in, i32 0, i32 1, i32 0
  %0 = load <4 x float>* %gla_constGEP
  %gla_constGEP1 = getelementptr %gl_PerVertex* @"anon@0", i32 0, i32 0
  store <4 x float> %0, <4 x float>* %gla_constGEP1
  %gla_constGEP2 = getelementptr [3 x %gl_PerVertex.0]* @gl_in, i32 0, i32 1, i32 1, i32 0
  %1 = load float* %gla_constGEP2
  %gla_constGEP3 = getelementptr %gl_PerVertex* @"anon@0", i32 0, i32 1, i32 0
  store float %1, float* %gla_constGEP3
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5}
!gla.inputs = !{!11}

!0 = !{i32 1}
!1 = !{i32 3}
!2 = !{i32 5}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %gl_PerVertex* @"anon@0_typeProxy", !6, !"gl_PerVertex", !7, !9}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"gl_Position", i32 8, <4 x float>* @gl_Position_typeProxy, !8, !""}
!8 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 9, i32 -1, i32 0, i32 -1}
!9 = !{!"gl_ClipDistance", i32 7, [1 x float]* @gl_ClipDistance_typeProxy, !10, !""}
!10 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 12, i32 -1, i32 0, i32 -1}
!11 = !{!"gl_in", i32 17, [3 x %gl_PerVertex.0]* @gl_in_typeProxy, !12, !"gl_PerVertex", !13, !14}
!12 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!13 = !{!"gl_Position", i32 1, <4 x float>* @gl_Position_typeProxy, !8, !""}
!14 = !{!"gl_ClipDistance", i32 1, [1 x float]* @gl_ClipDistance_typeProxy, !10, !""}
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
layout(triangles) in;
layout(triangle_strip) out;
layout(max_vertices = 3) out;
in gl_PerVertex {
	vec4 gl_Position;
	float gl_ClipDistance[1];
} gl_in[3];
out gl_PerVertex {
	vec4 gl_Position;
	float gl_ClipDistance[1];
} ;

void main()
{
	gl_Position = gl_in[1].gl_Position;
	gl_ClipDistance[0] = gl_in[1].gl_ClipDistance[0];
	EmitVertex();
	EndPrimitive();
	
}

